//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Shibuya.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IXcAssetConfigStorage interface definition.
    /// </summary>
    public interface IXcAssetConfigStorage : IStorage
    {
        
        /// <summary>
        /// >> AssetIdToLocation
        ///  Mapping from an asset id to asset type.
        ///  Can be used when receiving transaction specifying an asset directly,
        ///  like transferring an asset from this chain to another.
        /// </summary>
        Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation GetAssetIdToLocation(string key);
        
        /// <summary>
        /// >> AssetLocationToId
        ///  Mapping from an asset type to an asset id.
        ///  Can be used when receiving a multilocation XCM message to retrieve
        ///  the corresponding asset in which tokens should me minted.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetAssetLocationToId(string key);
        
        /// <summary>
        /// >> AssetLocationUnitsPerSecond
        ///  Stores the units per second for local execution for a AssetLocation.
        ///  This is used to know how to charge for XCM execution in a particular asset.
        /// 
        ///  Not all asset types are supported for payment. If value exists here, it means it is supported.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetAssetLocationUnitsPerSecond(string key);
    }
    
    /// <summary>
    /// XcAssetConfigStorage class definition.
    /// </summary>
    public sealed class XcAssetConfigStorage : IXcAssetConfigStorage
    {
        
        /// <summary>
        /// _assetIdToLocationTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation> _assetIdToLocationTypedStorage;
        
        /// <summary>
        /// _assetLocationToIdTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _assetLocationToIdTypedStorage;
        
        /// <summary>
        /// _assetLocationUnitsPerSecondTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _assetLocationUnitsPerSecondTypedStorage;
        
        /// <summary>
        /// XcAssetConfigStorage constructor.
        /// </summary>
        public XcAssetConfigStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.AssetIdToLocationTypedStorage = new TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation>("XcAssetConfig.AssetIdToLocation", storageDataProvider, storageChangeDelegates);
            this.AssetLocationToIdTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("XcAssetConfig.AssetLocationToId", storageDataProvider, storageChangeDelegates);
            this.AssetLocationUnitsPerSecondTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("XcAssetConfig.AssetLocationUnitsPerSecond", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _assetIdToLocationTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation> AssetIdToLocationTypedStorage
        {
            get
            {
                return _assetIdToLocationTypedStorage;
            }
            set
            {
                _assetIdToLocationTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _assetLocationToIdTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> AssetLocationToIdTypedStorage
        {
            get
            {
                return _assetLocationToIdTypedStorage;
            }
            set
            {
                _assetLocationToIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _assetLocationUnitsPerSecondTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> AssetLocationUnitsPerSecondTypedStorage
        {
            get
            {
                return _assetLocationUnitsPerSecondTypedStorage;
            }
            set
            {
                _assetLocationUnitsPerSecondTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await AssetIdToLocationTypedStorage.InitializeAsync("XcAssetConfig", "AssetIdToLocation");
            await AssetLocationToIdTypedStorage.InitializeAsync("XcAssetConfig", "AssetLocationToId");
            await AssetLocationUnitsPerSecondTypedStorage.InitializeAsync("XcAssetConfig", "AssetLocationUnitsPerSecond");
        }
        
        /// <summary>
        /// Implements any storage change for XcAssetConfig.AssetIdToLocation
        /// </summary>
        [StorageChange("XcAssetConfig", "AssetIdToLocation")]
        public void OnUpdateAssetIdToLocation(string key, string data)
        {
            AssetIdToLocationTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AssetIdToLocation
        ///  Mapping from an asset id to asset type.
        ///  Can be used when receiving transaction specifying an asset directly,
        ///  like transferring an asset from this chain to another.
        /// </summary>
        public Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation GetAssetIdToLocation(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AssetIdToLocationTypedStorage.Dictionary.TryGetValue(key, out Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for XcAssetConfig.AssetLocationToId
        /// </summary>
        [StorageChange("XcAssetConfig", "AssetLocationToId")]
        public void OnUpdateAssetLocationToId(string key, string data)
        {
            AssetLocationToIdTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AssetLocationToId
        ///  Mapping from an asset type to an asset id.
        ///  Can be used when receiving a multilocation XCM message to retrieve
        ///  the corresponding asset in which tokens should me minted.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetAssetLocationToId(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AssetLocationToIdTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for XcAssetConfig.AssetLocationUnitsPerSecond
        /// </summary>
        [StorageChange("XcAssetConfig", "AssetLocationUnitsPerSecond")]
        public void OnUpdateAssetLocationUnitsPerSecond(string key, string data)
        {
            AssetLocationUnitsPerSecondTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AssetLocationUnitsPerSecond
        ///  Stores the units per second for local execution for a AssetLocation.
        ///  This is used to know how to charge for XCM execution in a particular asset.
        /// 
        ///  Not all asset types are supported for payment. If value exists here, it means it is supported.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetAssetLocationUnitsPerSecond(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AssetLocationUnitsPerSecondTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
