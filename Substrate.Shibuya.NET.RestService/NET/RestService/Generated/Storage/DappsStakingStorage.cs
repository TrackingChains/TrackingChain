//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Shibuya.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IDappsStakingStorage interface definition.
    /// </summary>
    public interface IDappsStakingStorage : IStorage
    {
        
        /// <summary>
        /// >> PalletDisabled
        ///  Denotes whether pallet is disabled (in maintenance mode) or not
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.Bool GetPalletDisabled();
        
        /// <summary>
        /// >> Ledger
        ///  General information about the staker (non-smart-contract specific).
        /// </summary>
        Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.AccountLedger GetLedger(string key);
        
        /// <summary>
        /// >> CurrentEra
        ///  The current era index.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetCurrentEra();
        
        /// <summary>
        /// >> BlockRewardAccumulator
        ///  Accumulator for block rewards during an era. It is reset at every new era
        /// </summary>
        Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.RewardInfo GetBlockRewardAccumulator();
        
        /// <summary>
        /// >> ForceEra
        ///  Mode of era forcing.
        /// </summary>
        Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumForcing GetForceEra();
        
        /// <summary>
        /// >> NextEraStartingBlock
        ///  Stores the block number of when the next era starts
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetNextEraStartingBlock();
        
        /// <summary>
        /// >> RegisteredDevelopers
        ///  Simple map where developer account points to their smart contract
        /// </summary>
        Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract GetRegisteredDevelopers(string key);
        
        /// <summary>
        /// >> RegisteredDapps
        ///  Simple map where smart contract points to basic info about it (e.g. developer address, state)
        /// </summary>
        Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.DAppInfo GetRegisteredDapps(string key);
        
        /// <summary>
        /// >> GeneralEraInfo
        ///  General information about an era like TVL, total staked value, rewards.
        /// </summary>
        Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraInfo GetGeneralEraInfo(string key);
        
        /// <summary>
        /// >> ContractEraStake
        ///  Staking information about contract in a particular era.
        /// </summary>
        Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.ContractStakeInfo GetContractEraStake(string key);
        
        /// <summary>
        /// >> GeneralStakerInfo
        ///  Info about stakers stakes on particular contracts.
        /// </summary>
        Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.StakerInfo GetGeneralStakerInfo(string key);
        
        /// <summary>
        /// >> StorageVersion
        ///  Stores the current pallet storage version.
        /// </summary>
        Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumVersion GetStorageVersion();
    }
    
    /// <summary>
    /// DappsStakingStorage class definition.
    /// </summary>
    public sealed class DappsStakingStorage : IDappsStakingStorage
    {
        
        /// <summary>
        /// _palletDisabledTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool> _palletDisabledTypedStorage;
        
        /// <summary>
        /// _ledgerTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.AccountLedger> _ledgerTypedStorage;
        
        /// <summary>
        /// _currentEraTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _currentEraTypedStorage;
        
        /// <summary>
        /// _blockRewardAccumulatorTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.RewardInfo> _blockRewardAccumulatorTypedStorage;
        
        /// <summary>
        /// _forceEraTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumForcing> _forceEraTypedStorage;
        
        /// <summary>
        /// _nextEraStartingBlockTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _nextEraStartingBlockTypedStorage;
        
        /// <summary>
        /// _registeredDevelopersTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract> _registeredDevelopersTypedStorage;
        
        /// <summary>
        /// _registeredDappsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.DAppInfo> _registeredDappsTypedStorage;
        
        /// <summary>
        /// _generalEraInfoTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraInfo> _generalEraInfoTypedStorage;
        
        /// <summary>
        /// _contractEraStakeTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.ContractStakeInfo> _contractEraStakeTypedStorage;
        
        /// <summary>
        /// _generalStakerInfoTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.StakerInfo> _generalStakerInfoTypedStorage;
        
        /// <summary>
        /// _storageVersionTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumVersion> _storageVersionTypedStorage;
        
        /// <summary>
        /// DappsStakingStorage constructor.
        /// </summary>
        public DappsStakingStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.PalletDisabledTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool>("DappsStaking.PalletDisabled", storageDataProvider, storageChangeDelegates);
            this.LedgerTypedStorage = new TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.AccountLedger>("DappsStaking.Ledger", storageDataProvider, storageChangeDelegates);
            this.CurrentEraTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("DappsStaking.CurrentEra", storageDataProvider, storageChangeDelegates);
            this.BlockRewardAccumulatorTypedStorage = new TypedStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.RewardInfo>("DappsStaking.BlockRewardAccumulator", storageDataProvider, storageChangeDelegates);
            this.ForceEraTypedStorage = new TypedStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumForcing>("DappsStaking.ForceEra", storageDataProvider, storageChangeDelegates);
            this.NextEraStartingBlockTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("DappsStaking.NextEraStartingBlock", storageDataProvider, storageChangeDelegates);
            this.RegisteredDevelopersTypedStorage = new TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract>("DappsStaking.RegisteredDevelopers", storageDataProvider, storageChangeDelegates);
            this.RegisteredDappsTypedStorage = new TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.DAppInfo>("DappsStaking.RegisteredDapps", storageDataProvider, storageChangeDelegates);
            this.GeneralEraInfoTypedStorage = new TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraInfo>("DappsStaking.GeneralEraInfo", storageDataProvider, storageChangeDelegates);
            this.ContractEraStakeTypedStorage = new TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.ContractStakeInfo>("DappsStaking.ContractEraStake", storageDataProvider, storageChangeDelegates);
            this.GeneralStakerInfoTypedStorage = new TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.StakerInfo>("DappsStaking.GeneralStakerInfo", storageDataProvider, storageChangeDelegates);
            this.StorageVersionTypedStorage = new TypedStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumVersion>("DappsStaking.StorageVersion", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _palletDisabledTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool> PalletDisabledTypedStorage
        {
            get
            {
                return _palletDisabledTypedStorage;
            }
            set
            {
                _palletDisabledTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _ledgerTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.AccountLedger> LedgerTypedStorage
        {
            get
            {
                return _ledgerTypedStorage;
            }
            set
            {
                _ledgerTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _currentEraTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> CurrentEraTypedStorage
        {
            get
            {
                return _currentEraTypedStorage;
            }
            set
            {
                _currentEraTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _blockRewardAccumulatorTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.RewardInfo> BlockRewardAccumulatorTypedStorage
        {
            get
            {
                return _blockRewardAccumulatorTypedStorage;
            }
            set
            {
                _blockRewardAccumulatorTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _forceEraTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumForcing> ForceEraTypedStorage
        {
            get
            {
                return _forceEraTypedStorage;
            }
            set
            {
                _forceEraTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nextEraStartingBlockTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> NextEraStartingBlockTypedStorage
        {
            get
            {
                return _nextEraStartingBlockTypedStorage;
            }
            set
            {
                _nextEraStartingBlockTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _registeredDevelopersTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract> RegisteredDevelopersTypedStorage
        {
            get
            {
                return _registeredDevelopersTypedStorage;
            }
            set
            {
                _registeredDevelopersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _registeredDappsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.DAppInfo> RegisteredDappsTypedStorage
        {
            get
            {
                return _registeredDappsTypedStorage;
            }
            set
            {
                _registeredDappsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _generalEraInfoTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraInfo> GeneralEraInfoTypedStorage
        {
            get
            {
                return _generalEraInfoTypedStorage;
            }
            set
            {
                _generalEraInfoTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _contractEraStakeTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.ContractStakeInfo> ContractEraStakeTypedStorage
        {
            get
            {
                return _contractEraStakeTypedStorage;
            }
            set
            {
                _contractEraStakeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _generalStakerInfoTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.StakerInfo> GeneralStakerInfoTypedStorage
        {
            get
            {
                return _generalStakerInfoTypedStorage;
            }
            set
            {
                _generalStakerInfoTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _storageVersionTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumVersion> StorageVersionTypedStorage
        {
            get
            {
                return _storageVersionTypedStorage;
            }
            set
            {
                _storageVersionTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await PalletDisabledTypedStorage.InitializeAsync("DappsStaking", "PalletDisabled");
            await LedgerTypedStorage.InitializeAsync("DappsStaking", "Ledger");
            await CurrentEraTypedStorage.InitializeAsync("DappsStaking", "CurrentEra");
            await BlockRewardAccumulatorTypedStorage.InitializeAsync("DappsStaking", "BlockRewardAccumulator");
            await ForceEraTypedStorage.InitializeAsync("DappsStaking", "ForceEra");
            await NextEraStartingBlockTypedStorage.InitializeAsync("DappsStaking", "NextEraStartingBlock");
            await RegisteredDevelopersTypedStorage.InitializeAsync("DappsStaking", "RegisteredDevelopers");
            await RegisteredDappsTypedStorage.InitializeAsync("DappsStaking", "RegisteredDapps");
            await GeneralEraInfoTypedStorage.InitializeAsync("DappsStaking", "GeneralEraInfo");
            await ContractEraStakeTypedStorage.InitializeAsync("DappsStaking", "ContractEraStake");
            await GeneralStakerInfoTypedStorage.InitializeAsync("DappsStaking", "GeneralStakerInfo");
            await StorageVersionTypedStorage.InitializeAsync("DappsStaking", "StorageVersion");
        }
        
        /// <summary>
        /// Implements any storage change for DappsStaking.PalletDisabled
        /// </summary>
        [StorageChange("DappsStaking", "PalletDisabled")]
        public void OnUpdatePalletDisabled(string data)
        {
            PalletDisabledTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> PalletDisabled
        ///  Denotes whether pallet is disabled (in maintenance mode) or not
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool GetPalletDisabled()
        {
            return PalletDisabledTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for DappsStaking.Ledger
        /// </summary>
        [StorageChange("DappsStaking", "Ledger")]
        public void OnUpdateLedger(string key, string data)
        {
            LedgerTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Ledger
        ///  General information about the staker (non-smart-contract specific).
        /// </summary>
        public Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.AccountLedger GetLedger(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (LedgerTypedStorage.Dictionary.TryGetValue(key, out Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.AccountLedger result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for DappsStaking.CurrentEra
        /// </summary>
        [StorageChange("DappsStaking", "CurrentEra")]
        public void OnUpdateCurrentEra(string data)
        {
            CurrentEraTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CurrentEra
        ///  The current era index.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetCurrentEra()
        {
            return CurrentEraTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for DappsStaking.BlockRewardAccumulator
        /// </summary>
        [StorageChange("DappsStaking", "BlockRewardAccumulator")]
        public void OnUpdateBlockRewardAccumulator(string data)
        {
            BlockRewardAccumulatorTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> BlockRewardAccumulator
        ///  Accumulator for block rewards during an era. It is reset at every new era
        /// </summary>
        public Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.RewardInfo GetBlockRewardAccumulator()
        {
            return BlockRewardAccumulatorTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for DappsStaking.ForceEra
        /// </summary>
        [StorageChange("DappsStaking", "ForceEra")]
        public void OnUpdateForceEra(string data)
        {
            ForceEraTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ForceEra
        ///  Mode of era forcing.
        /// </summary>
        public Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumForcing GetForceEra()
        {
            return ForceEraTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for DappsStaking.NextEraStartingBlock
        /// </summary>
        [StorageChange("DappsStaking", "NextEraStartingBlock")]
        public void OnUpdateNextEraStartingBlock(string data)
        {
            NextEraStartingBlockTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextEraStartingBlock
        ///  Stores the block number of when the next era starts
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetNextEraStartingBlock()
        {
            return NextEraStartingBlockTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for DappsStaking.RegisteredDevelopers
        /// </summary>
        [StorageChange("DappsStaking", "RegisteredDevelopers")]
        public void OnUpdateRegisteredDevelopers(string key, string data)
        {
            RegisteredDevelopersTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> RegisteredDevelopers
        ///  Simple map where developer account points to their smart contract
        /// </summary>
        public Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract GetRegisteredDevelopers(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (RegisteredDevelopersTypedStorage.Dictionary.TryGetValue(key, out Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for DappsStaking.RegisteredDapps
        /// </summary>
        [StorageChange("DappsStaking", "RegisteredDapps")]
        public void OnUpdateRegisteredDapps(string key, string data)
        {
            RegisteredDappsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> RegisteredDapps
        ///  Simple map where smart contract points to basic info about it (e.g. developer address, state)
        /// </summary>
        public Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.DAppInfo GetRegisteredDapps(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (RegisteredDappsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.DAppInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for DappsStaking.GeneralEraInfo
        /// </summary>
        [StorageChange("DappsStaking", "GeneralEraInfo")]
        public void OnUpdateGeneralEraInfo(string key, string data)
        {
            GeneralEraInfoTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> GeneralEraInfo
        ///  General information about an era like TVL, total staked value, rewards.
        /// </summary>
        public Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraInfo GetGeneralEraInfo(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (GeneralEraInfoTypedStorage.Dictionary.TryGetValue(key, out Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for DappsStaking.ContractEraStake
        /// </summary>
        [StorageChange("DappsStaking", "ContractEraStake")]
        public void OnUpdateContractEraStake(string key, string data)
        {
            ContractEraStakeTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ContractEraStake
        ///  Staking information about contract in a particular era.
        /// </summary>
        public Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.ContractStakeInfo GetContractEraStake(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ContractEraStakeTypedStorage.Dictionary.TryGetValue(key, out Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.ContractStakeInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for DappsStaking.GeneralStakerInfo
        /// </summary>
        [StorageChange("DappsStaking", "GeneralStakerInfo")]
        public void OnUpdateGeneralStakerInfo(string key, string data)
        {
            GeneralStakerInfoTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> GeneralStakerInfo
        ///  Info about stakers stakes on particular contracts.
        /// </summary>
        public Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.StakerInfo GetGeneralStakerInfo(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (GeneralStakerInfoTypedStorage.Dictionary.TryGetValue(key, out Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.StakerInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for DappsStaking.StorageVersion
        /// </summary>
        [StorageChange("DappsStaking", "StorageVersion")]
        public void OnUpdateStorageVersion(string data)
        {
            StorageVersionTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> StorageVersion
        ///  Stores the current pallet storage version.
        /// </summary>
        public Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumVersion GetStorageVersion()
        {
            return StorageVersionTypedStorage.Get();
        }
    }
}
