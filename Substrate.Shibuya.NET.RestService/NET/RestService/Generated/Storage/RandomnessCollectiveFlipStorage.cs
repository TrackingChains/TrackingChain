//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Shibuya.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IRandomnessCollectiveFlipStorage interface definition.
    /// </summary>
    public interface IRandomnessCollectiveFlipStorage : IStorage
    {
        
        /// <summary>
        /// >> RandomMaterial
        ///  Series of block headers from the last 81 blocks that acts as random seed material. This
        ///  is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of
        ///  the oldest hash.
        /// </summary>
        Substrate.Shibuya.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11 GetRandomMaterial();
    }
    
    /// <summary>
    /// RandomnessCollectiveFlipStorage class definition.
    /// </summary>
    public sealed class RandomnessCollectiveFlipStorage : IRandomnessCollectiveFlipStorage
    {
        
        /// <summary>
        /// _randomMaterialTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11> _randomMaterialTypedStorage;
        
        /// <summary>
        /// RandomnessCollectiveFlipStorage constructor.
        /// </summary>
        public RandomnessCollectiveFlipStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.RandomMaterialTypedStorage = new TypedStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11>("RandomnessCollectiveFlip.RandomMaterial", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _randomMaterialTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Shibuya.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11> RandomMaterialTypedStorage
        {
            get
            {
                return _randomMaterialTypedStorage;
            }
            set
            {
                _randomMaterialTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await RandomMaterialTypedStorage.InitializeAsync("RandomnessCollectiveFlip", "RandomMaterial");
        }
        
        /// <summary>
        /// Implements any storage change for RandomnessCollectiveFlip.RandomMaterial
        /// </summary>
        [StorageChange("RandomnessCollectiveFlip", "RandomMaterial")]
        public void OnUpdateRandomMaterial(string data)
        {
            RandomMaterialTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> RandomMaterial
        ///  Series of block headers from the last 81 blocks that acts as random seed material. This
        ///  is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of
        ///  the oldest hash.
        /// </summary>
        public Substrate.Shibuya.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11 GetRandomMaterial()
        {
            return RandomMaterialTypedStorage.Get();
        }
    }
}
