//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.Shibuya.NET.RestService.Generated.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Shibuya.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// DappsStakingController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class DappsStakingController : ControllerBase
    {
        
        private IDappsStakingStorage _dappsStakingStorage;
        
        /// <summary>
        /// DappsStakingController constructor.
        /// </summary>
        public DappsStakingController(IDappsStakingStorage dappsStakingStorage)
        {
            _dappsStakingStorage = dappsStakingStorage;
        }
        
        /// <summary>
        /// >> PalletDisabled
        ///  Denotes whether pallet is disabled (in maintenance mode) or not
        /// </summary>
        [HttpGet("PalletDisabled")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.Bool), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage), "PalletDisabledParams")]
        public IActionResult GetPalletDisabled()
        {
            return this.Ok(_dappsStakingStorage.GetPalletDisabled());
        }
        
        /// <summary>
        /// >> Ledger
        ///  General information about the staker (non-smart-contract specific).
        /// </summary>
        [HttpGet("Ledger")]
        [ProducesResponseType(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.AccountLedger), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage), "LedgerParams", typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetLedger(string key)
        {
            return this.Ok(_dappsStakingStorage.GetLedger(key));
        }
        
        /// <summary>
        /// >> CurrentEra
        ///  The current era index.
        /// </summary>
        [HttpGet("CurrentEra")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage), "CurrentEraParams")]
        public IActionResult GetCurrentEra()
        {
            return this.Ok(_dappsStakingStorage.GetCurrentEra());
        }
        
        /// <summary>
        /// >> BlockRewardAccumulator
        ///  Accumulator for block rewards during an era. It is reset at every new era
        /// </summary>
        [HttpGet("BlockRewardAccumulator")]
        [ProducesResponseType(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.RewardInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage), "BlockRewardAccumulatorParams")]
        public IActionResult GetBlockRewardAccumulator()
        {
            return this.Ok(_dappsStakingStorage.GetBlockRewardAccumulator());
        }
        
        /// <summary>
        /// >> ForceEra
        ///  Mode of era forcing.
        /// </summary>
        [HttpGet("ForceEra")]
        [ProducesResponseType(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumForcing), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage), "ForceEraParams")]
        public IActionResult GetForceEra()
        {
            return this.Ok(_dappsStakingStorage.GetForceEra());
        }
        
        /// <summary>
        /// >> NextEraStartingBlock
        ///  Stores the block number of when the next era starts
        /// </summary>
        [HttpGet("NextEraStartingBlock")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage), "NextEraStartingBlockParams")]
        public IActionResult GetNextEraStartingBlock()
        {
            return this.Ok(_dappsStakingStorage.GetNextEraStartingBlock());
        }
        
        /// <summary>
        /// >> RegisteredDevelopers
        ///  Simple map where developer account points to their smart contract
        /// </summary>
        [HttpGet("RegisteredDevelopers")]
        [ProducesResponseType(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage), "RegisteredDevelopersParams", typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetRegisteredDevelopers(string key)
        {
            return this.Ok(_dappsStakingStorage.GetRegisteredDevelopers(key));
        }
        
        /// <summary>
        /// >> RegisteredDapps
        ///  Simple map where smart contract points to basic info about it (e.g. developer address, state)
        /// </summary>
        [HttpGet("RegisteredDapps")]
        [ProducesResponseType(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.DAppInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage), "RegisteredDappsParams", typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract))]
        public IActionResult GetRegisteredDapps(string key)
        {
            return this.Ok(_dappsStakingStorage.GetRegisteredDapps(key));
        }
        
        /// <summary>
        /// >> GeneralEraInfo
        ///  General information about an era like TVL, total staked value, rewards.
        /// </summary>
        [HttpGet("GeneralEraInfo")]
        [ProducesResponseType(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage), "GeneralEraInfoParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetGeneralEraInfo(string key)
        {
            return this.Ok(_dappsStakingStorage.GetGeneralEraInfo(key));
        }
        
        /// <summary>
        /// >> ContractEraStake
        ///  Staking information about contract in a particular era.
        /// </summary>
        [HttpGet("ContractEraStake")]
        [ProducesResponseType(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.ContractStakeInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage), "ContractEraStakeParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract, Substrate.NetApi.Model.Types.Primitive.U32>))]
        public IActionResult GetContractEraStake(string key)
        {
            return this.Ok(_dappsStakingStorage.GetContractEraStake(key));
        }
        
        /// <summary>
        /// >> GeneralStakerInfo
        ///  Info about stakers stakes on particular contracts.
        /// </summary>
        [HttpGet("GeneralStakerInfo")]
        [ProducesResponseType(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.StakerInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage), "GeneralStakerInfoParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract>))]
        public IActionResult GetGeneralStakerInfo(string key)
        {
            return this.Ok(_dappsStakingStorage.GetGeneralStakerInfo(key));
        }
        
        /// <summary>
        /// >> StorageVersion
        ///  Stores the current pallet storage version.
        /// </summary>
        [HttpGet("StorageVersion")]
        [ProducesResponseType(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumVersion), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage), "StorageVersionParams")]
        public IActionResult GetStorageVersion()
        {
            return this.Ok(_dappsStakingStorage.GetStorageVersion());
        }
    }
}
