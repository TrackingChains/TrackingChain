//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.Shibuya.NET.RestService.Generated.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Shibuya.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// XcAssetConfigController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class XcAssetConfigController : ControllerBase
    {
        
        private IXcAssetConfigStorage _xcAssetConfigStorage;
        
        /// <summary>
        /// XcAssetConfigController constructor.
        /// </summary>
        public XcAssetConfigController(IXcAssetConfigStorage xcAssetConfigStorage)
        {
            _xcAssetConfigStorage = xcAssetConfigStorage;
        }
        
        /// <summary>
        /// >> AssetIdToLocation
        ///  Mapping from an asset id to asset type.
        ///  Can be used when receiving transaction specifying an asset directly,
        ///  like transferring an asset from this chain to another.
        /// </summary>
        [HttpGet("AssetIdToLocation")]
        [ProducesResponseType(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.XcAssetConfigStorage), "AssetIdToLocationParams", typeof(Substrate.NetApi.Model.Types.Primitive.U128))]
        public IActionResult GetAssetIdToLocation(string key)
        {
            return this.Ok(_xcAssetConfigStorage.GetAssetIdToLocation(key));
        }
        
        /// <summary>
        /// >> AssetLocationToId
        ///  Mapping from an asset type to an asset id.
        ///  Can be used when receiving a multilocation XCM message to retrieve
        ///  the corresponding asset in which tokens should me minted.
        /// </summary>
        [HttpGet("AssetLocationToId")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.XcAssetConfigStorage), "AssetLocationToIdParams", typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation))]
        public IActionResult GetAssetLocationToId(string key)
        {
            return this.Ok(_xcAssetConfigStorage.GetAssetLocationToId(key));
        }
        
        /// <summary>
        /// >> AssetLocationUnitsPerSecond
        ///  Stores the units per second for local execution for a AssetLocation.
        ///  This is used to know how to charge for XCM execution in a particular asset.
        /// 
        ///  Not all asset types are supported for payment. If value exists here, it means it is supported.
        /// </summary>
        [HttpGet("AssetLocationUnitsPerSecond")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.XcAssetConfigStorage), "AssetLocationUnitsPerSecondParams", typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation))]
        public IActionResult GetAssetLocationUnitsPerSecond(string key)
        {
            return this.Ok(_xcAssetConfigStorage.GetAssetLocationUnitsPerSecond(key));
        }
    }
}
