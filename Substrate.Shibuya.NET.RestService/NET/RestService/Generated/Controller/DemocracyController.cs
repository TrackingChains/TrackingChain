//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.Shibuya.NET.RestService.Generated.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Shibuya.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// DemocracyController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class DemocracyController : ControllerBase
    {
        
        private IDemocracyStorage _democracyStorage;
        
        /// <summary>
        /// DemocracyController constructor.
        /// </summary>
        public DemocracyController(IDemocracyStorage democracyStorage)
        {
            _democracyStorage = democracyStorage;
        }
        
        /// <summary>
        /// >> PublicPropCount
        ///  The number of (public) proposals that have been made so far.
        /// </summary>
        [HttpGet("PublicPropCount")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DemocracyStorage), "PublicPropCountParams")]
        public IActionResult GetPublicPropCount()
        {
            return this.Ok(_democracyStorage.GetPublicPropCount());
        }
        
        /// <summary>
        /// >> PublicProps
        ///  The public proposals. Unsorted. The second item is the proposal.
        /// </summary>
        [HttpGet("PublicProps")]
        [ProducesResponseType(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT23), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DemocracyStorage), "PublicPropsParams")]
        public IActionResult GetPublicProps()
        {
            return this.Ok(_democracyStorage.GetPublicProps());
        }
        
        /// <summary>
        /// >> DepositOf
        ///  Those who have locked a deposit.
        /// 
        ///  TWOX-NOTE: Safe, as increasing integer keys are safe.
        /// </summary>
        [HttpGet("DepositOf")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Shibuya.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10, Substrate.NetApi.Model.Types.Primitive.U128>), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DemocracyStorage), "DepositOfParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetDepositOf(string key)
        {
            return this.Ok(_democracyStorage.GetDepositOf(key));
        }
        
        /// <summary>
        /// >> ReferendumCount
        ///  The next free referendum index, aka the number of referenda started so far.
        /// </summary>
        [HttpGet("ReferendumCount")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DemocracyStorage), "ReferendumCountParams")]
        public IActionResult GetReferendumCount()
        {
            return this.Ok(_democracyStorage.GetReferendumCount());
        }
        
        /// <summary>
        /// >> LowestUnbaked
        ///  The lowest referendum index representing an unbaked referendum. Equal to
        ///  `ReferendumCount` if there isn't a unbaked referendum.
        /// </summary>
        [HttpGet("LowestUnbaked")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DemocracyStorage), "LowestUnbakedParams")]
        public IActionResult GetLowestUnbaked()
        {
            return this.Ok(_democracyStorage.GetLowestUnbaked());
        }
        
        /// <summary>
        /// >> ReferendumInfoOf
        ///  Information concerning any given referendum.
        /// 
        ///  TWOX-NOTE: SAFE as indexes are not under an attacker���s control.
        /// </summary>
        [HttpGet("ReferendumInfoOf")]
        [ProducesResponseType(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_democracy.types.EnumReferendumInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DemocracyStorage), "ReferendumInfoOfParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetReferendumInfoOf(string key)
        {
            return this.Ok(_democracyStorage.GetReferendumInfoOf(key));
        }
        
        /// <summary>
        /// >> VotingOf
        ///  All votes for a particular voter. We store the balance for the number of votes that we
        ///  have recorded. The second item is the total amount of delegations, that will be added.
        /// 
        ///  TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway.
        /// </summary>
        [HttpGet("VotingOf")]
        [ProducesResponseType(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_democracy.vote.EnumVoting), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DemocracyStorage), "VotingOfParams", typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetVotingOf(string key)
        {
            return this.Ok(_democracyStorage.GetVotingOf(key));
        }
        
        /// <summary>
        /// >> LastTabledWasExternal
        ///  True if the last referendum tabled was submitted externally. False if it was a public
        ///  proposal.
        /// </summary>
        [HttpGet("LastTabledWasExternal")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.Bool), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DemocracyStorage), "LastTabledWasExternalParams")]
        public IActionResult GetLastTabledWasExternal()
        {
            return this.Ok(_democracyStorage.GetLastTabledWasExternal());
        }
        
        /// <summary>
        /// >> NextExternal
        ///  The referendum to be tabled whenever it would be valid to table an external proposal.
        ///  This happens when a referendum needs to be tabled and one of two conditions are met:
        ///  - `LastTabledWasExternal` is `false`; or
        ///  - `PublicProps` is empty.
        /// </summary>
        [HttpGet("NextExternal")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Shibuya.NET.NetApiExt.Generated.Model.frame_support.traits.preimages.EnumBounded, Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_democracy.vote_threshold.EnumVoteThreshold>), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DemocracyStorage), "NextExternalParams")]
        public IActionResult GetNextExternal()
        {
            return this.Ok(_democracyStorage.GetNextExternal());
        }
        
        /// <summary>
        /// >> Blacklist
        ///  A record of who vetoed what. Maps proposal hash to a possible existent block number
        ///  (until when it may not be resubmitted) and who vetoed it.
        /// </summary>
        [HttpGet("Blacklist")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Shibuya.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10>), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DemocracyStorage), "BlacklistParams", typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.primitive_types.H256))]
        public IActionResult GetBlacklist(string key)
        {
            return this.Ok(_democracyStorage.GetBlacklist(key));
        }
        
        /// <summary>
        /// >> Cancellations
        ///  Record of all proposals that have been subject to emergency cancellation.
        /// </summary>
        [HttpGet("Cancellations")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.Bool), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DemocracyStorage), "CancellationsParams", typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.primitive_types.H256))]
        public IActionResult GetCancellations(string key)
        {
            return this.Ok(_democracyStorage.GetCancellations(key));
        }
        
        /// <summary>
        /// >> MetadataOf
        ///  General information concerning any proposal or referendum.
        ///  The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON
        ///  dump or IPFS hash of a JSON file.
        /// 
        ///  Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)
        ///  large preimages.
        /// </summary>
        [HttpGet("MetadataOf")]
        [ProducesResponseType(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.primitive_types.H256), 200)]
        [StorageKeyBuilder(typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DemocracyStorage), "MetadataOfParams", typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_democracy.types.EnumMetadataOwner))]
        public IActionResult GetMetadataOf(string key)
        {
            return this.Ok(_democracyStorage.GetMetadataOf(key));
        }
    }
}
