{
  "Origin": "",
  "Magic": "0x6D657461",
  "Version": 14,
  "NodeMetadata": {
    "Types": {
      "0": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "AccountId32"
        ],
        "TypeDef": "Composite"
      },
      "1": {
        "Length": 32,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "2": {
        "Primitive": "U8",
        "TypeDef": "Primitive"
      },
      "3": {
        "TypeFields": [
          {
            "Name": "nonce",
            "TypeName": "Index",
            "TypeId": 4
          },
          {
            "Name": "consumers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "providers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "sufficients",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "AccountData",
            "TypeId": 5
          }
        ],
        "Path": [
          "frame_system",
          "AccountInfo"
        ],
        "TypeParams": [
          {
            "Name": "Index",
            "TypeId": 4
          },
          {
            "Name": "AccountData",
            "TypeId": 5
          }
        ],
        "TypeDef": "Composite"
      },
      "4": {
        "Primitive": "U32",
        "TypeDef": "Primitive"
      },
      "5": {
        "TypeFields": [
          {
            "Name": "free",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reserved",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "misc_frozen",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "fee_frozen",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "AccountData"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "6": {
        "Primitive": "U128",
        "TypeDef": "Primitive"
      },
      "7": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 8
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 8
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 8
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 8
          }
        ],
        "TypeDef": "Composite"
      },
      "8": {
        "TypeFields": [
          {
            "Name": "ref_time",
            "TypeName": "u64",
            "TypeId": 9
          },
          {
            "Name": "proof_size",
            "TypeName": "u64",
            "TypeId": 9
          }
        ],
        "Path": [
          "sp_weights",
          "weight_v2",
          "Weight"
        ],
        "TypeDef": "Composite"
      },
      "9": {
        "TypeId": 10,
        "TypeDef": "Compact"
      },
      "10": {
        "Primitive": "U64",
        "TypeDef": "Primitive"
      },
      "11": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "primitive_types",
          "H256"
        ],
        "TypeDef": "Composite"
      },
      "12": {
        "TypeId": 2,
        "TypeDef": "Sequence"
      },
      "13": {
        "TypeFields": [
          {
            "Name": "logs",
            "TypeName": "Vec<DigestItem>",
            "TypeId": 14
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "Digest"
        ],
        "TypeDef": "Composite"
      },
      "14": {
        "TypeId": 15,
        "TypeDef": "Sequence"
      },
      "15": {
        "Variants": [
          {
            "Name": "PreRuntime",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 16
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 6
          },
          {
            "Name": "Consensus",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 16
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 4
          },
          {
            "Name": "Seal",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 16
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 5
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0
          },
          {
            "Name": "RuntimeEnvironmentUpdated",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "DigestItem"
        ],
        "TypeDef": "Variant"
      },
      "16": {
        "Length": 4,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "17": {
        "TypeId": 18,
        "TypeDef": "Sequence"
      },
      "18": {
        "TypeFields": [
          {
            "Name": "phase",
            "TypeName": "Phase",
            "TypeId": 156
          },
          {
            "Name": "event",
            "TypeName": "E",
            "TypeId": 19
          },
          {
            "Name": "topics",
            "TypeName": "Vec<T>",
            "TypeId": 124
          }
        ],
        "Path": [
          "frame_system",
          "EventRecord"
        ],
        "TypeParams": [
          {
            "Name": "E",
            "TypeId": 19
          },
          {
            "Name": "T",
            "TypeId": 11
          }
        ],
        "TypeDef": "Composite"
      },
      "19": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "frame_system::Event<Runtime>",
                "TypeId": 20
              }
            ],
            "Index": 10
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "pallet_utility::Event",
                "TypeId": 29
              }
            ],
            "Index": 11
          },
          {
            "Name": "Identity",
            "TypeFields": [
              {
                "TypeName": "pallet_identity::Event<Runtime>",
                "TypeId": 32
              }
            ],
            "Index": 12
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "pallet_multisig::Event<Runtime>",
                "TypeId": 33
              }
            ],
            "Index": 14
          },
          {
            "Name": "EthCall",
            "TypeFields": [
              {
                "TypeName": "pallet_custom_signatures::Event<Runtime>",
                "TypeId": 35
              }
            ],
            "Index": 15
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "pallet_scheduler::Event<Runtime>",
                "TypeId": 36
              }
            ],
            "Index": 17
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "pallet_proxy::Event<Runtime>",
                "TypeId": 39
              }
            ],
            "Index": 18
          },
          {
            "Name": "ParachainSystem",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_parachain_system::Event<Runtime>",
                "TypeId": 42
              }
            ],
            "Index": 20
          },
          {
            "Name": "TransactionPayment",
            "TypeFields": [
              {
                "TypeName": "pallet_transaction_payment::Event<Runtime>",
                "TypeId": 43
              }
            ],
            "Index": 30
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "pallet_balances::Event<Runtime>",
                "TypeId": 44
              }
            ],
            "Index": 31
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "pallet_vesting::Event<Runtime>",
                "TypeId": 46
              }
            ],
            "Index": 32
          },
          {
            "Name": "DappsStaking",
            "TypeFields": [
              {
                "TypeName": "pallet_dapps_staking::Event<Runtime>",
                "TypeId": 47
              }
            ],
            "Index": 34
          },
          {
            "Name": "BlockReward",
            "TypeFields": [
              {
                "TypeName": "pallet_block_reward::Event<Runtime>",
                "TypeId": 53
              }
            ],
            "Index": 35
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "pallet_assets::Event<Runtime>",
                "TypeId": 57
              }
            ],
            "Index": 36
          },
          {
            "Name": "CollatorSelection",
            "TypeFields": [
              {
                "TypeName": "pallet_collator_selection::Event<Runtime>",
                "TypeId": 58
              }
            ],
            "Index": 41
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "pallet_session::Event",
                "TypeId": 60
              }
            ],
            "Index": 42
          },
          {
            "Name": "XcmpQueue",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcmp_queue::Event<Runtime>",
                "TypeId": 61
              }
            ],
            "Index": 50
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm::Event<Runtime>",
                "TypeId": 64
              }
            ],
            "Index": 51
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcm::Event<Runtime>",
                "TypeId": 118
              }
            ],
            "Index": 52
          },
          {
            "Name": "DmpQueue",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_dmp_queue::Event<Runtime>",
                "TypeId": 119
              }
            ],
            "Index": 53
          },
          {
            "Name": "XcAssetConfig",
            "TypeFields": [
              {
                "TypeName": "pallet_xc_asset_config::Event<Runtime>",
                "TypeId": 120
              }
            ],
            "Index": 54
          },
          {
            "Name": "Xtokens",
            "TypeFields": [
              {
                "TypeName": "orml_xtokens::Event<Runtime>",
                "TypeId": 121
              }
            ],
            "Index": 55
          },
          {
            "Name": "EVM",
            "TypeFields": [
              {
                "TypeName": "pallet_evm::Event<Runtime>",
                "TypeId": 122
              }
            ],
            "Index": 60
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "TypeName": "pallet_ethereum::Event",
                "TypeId": 125
              }
            ],
            "Index": 61
          },
          {
            "Name": "BaseFee",
            "TypeFields": [
              {
                "TypeName": "pallet_base_fee::Event",
                "TypeId": 134
              }
            ],
            "Index": 62
          },
          {
            "Name": "Contracts",
            "TypeFields": [
              {
                "TypeName": "pallet_contracts::Event<Runtime>",
                "TypeId": 138
              }
            ],
            "Index": 70
          },
          {
            "Name": "Democracy",
            "TypeFields": [
              {
                "TypeName": "pallet_democracy::Event<Runtime>",
                "TypeId": 139
              }
            ],
            "Index": 80
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                "TypeId": 144
              }
            ],
            "Index": 81
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>",
                "TypeId": 145
              }
            ],
            "Index": 82
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "pallet_treasury::Event<Runtime>",
                "TypeId": 146
              }
            ],
            "Index": 83
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "pallet_preimage::Event<Runtime>",
                "TypeId": 147
              }
            ],
            "Index": 84
          },
          {
            "Name": "Xvm",
            "TypeFields": [
              {
                "TypeName": "pallet_xvm::Event<Runtime>",
                "TypeId": 148
              }
            ],
            "Index": 90
          },
          {
            "Name": "Sudo",
            "TypeFields": [
              {
                "TypeName": "pallet_sudo::Event<Runtime>",
                "TypeId": 151
              }
            ],
            "Index": 99
          },
          {
            "Name": "StateTrieMigration",
            "TypeFields": [
              {
                "TypeName": "pallet_state_trie_migration::Event<Runtime>",
                "TypeId": 153
              }
            ],
            "Index": 200
          }
        ],
        "Path": [
          "shibuya_runtime",
          "RuntimeEvent"
        ],
        "TypeDef": "Variant"
      },
      "20": {
        "Variants": [
          {
            "Name": "ExtrinsicSuccess",
            "TypeFields": [
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 21
              }
            ],
            "Index": 0,
            "Docs": [
              "An extrinsic completed successfully."
            ]
          },
          {
            "Name": "ExtrinsicFailed",
            "TypeFields": [
              {
                "Name": "dispatch_error",
                "TypeName": "DispatchError",
                "TypeId": 24
              },
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 21
              }
            ],
            "Index": 1,
            "Docs": [
              "An extrinsic failed."
            ]
          },
          {
            "Name": "CodeUpdated",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "`:code` was updated."
            ]
          },
          {
            "Name": "NewAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "A new account was created."
            ]
          },
          {
            "Name": "KilledAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "An account was reaped."
            ]
          },
          {
            "Name": "Remarked",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "On on-chain remark happened."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Event for the System pallet."
        ]
      },
      "21": {
        "TypeFields": [
          {
            "Name": "weight",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "class",
            "TypeName": "DispatchClass",
            "TypeId": 22
          },
          {
            "Name": "pays_fee",
            "TypeName": "Pays",
            "TypeId": 23
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchInfo"
        ],
        "TypeDef": "Composite"
      },
      "22": {
        "Variants": [
          {
            "Name": "Normal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Operational",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Mandatory",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchClass"
        ],
        "TypeDef": "Variant"
      },
      "23": {
        "Variants": [
          {
            "Name": "Yes",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "No",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "Pays"
        ],
        "TypeDef": "Variant"
      },
      "24": {
        "Variants": [
          {
            "Name": "Other",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CannotLookup",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Module",
            "TypeFields": [
              {
                "TypeName": "ModuleError",
                "TypeId": 25
              }
            ],
            "Index": 3
          },
          {
            "Name": "ConsumerRemaining",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "NoProviders",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "TooManyConsumers",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Token",
            "TypeFields": [
              {
                "TypeName": "TokenError",
                "TypeId": 26
              }
            ],
            "Index": 7
          },
          {
            "Name": "Arithmetic",
            "TypeFields": [
              {
                "TypeName": "ArithmeticError",
                "TypeId": 27
              }
            ],
            "Index": 8
          },
          {
            "Name": "Transactional",
            "TypeFields": [
              {
                "TypeName": "TransactionalError",
                "TypeId": 28
              }
            ],
            "Index": 9
          },
          {
            "Name": "Exhausted",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "Corruption",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "Unavailable",
            "TypeFields": null,
            "Index": 12
          }
        ],
        "Path": [
          "sp_runtime",
          "DispatchError"
        ],
        "TypeDef": "Variant"
      },
      "25": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "error",
            "TypeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
            "TypeId": 16
          }
        ],
        "Path": [
          "sp_runtime",
          "ModuleError"
        ],
        "TypeDef": "Composite"
      },
      "26": {
        "Variants": [
          {
            "Name": "NoFunds",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "WouldDie",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BelowMinimum",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CannotCreate",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "UnknownAsset",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "sp_runtime",
          "TokenError"
        ],
        "TypeDef": "Variant"
      },
      "27": {
        "Variants": [
          {
            "Name": "Underflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DivisionByZero",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "ArithmeticError"
        ],
        "TypeDef": "Variant"
      },
      "28": {
        "Variants": [
          {
            "Name": "LimitReached",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NoLayer",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "sp_runtime",
          "TransactionalError"
        ],
        "TypeDef": "Variant"
      },
      "29": {
        "Variants": [
          {
            "Name": "BatchInterrupted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 24
              }
            ],
            "Index": 0,
            "Docs": [
              "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
              "well as the error."
            ]
          },
          {
            "Name": "BatchCompleted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Batch of dispatches completed fully with no error."
            ]
          },
          {
            "Name": "BatchCompletedWithErrors",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Batch of dispatches completed but has errors."
            ]
          },
          {
            "Name": "ItemCompleted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A single item within a Batch of dispatches has completed with no error."
            ]
          },
          {
            "Name": "ItemFailed",
            "TypeFields": [
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 24
              }
            ],
            "Index": 4,
            "Docs": [
              "A single item within a Batch of dispatches has completed with error."
            ]
          },
          {
            "Name": "DispatchedAs",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 30
              }
            ],
            "Index": 5,
            "Docs": [
              "A call was dispatched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "30": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": [
              {
                "TypeId": 31
              }
            ],
            "Index": 0
          },
          {
            "Name": "Err",
            "TypeFields": [
              {
                "TypeId": 24
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Result"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 31
          },
          {
            "Name": "E",
            "TypeId": 24
          }
        ],
        "TypeDef": "Variant"
      },
      "31": {
        "TypeIds": [],
        "TypeDef": "Tuple"
      },
      "32": {
        "Variants": [
          {
            "Name": "IdentitySet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "A name was set or reset (which will remove all judgements)."
            ]
          },
          {
            "Name": "IdentityCleared",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A name was cleared, and the given balance returned."
            ]
          },
          {
            "Name": "IdentityKilled",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "A name was removed and the given balance slashed."
            ]
          },
          {
            "Name": "JudgementRequested",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A judgement was asked from a registrar."
            ]
          },
          {
            "Name": "JudgementUnrequested",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A judgement request was retracted."
            ]
          },
          {
            "Name": "JudgementGiven",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "A judgement was given by a registrar."
            ]
          },
          {
            "Name": "RegistrarAdded",
            "TypeFields": [
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A registrar was added."
            ]
          },
          {
            "Name": "SubIdentityAdded",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "A sub-identity was added to an identity and the deposit paid."
            ]
          },
          {
            "Name": "SubIdentityRemoved",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "A sub-identity was removed from an identity and the deposit freed."
            ]
          },
          {
            "Name": "SubIdentityRevoked",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "A sub-identity was cleared, and the given deposit repatriated from the",
              "main identity account to the sub-identity account."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "33": {
        "Variants": [
          {
            "Name": "NewMultisig",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "A new multisig operation has begun."
            ]
          },
          {
            "Name": "MultisigApproval",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 34
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "A multisig operation has been approved by someone."
            ]
          },
          {
            "Name": "MultisigExecuted",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 34
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 30
              }
            ],
            "Index": 2,
            "Docs": [
              "A multisig operation has been executed."
            ]
          },
          {
            "Name": "MultisigCancelled",
            "TypeFields": [
              {
                "Name": "cancelling",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 34
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "A multisig operation has been cancelled."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "34": {
        "TypeFields": [
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_multisig",
          "Timepoint"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "35": {
        "Variants": [
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "DispatchResult",
                "TypeId": 30
              }
            ],
            "Index": 0,
            "Docs": [
              "A call just executed. \\[result\\]"
            ]
          }
        ],
        "Path": [
          "pallet_custom_signatures",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "36": {
        "Variants": [
          {
            "Name": "Scheduled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Scheduled some task."
            ]
          },
          {
            "Name": "Canceled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Canceled some task."
            ]
          },
          {
            "Name": "Dispatched",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<T::BlockNumber>",
                "TypeId": 37
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 38
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 30
              }
            ],
            "Index": 2,
            "Docs": [
              "Dispatched some task."
            ]
          },
          {
            "Name": "CallUnavailable",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<T::BlockNumber>",
                "TypeId": 37
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 38
              }
            ],
            "Index": 3,
            "Docs": [
              "The call for the provided hash was not found so the task has been aborted."
            ]
          },
          {
            "Name": "PeriodicFailed",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<T::BlockNumber>",
                "TypeId": 37
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 38
              }
            ],
            "Index": 4,
            "Docs": [
              "The given task was unable to be renewed since the agenda is full at that block."
            ]
          },
          {
            "Name": "PermanentlyOverweight",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<T::BlockNumber>",
                "TypeId": 37
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 38
              }
            ],
            "Index": 5,
            "Docs": [
              "The given task can never be executed since it is overweight."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Events type."
        ]
      },
      "37": {
        "TypeIds": [
          4,
          4
        ],
        "TypeDef": "Tuple"
      },
      "38": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1
          }
        ],
        "TypeDef": "Variant"
      },
      "39": {
        "Variants": [
          {
            "Name": "ProxyExecuted",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 30
              }
            ],
            "Index": 0,
            "Docs": [
              "A proxy was executed correctly, with the given."
            ]
          },
          {
            "Name": "PureCreated",
            "TypeFields": [
              {
                "Name": "pure",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 40
              },
              {
                "Name": "disambiguation_index",
                "TypeName": "u16",
                "TypeId": 41
              }
            ],
            "Index": 1,
            "Docs": [
              "A pure account has been created by new proxy with given",
              "disambiguation index and proxy type."
            ]
          },
          {
            "Name": "Announced",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "An announcement was placed to make a call in the future."
            ]
          },
          {
            "Name": "ProxyAdded",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 40
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A proxy was added."
            ]
          },
          {
            "Name": "ProxyRemoved",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 40
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A proxy was removed."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "40": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonTransfer",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Balances",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Assets",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Governance",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "IdentityJudgement",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "CancelProxy",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "DappsStaking",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "StakerRewardClaim",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "shibuya_runtime",
          "ProxyType"
        ],
        "TypeDef": "Variant"
      },
      "41": {
        "Primitive": "U16",
        "TypeDef": "Primitive"
      },
      "42": {
        "Variants": [
          {
            "Name": "ValidationFunctionStored",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The validation function has been scheduled to apply."
            ]
          },
          {
            "Name": "ValidationFunctionApplied",
            "TypeFields": [
              {
                "Name": "relay_chain_block_num",
                "TypeName": "RelayChainBlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "The validation function was applied as of the contained relay chain block number."
            ]
          },
          {
            "Name": "ValidationFunctionDiscarded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The relay-chain aborted the upgrade process."
            ]
          },
          {
            "Name": "UpgradeAuthorized",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 3,
            "Docs": [
              "An upgrade has been authorized."
            ]
          },
          {
            "Name": "DownwardMessagesReceived",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Some downward messages have been received and will be processed."
            ]
          },
          {
            "Name": "DownwardMessagesProcessed",
            "TypeFields": [
              {
                "Name": "weight_used",
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "Name": "dmq_head",
                "TypeName": "relay_chain::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Downward messages were processed using the given weight."
            ]
          },
          {
            "Name": "UpwardMessageSent",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 38
              }
            ],
            "Index": 6,
            "Docs": [
              "An upward message was sent to the relay chain."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "43": {
        "Variants": [
          {
            "Name": "TransactionFeePaid",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "actual_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "tip",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who`."
            ]
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "44": {
        "Variants": [
          {
            "Name": "Endowed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "An account was created with some free balance."
            ]
          },
          {
            "Name": "DustLost",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An account was removed whose balance was non-zero but below ExistentialDeposit,",
              "resulting in an outright loss."
            ]
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer succeeded."
            ]
          },
          {
            "Name": "BalanceSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "reserved",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A balance was set by root."
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some balance was reserved (moved from free to reserved)."
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ]
          },
          {
            "Name": "ReserveRepatriated",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "destination_status",
                "TypeName": "Status",
                "TypeId": 45
              }
            ],
            "Index": 6,
            "Docs": [
              "Some balance was moved from the reserve of the first account to the second account.",
              "Final argument indicates the destination balance type."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Some amount was deposited (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Withdraw",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some amount was withdrawn from the account (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some amount was removed from the account (e.g. for misbehavior)."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "45": {
        "Variants": [
          {
            "Name": "Free",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Reserved",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "misc",
          "BalanceStatus"
        ],
        "TypeDef": "Variant"
      },
      "46": {
        "Variants": [
          {
            "Name": "VestingUpdated",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "unvested",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "The amount vested has been updated. This could indicate a change in funds available.",
              "The balance given is the amount which is left unvested (and thus locked)."
            ]
          },
          {
            "Name": "VestingCompleted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "An \\[account\\] has become fully vested."
            ]
          }
        ],
        "Path": [
          "pallet_vesting",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "47": {
        "Variants": [
          {
            "Name": "BondAndStake",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::SmartContract",
                "TypeId": 48
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Account has bonded and staked funds on a smart contract."
            ]
          },
          {
            "Name": "UnbondAndUnstake",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::SmartContract",
                "TypeId": 48
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Account has unbonded & unstaked some funds. Unbonding process begins."
            ]
          },
          {
            "Name": "WithdrawFromUnregistered",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::SmartContract",
                "TypeId": 48
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Account has fully withdrawn all staked amount from an unregistered contract."
            ]
          },
          {
            "Name": "Withdrawn",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Account has withdrawn unbonded funds."
            ]
          },
          {
            "Name": "NewContract",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::SmartContract",
                "TypeId": 48
              }
            ],
            "Index": 4,
            "Docs": [
              "New contract added for staking."
            ]
          },
          {
            "Name": "ContractRemoved",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::SmartContract",
                "TypeId": 48
              }
            ],
            "Index": 5,
            "Docs": [
              "Contract removed from dapps staking."
            ]
          },
          {
            "Name": "NewDappStakingEra",
            "TypeFields": [
              {
                "TypeName": "EraIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "New dapps staking era. Distribute era rewards to contracts."
            ]
          },
          {
            "Name": "Reward",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::SmartContract",
                "TypeId": 48
              },
              {
                "TypeName": "EraIndex",
                "TypeId": 4
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Reward paid to staker or developer."
            ]
          },
          {
            "Name": "MaintenanceMode",
            "TypeFields": [
              {
                "TypeName": "bool",
                "TypeId": 51
              }
            ],
            "Index": 8,
            "Docs": [
              "Maintenance mode has been enabled or disabled"
            ]
          },
          {
            "Name": "RewardDestination",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "RewardDestination",
                "TypeId": 52
              }
            ],
            "Index": 9,
            "Docs": [
              "Reward handling modified"
            ]
          },
          {
            "Name": "NominationTransfer",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::SmartContract",
                "TypeId": 48
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "T::SmartContract",
                "TypeId": 48
              }
            ],
            "Index": 10,
            "Docs": [
              "Nomination part has been transfered from one contract to another.",
              "",
              "\\(staker account, origin smart contract, amount, target smart contract\\)"
            ]
          },
          {
            "Name": "StaleRewardBurned",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::SmartContract",
                "TypeId": 48
              },
              {
                "TypeName": "EraIndex",
                "TypeId": 4
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Stale, unclaimed reward from an unregistered contract has been burned.",
              "",
              "\\(developer account, smart contract, era, amount burned\\)"
            ]
          }
        ],
        "Path": [
          "pallet_dapps_staking",
          "pallet",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "48": {
        "Variants": [
          {
            "Name": "Evm",
            "TypeFields": [
              {
                "TypeName": "sp_core::H160",
                "TypeId": 49
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wasm",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "shibuya_runtime",
          "SmartContract"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "49": {
        "TypeFields": [
          {
            "TypeName": "[u8; 20]",
            "TypeId": 50
          }
        ],
        "Path": [
          "primitive_types",
          "H160"
        ],
        "TypeDef": "Composite"
      },
      "50": {
        "Length": 20,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "51": {
        "Primitive": "Bool",
        "TypeDef": "Primitive"
      },
      "52": {
        "Variants": [
          {
            "Name": "FreeBalance",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "StakeBalance",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_dapps_staking",
          "RewardDestination"
        ],
        "TypeDef": "Variant"
      },
      "53": {
        "Variants": [
          {
            "Name": "DistributionConfigurationChanged",
            "TypeFields": [
              {
                "TypeName": "RewardDistributionConfig",
                "TypeId": 54
              }
            ],
            "Index": 0,
            "Docs": [
              "Distribution configuration has been updated."
            ]
          }
        ],
        "Path": [
          "pallet_block_reward",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "54": {
        "TypeFields": [
          {
            "Name": "base_treasury_percent",
            "TypeName": "Perbill",
            "TypeId": 55
          },
          {
            "Name": "base_staker_percent",
            "TypeName": "Perbill",
            "TypeId": 55
          },
          {
            "Name": "dapps_percent",
            "TypeName": "Perbill",
            "TypeId": 55
          },
          {
            "Name": "collators_percent",
            "TypeName": "Perbill",
            "TypeId": 55
          },
          {
            "Name": "adjustable_percent",
            "TypeName": "Perbill",
            "TypeId": 55
          },
          {
            "Name": "ideal_dapps_staking_tvl",
            "TypeName": "Perbill",
            "TypeId": 55
          }
        ],
        "Path": [
          "pallet_block_reward",
          "RewardDistributionConfig"
        ],
        "TypeDef": "Composite"
      },
      "55": {
        "TypeId": 56,
        "TypeDef": "Compact"
      },
      "56": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Perbill"
        ],
        "TypeDef": "Composite"
      },
      "57": {
        "Variants": [
          {
            "Name": "Created",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              },
              {
                "Name": "creator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "Some asset class was created."
            ]
          },
          {
            "Name": "Issued",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Some assets were issued."
            ]
          },
          {
            "Name": "Transferred",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Some assets were transferred."
            ]
          },
          {
            "Name": "Burned",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Some assets were destroyed."
            ]
          },
          {
            "Name": "TeamChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              },
              {
                "Name": "issuer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "admin",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "freezer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "The management team changed."
            ]
          },
          {
            "Name": "OwnerChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "The owner changed."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 6,
            "Docs": [
              "Some account `who` was frozen."
            ]
          },
          {
            "Name": "Thawed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "Some account `who` was thawed."
            ]
          },
          {
            "Name": "AssetFrozen",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some asset `asset_id` was frozen."
            ]
          },
          {
            "Name": "AssetThawed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some asset `asset_id` was thawed."
            ]
          },
          {
            "Name": "AccountsDestroyed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              },
              {
                "Name": "accounts_destroyed",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "accounts_remaining",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "Accounts were destroyed for given asset."
            ]
          },
          {
            "Name": "ApprovalsDestroyed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              },
              {
                "Name": "approvals_destroyed",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "approvals_remaining",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 11,
            "Docs": [
              "Approvals were destroyed for given asset."
            ]
          },
          {
            "Name": "DestructionStarted",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              }
            ],
            "Index": 12,
            "Docs": [
              "An asset class is in the process of being destroyed."
            ]
          },
          {
            "Name": "Destroyed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "An asset class was destroyed."
            ]
          },
          {
            "Name": "ForceCreated",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "Some asset class was force-created."
            ]
          },
          {
            "Name": "MetadataSet",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "symbol",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "decimals",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 51
              }
            ],
            "Index": 15,
            "Docs": [
              "New metadata has been set for an asset."
            ]
          },
          {
            "Name": "MetadataCleared",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              }
            ],
            "Index": 16,
            "Docs": [
              "Metadata has been cleared for an asset."
            ]
          },
          {
            "Name": "ApprovedTransfer",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              },
              {
                "Name": "source",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "(Additional) funds have been approved for transfer to a destination account."
            ]
          },
          {
            "Name": "ApprovalCancelled",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 18,
            "Docs": [
              "An approval for account `delegate` was cancelled by `owner`."
            ]
          },
          {
            "Name": "TransferredApproved",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "destination",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "An `amount` was transferred in its entirety from `owner` to `destination` by",
              "the approved `delegate`."
            ]
          },
          {
            "Name": "AssetStatusChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              }
            ],
            "Index": 20,
            "Docs": [
              "An asset has had its attributes changed by the `Force` origin."
            ]
          }
        ],
        "Path": [
          "pallet_assets",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "58": {
        "Variants": [
          {
            "Name": "NewInvulnerables",
            "TypeFields": [
              {
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 59
              }
            ],
            "Index": 0
          },
          {
            "Name": "NewDesiredCandidates",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "NewCandidacyBond",
            "TypeFields": [
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2
          },
          {
            "Name": "CandidateAdded",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3
          },
          {
            "Name": "CandidateRemoved",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4
          },
          {
            "Name": "CandidateSlashed",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "pallet_collator_selection",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "59": {
        "TypeId": 0,
        "TypeDef": "Sequence"
      },
      "60": {
        "Variants": [
          {
            "Name": "NewSession",
            "TypeFields": [
              {
                "Name": "session_index",
                "TypeName": "SessionIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "New session has happened. Note that the argument is the session index, not the",
              "block number as the type might suggest."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "61": {
        "Variants": [
          {
            "Name": "Success",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 38
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 0,
            "Docs": [
              "Some XCM was executed ok."
            ]
          },
          {
            "Name": "Fail",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 38
              },
              {
                "Name": "error",
                "TypeName": "XcmError",
                "TypeId": 62
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 1,
            "Docs": [
              "Some XCM failed."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 38
              }
            ],
            "Index": 2,
            "Docs": [
              "Bad XCM version used."
            ]
          },
          {
            "Name": "BadFormat",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 38
              }
            ],
            "Index": 3,
            "Docs": [
              "Bad XCM format used."
            ]
          },
          {
            "Name": "XcmpMessageSent",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 38
              }
            ],
            "Index": 4,
            "Docs": [
              "An HRMP message was sent to a sibling parachain."
            ]
          },
          {
            "Name": "OverweightEnqueued",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "ParaId",
                "TypeId": 63
              },
              {
                "Name": "sent_at",
                "TypeName": "RelayBlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 10
              },
              {
                "Name": "required",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 5,
            "Docs": [
              "An XCM exceeded the individual message weight budget."
            ]
          },
          {
            "Name": "OverweightServiced",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 10
              },
              {
                "Name": "used",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 6,
            "Docs": [
              "An XCM from the overweight queue was executed with the given actual weight used."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "62": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unimplemented",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UntrustedReserveLocation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UntrustedTeleportLocation",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "LocationFull",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LocationNotInvertible",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLocation",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FailedToTransactAsset",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "NotWithdrawable",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "LocationCannotHold",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DestinationUnsupported",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Transport",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Unroutable",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "FailedToDecode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MaxWeightInvalid",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "NotHoldingFees",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "TooExpensive",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 21
          },
          {
            "Name": "ExpectationFalse",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "PalletNotFound",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "NameMismatch",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "VersionIncompatible",
            "TypeFields": null,
            "Index": 25
          },
          {
            "Name": "HoldingWouldOverflow",
            "TypeFields": null,
            "Index": 26
          },
          {
            "Name": "ExportError",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "ReanchorFailed",
            "TypeFields": null,
            "Index": 28
          },
          {
            "Name": "NoDeal",
            "TypeFields": null,
            "Index": 29
          },
          {
            "Name": "FeesNotMet",
            "TypeFields": null,
            "Index": 30
          },
          {
            "Name": "LockError",
            "TypeFields": null,
            "Index": 31
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "Unanchored",
            "TypeFields": null,
            "Index": 33
          },
          {
            "Name": "NotDepositable",
            "TypeFields": null,
            "Index": 34
          },
          {
            "Name": "UnhandledXcmVersion",
            "TypeFields": null,
            "Index": 35
          },
          {
            "Name": "WeightLimitReached",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 36
          },
          {
            "Name": "Barrier",
            "TypeFields": null,
            "Index": 37
          },
          {
            "Name": "WeightNotComputable",
            "TypeFields": null,
            "Index": 38
          },
          {
            "Name": "ExceedsStackLimit",
            "TypeFields": null,
            "Index": 39
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "traits",
          "Error"
        ],
        "TypeDef": "Variant"
      },
      "63": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "Id"
        ],
        "TypeDef": "Composite"
      },
      "64": {
        "Variants": [
          {
            "Name": "Attempted",
            "TypeFields": [
              {
                "TypeName": "xcm::latest::Outcome",
                "TypeId": 65
              }
            ],
            "Index": 0,
            "Docs": [
              "Execution of an XCM message was attempted.",
              "",
              "\\[ outcome \\]"
            ]
          },
          {
            "Name": "Sent",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "TypeName": "Xcm<()>",
                "TypeId": 75
              }
            ],
            "Index": 1,
            "Docs": [
              "A XCM message was sent.",
              "",
              "\\[ origin, destination, message \\]"
            ]
          },
          {
            "Name": "UnexpectedResponse",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "TypeName": "QueryId",
                "TypeId": 10
              }
            ],
            "Index": 2,
            "Docs": [
              "Query response received which does not match a registered query. This may be because a",
              "matching query was never registered, it may be because it is a duplicate response, or",
              "because the query timed out.",
              "",
              "\\[ origin location, id \\]"
            ]
          },
          {
            "Name": "ResponseReady",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "Response",
                "TypeId": 86
              }
            ],
            "Index": 3,
            "Docs": [
              "Query response has been received and is ready for taking with `take_response`. There is",
              "no registered notification call.",
              "",
              "\\[ id, response \\]"
            ]
          },
          {
            "Name": "Notified",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4,
            "Docs": [
              "Query response has been received and query is removed. The registered notification has",
              "been dispatched and executed successfully.",
              "",
              "\\[ id, pallet index, call index \\]"
            ]
          },
          {
            "Name": "NotifyOverweight",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 5,
            "Docs": [
              "Query response has been received and query is removed. The registered notification could",
              "not be dispatched because the dispatch weight is greater than the maximum weight",
              "originally budgeted by this runtime for the query result.",
              "",
              "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
            ]
          },
          {
            "Name": "NotifyDispatchError",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 6,
            "Docs": [
              "Query response has been received and query is removed. There was a general error with",
              "dispatching the notification call.",
              "",
              "\\[ id, pallet index, call index \\]"
            ]
          },
          {
            "Name": "NotifyDecodeFailed",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 7,
            "Docs": [
              "Query response has been received and query is removed. The dispatch was unable to be",
              "decoded into a `Call`; this might be due to dispatch function having a signature which",
              "is not `(origin, QueryId, Response)`.",
              "",
              "\\[ id, pallet index, call index \\]"
            ]
          },
          {
            "Name": "InvalidResponder",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 95
              }
            ],
            "Index": 8,
            "Docs": [
              "Expected query response has been received but the origin location of the response does",
              "not match that expected. The query remains registered for a later, valid, response to",
              "be received and acted upon.",
              "",
              "\\[ origin location, id, expected location \\]"
            ]
          },
          {
            "Name": "InvalidResponderVersion",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "TypeName": "QueryId",
                "TypeId": 10
              }
            ],
            "Index": 9,
            "Docs": [
              "Expected query response has been received but the expected origin location placed in",
              "storage by this runtime previously cannot be decoded. The query remains registered.",
              "",
              "This is unexpected (since a location placed in storage in a previously executing",
              "runtime should be readable prior to query timeout) and dangerous since the possibly",
              "valid response will be dropped. Manual governance intervention is probably going to be",
              "needed.",
              "",
              "\\[ origin location, id \\]"
            ]
          },
          {
            "Name": "ResponseTaken",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 10
              }
            ],
            "Index": 10,
            "Docs": [
              "Received query response has been read and removed.",
              "",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "AssetsTrapped",
            "TypeFields": [
              {
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "TypeName": "VersionedMultiAssets",
                "TypeId": 103
              }
            ],
            "Index": 11,
            "Docs": [
              "Some assets have been placed in an asset trap.",
              "",
              "\\[ hash, origin, assets \\]"
            ]
          },
          {
            "Name": "VersionChangeNotified",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "TypeName": "XcmVersion",
                "TypeId": 4
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 78
              }
            ],
            "Index": 12,
            "Docs": [
              "An XCM version change notification message has been attempted to be sent.",
              "",
              "The cost of sending it (borne by the chain) is included.",
              "",
              "\\[ destination, result, cost \\]"
            ]
          },
          {
            "Name": "SupportedVersionChanged",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "The supported version of a location has been changed. This might be through an",
              "automatic notification or a manual intervention.",
              "",
              "\\[ location, XCM version \\]"
            ]
          },
          {
            "Name": "NotifyTargetSendFail",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "XcmError",
                "TypeId": 62
              }
            ],
            "Index": 14,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "sending the notification to it.",
              "",
              "\\[ location, query ID, error \\]"
            ]
          },
          {
            "Name": "NotifyTargetMigrationFail",
            "TypeFields": [
              {
                "TypeName": "VersionedMultiLocation",
                "TypeId": 117
              },
              {
                "TypeName": "QueryId",
                "TypeId": 10
              }
            ],
            "Index": 15,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "migrating the location to our new XCM format.",
              "",
              "\\[ location, query ID \\]"
            ]
          },
          {
            "Name": "InvalidQuerierVersion",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "TypeName": "QueryId",
                "TypeId": 10
              }
            ],
            "Index": 16,
            "Docs": [
              "Expected query response has been received but the expected querier location placed in",
              "storage by this runtime previously cannot be decoded. The query remains registered.",
              "",
              "This is unexpected (since a location placed in storage in a previously executing",
              "runtime should be readable prior to query timeout) and dangerous since the possibly",
              "valid response will be dropped. Manual governance intervention is probably going to be",
              "needed.",
              "",
              "\\[ origin location, id \\]"
            ]
          },
          {
            "Name": "InvalidQuerier",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 95
              }
            ],
            "Index": 17,
            "Docs": [
              "Expected query response has been received but the querier location of the response does",
              "not match the expected. The query remains registered for a later, valid, response to",
              "be received and acted upon.",
              "",
              "\\[ origin location, id, expected querier, maybe actual querier \\]"
            ]
          },
          {
            "Name": "VersionNotifyStarted",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 78
              }
            ],
            "Index": 18,
            "Docs": [
              "A remote has requested XCM version change notification from us and we have honored it.",
              "A version information message is sent to them and its cost is included.",
              "",
              "\\[ destination location, cost \\]"
            ]
          },
          {
            "Name": "VersionNotifyRequested",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 78
              }
            ],
            "Index": 19,
            "Docs": [
              "We have requested that a remote chain sends us XCM version change notifications.",
              "",
              "\\[ destination location, cost \\]"
            ]
          },
          {
            "Name": "VersionNotifyUnrequested",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 78
              }
            ],
            "Index": 20,
            "Docs": [
              "We have requested that a remote chain stops sending us XCM version change notifications.",
              "",
              "\\[ destination location, cost \\]"
            ]
          },
          {
            "Name": "FeesPaid",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 78
              }
            ],
            "Index": 21,
            "Docs": [
              "Fees were paid from a location for an operation (often for using `SendXcm`).",
              "",
              "\\[ paying location, fees \\]"
            ]
          },
          {
            "Name": "AssetsClaimed",
            "TypeFields": [
              {
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "TypeName": "VersionedMultiAssets",
                "TypeId": 103
              }
            ],
            "Index": 22,
            "Docs": [
              "Some assets have been claimed from an asset trap",
              "",
              "\\[ hash, origin, assets \\]"
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "65": {
        "Variants": [
          {
            "Name": "Complete",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 0
          },
          {
            "Name": "Incomplete",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "TypeName": "Error",
                "TypeId": 62
              }
            ],
            "Index": 1
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "Error",
                "TypeId": 62
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "traits",
          "Outcome"
        ],
        "TypeDef": "Variant"
      },
      "66": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 67
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multilocation",
          "MultiLocation"
        ],
        "TypeDef": "Composite"
      },
      "67": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 68
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              },
              {
                "TypeName": "Junction",
                "TypeId": 68
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junctions",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "68": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 70
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 70
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 70
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 50
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 72
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "Name": "length",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "data",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 73
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 74
              }
            ],
            "Index": 8
          },
          {
            "Name": "GlobalConsensus",
            "TypeFields": [
              {
                "TypeName": "NetworkId",
                "TypeId": 71
              }
            ],
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "69": {
        "TypeId": 4,
        "TypeDef": "Compact"
      },
      "70": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 71
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 71
          }
        ],
        "TypeDef": "Variant"
      },
      "71": {
        "Variants": [
          {
            "Name": "ByGenesis",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 0
          },
          {
            "Name": "ByFork",
            "TypeFields": [
              {
                "Name": "block_number",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "block_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Westend",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Rococo",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Wococo",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "Name": "chain_id",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 7
          },
          {
            "Name": "BitcoinCore",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "BitcoinCash",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "72": {
        "TypeId": 6,
        "TypeDef": "Compact"
      },
      "73": {
        "Variants": [
          {
            "Name": "Unit",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Moniker",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 16
              }
            ],
            "Index": 1
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 2
          },
          {
            "Name": "Executive",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Technical",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Legislative",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Judicial",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Defense",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Administration",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Treasury",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "BodyId"
        ],
        "TypeDef": "Variant"
      },
      "74": {
        "Variants": [
          {
            "Name": "Voice",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Members",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 1
          },
          {
            "Name": "Fraction",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 2
          },
          {
            "Name": "AtLeastProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 3
          },
          {
            "Name": "MoreThanProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "BodyPart"
        ],
        "TypeDef": "Variant"
      },
      "75": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 76
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "76": {
        "TypeId": 77,
        "TypeDef": "Sequence"
      },
      "77": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 78
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 78
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 78
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 86
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "Name": "querier",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 95
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 78
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 78
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 75
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 96
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 97
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 67
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 98
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 99
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 99
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 75
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 99
              },
              {
                "Name": "want",
                "TypeName": "MultiAssets",
                "TypeId": 78
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 51
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 99
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 75
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 99
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 75
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 98
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 99
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 80
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 102
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 75
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 75
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 78
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 78
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 78
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 95
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 87
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 93
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 98
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 98
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 68
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 71
              },
              {
                "Name": "destination",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 67
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 75
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 80
              },
              {
                "Name": "unlocker",
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 80
              },
              {
                "Name": "target",
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 80
              },
              {
                "Name": "owner",
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 80
              },
              {
                "Name": "locker",
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 51
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 102
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 95
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "78": {
        "TypeFields": [
          {
            "TypeName": "Vec<MultiAsset>",
            "TypeId": 79
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAssets"
        ],
        "TypeDef": "Composite"
      },
      "79": {
        "TypeId": 80,
        "TypeDef": "Sequence"
      },
      "80": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 81
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 82
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAsset"
        ],
        "TypeDef": "Composite"
      },
      "81": {
        "Variants": [
          {
            "Name": "Concrete",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 0
          },
          {
            "Name": "Abstract",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "AssetId"
        ],
        "TypeDef": "Variant"
      },
      "82": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 72
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 83
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "83": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 72
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 16
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 84
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 85
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "84": {
        "Length": 8,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "85": {
        "Length": 16,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "86": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 78
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 87
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 4
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletsInfo",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                "TypeId": 89
              }
            ],
            "Index": 4
          },
          {
            "Name": "DispatchResult",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 93
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "87": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 88
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 88
          }
        ],
        "TypeDef": "Variant"
      },
      "88": {
        "TypeIds": [
          4,
          62
        ],
        "TypeDef": "Tuple"
      },
      "89": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 92
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 90
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "90": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 69
          },
          {
            "Name": "name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 91
          },
          {
            "Name": "module_name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 91
          },
          {
            "Name": "major",
            "TypeName": "u32",
            "TypeId": 69
          },
          {
            "Name": "minor",
            "TypeName": "u32",
            "TypeId": 69
          },
          {
            "Name": "patch",
            "TypeName": "u32",
            "TypeId": 69
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "PalletInfo"
        ],
        "TypeDef": "Composite"
      },
      "91": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "92": {
        "TypeId": 90,
        "TypeDef": "Sequence"
      },
      "93": {
        "Variants": [
          {
            "Name": "Success",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                "TypeId": 94
              }
            ],
            "Index": 1
          },
          {
            "Name": "TruncatedError",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                "TypeId": 94
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "MaybeErrorCode"
        ],
        "TypeDef": "Variant"
      },
      "94": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "95": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 66
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 66
          }
        ],
        "TypeDef": "Variant"
      },
      "96": {
        "Variants": [
          {
            "Name": "Native",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SovereignAccount",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Superuser",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Xcm",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "OriginKind"
        ],
        "TypeDef": "Variant"
      },
      "97": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "98": {
        "TypeFields": [
          {
            "Name": "destination",
            "TypeName": "MultiLocation",
            "TypeId": 66
          },
          {
            "Name": "query_id",
            "TypeName": "QueryId",
            "TypeId": 9
          },
          {
            "Name": "max_weight",
            "TypeName": "Weight",
            "TypeId": 8
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "QueryResponseInfo"
        ],
        "TypeDef": "Composite"
      },
      "99": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 78
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildMultiAsset",
                "TypeId": 100
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "100": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 81
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 101
              }
            ],
            "Index": 1
          },
          {
            "Name": "AllCounted",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 2
          },
          {
            "Name": "AllOfCounted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 81
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 101
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "WildMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "101": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "102": {
        "Variants": [
          {
            "Name": "Unlimited",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Limited",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "WeightLimit"
        ],
        "TypeDef": "Variant"
      },
      "103": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiAssets",
                "TypeId": 104
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiAssets",
                "TypeId": 78
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedMultiAssets"
        ],
        "TypeDef": "Variant"
      },
      "104": {
        "TypeFields": [
          {
            "TypeName": "Vec<MultiAsset>",
            "TypeId": 105
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAssets"
        ],
        "TypeDef": "Composite"
      },
      "105": {
        "TypeId": 106,
        "TypeDef": "Sequence"
      },
      "106": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 107
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 115
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAsset"
        ],
        "TypeDef": "Composite"
      },
      "107": {
        "Variants": [
          {
            "Name": "Concrete",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 108
              }
            ],
            "Index": 0
          },
          {
            "Name": "Abstract",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "AssetId"
        ],
        "TypeDef": "Variant"
      },
      "108": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 109
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multilocation",
          "MultiLocation"
        ],
        "TypeDef": "Composite"
      },
      "109": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 110
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              },
              {
                "TypeName": "Junction",
                "TypeId": 110
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multilocation",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "110": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 111
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 111
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 111
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 50
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 72
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 112
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 113
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 114
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "111": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Named",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 112
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "112": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "113": {
        "Variants": [
          {
            "Name": "Unit",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Named",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 112
              }
            ],
            "Index": 1
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 2
          },
          {
            "Name": "Executive",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Technical",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Legislative",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Judicial",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Defense",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Administration",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Treasury",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "BodyId"
        ],
        "TypeDef": "Variant"
      },
      "114": {
        "Variants": [
          {
            "Name": "Voice",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Members",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 1
          },
          {
            "Name": "Fraction",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 2
          },
          {
            "Name": "AtLeastProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 3
          },
          {
            "Name": "MoreThanProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "BodyPart"
        ],
        "TypeDef": "Variant"
      },
      "115": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 72
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 116
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "116": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 72
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 16
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 84
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 85
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 5
          },
          {
            "Name": "Blob",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "117": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiLocation",
                "TypeId": 108
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedMultiLocation"
        ],
        "TypeDef": "Variant"
      },
      "118": {
        "Variants": [
          {
            "Name": "InvalidFormat",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "Downward message is invalid XCM.",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "UnsupportedVersion",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "Downward message is unsupported version of XCM.",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "ExecutedDownward",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "TypeName": "Outcome",
                "TypeId": 65
              }
            ],
            "Index": 2,
            "Docs": [
              "Downward message executed with the given outcome.",
              "\\[ id, outcome \\]"
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "119": {
        "Variants": [
          {
            "Name": "InvalidFormat",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "Downward message is invalid XCM."
            ]
          },
          {
            "Name": "UnsupportedVersion",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "Downward message is unsupported version of XCM."
            ]
          },
          {
            "Name": "ExecutedDownward",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              },
              {
                "Name": "outcome",
                "TypeName": "Outcome",
                "TypeId": 65
              }
            ],
            "Index": 2,
            "Docs": [
              "Downward message executed with the given outcome."
            ]
          },
          {
            "Name": "WeightExhausted",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              },
              {
                "Name": "remaining_weight",
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "Name": "required_weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 3,
            "Docs": [
              "The weight limit for handling downward messages was reached."
            ]
          },
          {
            "Name": "OverweightEnqueued",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              },
              {
                "Name": "overweight_index",
                "TypeName": "OverweightIndex",
                "TypeId": 10
              },
              {
                "Name": "required_weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 4,
            "Docs": [
              "Downward message is overweight and was placed in the overweight queue."
            ]
          },
          {
            "Name": "OverweightServiced",
            "TypeFields": [
              {
                "Name": "overweight_index",
                "TypeName": "OverweightIndex",
                "TypeId": 10
              },
              {
                "Name": "weight_used",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 5,
            "Docs": [
              "Downward message from the overweight queue was executed."
            ]
          },
          {
            "Name": "MaxMessagesExhausted",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              }
            ],
            "Index": 6,
            "Docs": [
              "The maximum number of downward messages was."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "120": {
        "Variants": [
          {
            "Name": "AssetRegistered",
            "TypeFields": [
              {
                "Name": "asset_location",
                "TypeName": "VersionedMultiLocation",
                "TypeId": 117
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Registed mapping between asset type and asset Id."
            ]
          },
          {
            "Name": "UnitsPerSecondChanged",
            "TypeFields": [
              {
                "Name": "asset_location",
                "TypeName": "VersionedMultiLocation",
                "TypeId": 117
              },
              {
                "Name": "units_per_second",
                "TypeName": "u128",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Changed the amount of units we are charging per execution second for an asset"
            ]
          },
          {
            "Name": "AssetLocationChanged",
            "TypeFields": [
              {
                "Name": "previous_asset_location",
                "TypeName": "VersionedMultiLocation",
                "TypeId": 117
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              },
              {
                "Name": "new_asset_location",
                "TypeName": "VersionedMultiLocation",
                "TypeId": 117
              }
            ],
            "Index": 2,
            "Docs": [
              "Changed the asset type mapping for a given asset id"
            ]
          },
          {
            "Name": "SupportedAssetRemoved",
            "TypeFields": [
              {
                "Name": "asset_location",
                "TypeName": "VersionedMultiLocation",
                "TypeId": 117
              }
            ],
            "Index": 3,
            "Docs": [
              "Supported asset type for fee payment removed."
            ]
          },
          {
            "Name": "AssetRemoved",
            "TypeFields": [
              {
                "Name": "asset_location",
                "TypeName": "VersionedMultiLocation",
                "TypeId": 117
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Removed all information related to an asset Id"
            ]
          }
        ],
        "Path": [
          "pallet_xc_asset_config",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "121": {
        "Variants": [
          {
            "Name": "TransferredMultiAssets",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 78
              },
              {
                "Name": "fee",
                "TypeName": "MultiAsset",
                "TypeId": 80
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 0,
            "Docs": [
              "Transferred `MultiAsset` with fee."
            ]
          }
        ],
        "Path": [
          "orml_xtokens",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "122": {
        "Variants": [
          {
            "Name": "Log",
            "TypeFields": [
              {
                "Name": "log",
                "TypeName": "Log",
                "TypeId": 123
              }
            ],
            "Index": 0,
            "Docs": [
              "Ethereum events from contracts."
            ]
          },
          {
            "Name": "Created",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 49
              }
            ],
            "Index": 1,
            "Docs": [
              "A contract has been created at given address."
            ]
          },
          {
            "Name": "CreatedFailed",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 49
              }
            ],
            "Index": 2,
            "Docs": [
              "A contract was attempted to be created, but the execution failed."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 49
              }
            ],
            "Index": 3,
            "Docs": [
              "A contract has been executed successfully with states applied."
            ]
          },
          {
            "Name": "ExecutedFailed",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 49
              }
            ],
            "Index": 4,
            "Docs": [
              "A contract has been executed with errors. States are reverted with only gas fees applied."
            ]
          }
        ],
        "Path": [
          "pallet_evm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "123": {
        "TypeFields": [
          {
            "Name": "address",
            "TypeName": "H160",
            "TypeId": 49
          },
          {
            "Name": "topics",
            "TypeName": "Vec<H256>",
            "TypeId": 124
          },
          {
            "Name": "data",
            "TypeName": "Bytes",
            "TypeId": 12
          }
        ],
        "Path": [
          "ethereum",
          "log",
          "Log"
        ],
        "TypeDef": "Composite"
      },
      "124": {
        "TypeId": 11,
        "TypeDef": "Sequence"
      },
      "125": {
        "Variants": [
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "H160",
                "TypeId": 49
              },
              {
                "Name": "to",
                "TypeName": "H160",
                "TypeId": 49
              },
              {
                "Name": "transaction_hash",
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "Name": "exit_reason",
                "TypeName": "ExitReason",
                "TypeId": 126
              }
            ],
            "Index": 0,
            "Docs": [
              "An ethereum transaction was successfully executed."
            ]
          }
        ],
        "Path": [
          "pallet_ethereum",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "126": {
        "Variants": [
          {
            "Name": "Succeed",
            "TypeFields": [
              {
                "TypeName": "ExitSucceed",
                "TypeId": 127
              }
            ],
            "Index": 0
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "ExitError",
                "TypeId": 128
              }
            ],
            "Index": 1
          },
          {
            "Name": "Revert",
            "TypeFields": [
              {
                "TypeName": "ExitRevert",
                "TypeId": 132
              }
            ],
            "Index": 2
          },
          {
            "Name": "Fatal",
            "TypeFields": [
              {
                "TypeName": "ExitFatal",
                "TypeId": 133
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitReason"
        ],
        "TypeDef": "Variant"
      },
      "127": {
        "Variants": [
          {
            "Name": "Stopped",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Returned",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Suicided",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitSucceed"
        ],
        "TypeDef": "Variant"
      },
      "128": {
        "Variants": [
          {
            "Name": "StackUnderflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "StackOverflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "InvalidJump",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "InvalidRange",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "DesignatedInvalid",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "CallTooDeep",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "CreateCollision",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "CreateContractLimit",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "InvalidCode",
            "TypeFields": [
              {
                "TypeName": "Opcode",
                "TypeId": 129
              }
            ],
            "Index": 15
          },
          {
            "Name": "OutOfOffset",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "OutOfGas",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "OutOfFund",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "PCUnderflow",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "CreateEmpty",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Cow<'static, str>",
                "TypeId": 130
              }
            ],
            "Index": 13
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitError"
        ],
        "TypeDef": "Variant"
      },
      "129": {
        "TypeFields": [
          {
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "evm_core",
          "opcode",
          "Opcode"
        ],
        "TypeDef": "Composite"
      },
      "130": {
        "TypeFields": [
          {
            "TypeId": 131
          }
        ],
        "Path": [
          "Cow"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 131
          }
        ],
        "TypeDef": "Composite"
      },
      "131": {
        "Primitive": "Str",
        "TypeDef": "Primitive"
      },
      "132": {
        "Variants": [
          {
            "Name": "Reverted",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitRevert"
        ],
        "TypeDef": "Variant"
      },
      "133": {
        "Variants": [
          {
            "Name": "NotSupported",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "UnhandledInterrupt",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "CallErrorAsFatal",
            "TypeFields": [
              {
                "TypeName": "ExitError",
                "TypeId": 128
              }
            ],
            "Index": 2
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Cow<'static, str>",
                "TypeId": 130
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitFatal"
        ],
        "TypeDef": "Variant"
      },
      "134": {
        "Variants": [
          {
            "Name": "NewBaseFeePerGas",
            "TypeFields": [
              {
                "Name": "fee",
                "TypeName": "U256",
                "TypeId": 135
              }
            ],
            "Index": 0
          },
          {
            "Name": "BaseFeeOverflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NewElasticity",
            "TypeFields": [
              {
                "Name": "elasticity",
                "TypeName": "Permill",
                "TypeId": 137
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_base_fee",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "135": {
        "TypeFields": [
          {
            "TypeName": "[u64; 4]",
            "TypeId": 136
          }
        ],
        "Path": [
          "primitive_types",
          "U256"
        ],
        "TypeDef": "Composite"
      },
      "136": {
        "Length": 4,
        "TypeId": 10,
        "TypeDef": "Array"
      },
      "137": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Permill"
        ],
        "TypeDef": "Composite"
      },
      "138": {
        "Variants": [
          {
            "Name": "Instantiated",
            "TypeFields": [
              {
                "Name": "deployer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "contract",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "Contract deployed by address at the specified address."
            ]
          },
          {
            "Name": "Terminated",
            "TypeFields": [
              {
                "Name": "contract",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The contract that was terminated."
                ]
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account that received the contracts remaining balance"
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "Contract has been removed.",
              "",
              "# Note",
              "",
              "The only way for a contract to be removed and emitting this event is by calling",
              "`seal_terminate`."
            ]
          },
          {
            "Name": "CodeStored",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "Code with the specified hash has been stored."
            ]
          },
          {
            "Name": "ContractEmitted",
            "TypeFields": [
              {
                "Name": "contract",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The contract that emitted the event."
                ]
              },
              {
                "Name": "data",
                "TypeName": "Vec<u8>",
                "TypeId": 12,
                "Docs": [
                  "Data supplied by the contract. Metadata generated during contract compilation",
                  "is needed to decode it."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "A custom event emitted by the contract."
            ]
          },
          {
            "Name": "CodeRemoved",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 4,
            "Docs": [
              "A code with the specified hash was removed."
            ]
          },
          {
            "Name": "ContractCodeUpdated",
            "TypeFields": [
              {
                "Name": "contract",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The contract that has been updated."
                ]
              },
              {
                "Name": "new_code_hash",
                "TypeName": "T::Hash",
                "TypeId": 11,
                "Docs": [
                  "New code hash that was set for the contract."
                ]
              },
              {
                "Name": "old_code_hash",
                "TypeName": "T::Hash",
                "TypeId": 11,
                "Docs": [
                  "Previous code hash of the contract."
                ]
              }
            ],
            "Index": 5,
            "Docs": [
              "A contract's code was updated."
            ]
          },
          {
            "Name": "Called",
            "TypeFields": [
              {
                "Name": "caller",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account that called the `contract`."
                ]
              },
              {
                "Name": "contract",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The contract that was called."
                ]
              }
            ],
            "Index": 6,
            "Docs": [
              "A contract was called either by a plain account or another contract.",
              "",
              "# Note",
              "",
              "Please keep in mind that like all events this is only emitted for successful",
              "calls. This is because on failure all storage changes including events are",
              "rolled back."
            ]
          },
          {
            "Name": "DelegateCalled",
            "TypeFields": [
              {
                "Name": "contract",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The contract that performed the delegate call and hence in whose context",
                  "the `code_hash` is executed."
                ]
              },
              {
                "Name": "code_hash",
                "TypeName": "CodeHash<T>",
                "TypeId": 11,
                "Docs": [
                  "The code hash that was delegate called."
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "A contract delegate called a code hash.",
              "",
              "# Note",
              "",
              "Please keep in mind that like all events this is only emitted for successful",
              "calls. This is because on failure all storage changes including events are",
              "rolled back."
            ]
          }
        ],
        "Path": [
          "pallet_contracts",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "139": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion has been proposed by a public account."
            ]
          },
          {
            "Name": "Tabled",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A public proposal has been tabled for referendum vote."
            ]
          },
          {
            "Name": "ExternalTabled",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "An external proposal has been tabled."
            ]
          },
          {
            "Name": "Started",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              },
              {
                "Name": "threshold",
                "TypeName": "VoteThreshold",
                "TypeId": 140
              }
            ],
            "Index": 3,
            "Docs": [
              "A referendum has begun."
            ]
          },
          {
            "Name": "Passed",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A proposal has been approved by referendum."
            ]
          },
          {
            "Name": "NotPassed",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "A proposal has been rejected by referendum."
            ]
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A referendum has been cancelled."
            ]
          },
          {
            "Name": "Delegated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "An account has delegated their vote to another account."
            ]
          },
          {
            "Name": "Undelegated",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 8,
            "Docs": [
              "An account has cancelled a previous delegation operation."
            ]
          },
          {
            "Name": "Vetoed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "Name": "until",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "An external proposal has been vetoed."
            ]
          },
          {
            "Name": "Blacklisted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 11
              }
            ],
            "Index": 10,
            "Docs": [
              "A proposal_hash has been blacklisted permanently."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "voter",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T>>",
                "TypeId": 141
              }
            ],
            "Index": 11,
            "Docs": [
              "An account has voted in a referendum"
            ]
          },
          {
            "Name": "Seconded",
            "TypeFields": [
              {
                "Name": "seconder",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              }
            ],
            "Index": 12,
            "Docs": [
              "An account has secconded a proposal"
            ]
          },
          {
            "Name": "ProposalCanceled",
            "TypeFields": [
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "A proposal got canceled."
            ]
          },
          {
            "Name": "MetadataSet",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 143,
                "Docs": [
                  "Metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "PreimageHash",
                "TypeId": 11,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 14,
            "Docs": [
              "Metadata for a proposal or a referendum has been set."
            ]
          },
          {
            "Name": "MetadataCleared",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 143,
                "Docs": [
                  "Metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "PreimageHash",
                "TypeId": 11,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 15,
            "Docs": [
              "Metadata for a proposal or a referendum has been cleared."
            ]
          },
          {
            "Name": "MetadataTransferred",
            "TypeFields": [
              {
                "Name": "prev_owner",
                "TypeName": "MetadataOwner",
                "TypeId": 143,
                "Docs": [
                  "Previous metadata owner."
                ]
              },
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 143,
                "Docs": [
                  "New metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "PreimageHash",
                "TypeId": 11,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 16,
            "Docs": [
              "Metadata has been transferred to new owner."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "140": {
        "Variants": [
          {
            "Name": "SuperMajorityApprove",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SuperMajorityAgainst",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "SimpleMajority",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote_threshold",
          "VoteThreshold"
        ],
        "TypeDef": "Variant"
      },
      "141": {
        "Variants": [
          {
            "Name": "Standard",
            "TypeFields": [
              {
                "Name": "vote",
                "TypeName": "Vote",
                "TypeId": 142
              },
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "Split",
            "TypeFields": [
              {
                "Name": "aye",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "nay",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "AccountVote"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "142": {
        "TypeFields": [
          {
            "TypeId": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "Vote"
        ],
        "TypeDef": "Composite"
      },
      "143": {
        "Variants": [
          {
            "Name": "External",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Proposal",
            "TypeFields": [
              {
                "TypeName": "PropIndex",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "Referendum",
            "TypeFields": [
              {
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "MetadataOwner"
        ],
        "TypeDef": "Variant"
      },
      "144": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "voted",
                "TypeName": "bool",
                "TypeId": 51
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "A motion was approved by the required threshold."
            ]
          },
          {
            "Name": "Disapproved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 3,
            "Docs": [
              "A motion was not approved by the required threshold."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 30
              }
            ],
            "Index": 4,
            "Docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "MemberExecuted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 30
              }
            ],
            "Index": 5,
            "Docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "Closed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "145": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "voted",
                "TypeName": "bool",
                "TypeId": 51
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "A motion was approved by the required threshold."
            ]
          },
          {
            "Name": "Disapproved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 3,
            "Docs": [
              "A motion was not approved by the required threshold."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 30
              }
            ],
            "Index": 4,
            "Docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "MemberExecuted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 30
              }
            ],
            "Index": 5,
            "Docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "Closed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "146": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "New proposal."
            ]
          },
          {
            "Name": "Spending",
            "TypeFields": [
              {
                "Name": "budget_remaining",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "We have ended a spend period and will now allocate funds."
            ]
          },
          {
            "Name": "Awarded",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "award",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Some funds have been allocated."
            ]
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "slashed",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A proposal was rejected; funds were slashed."
            ]
          },
          {
            "Name": "Burnt",
            "TypeFields": [
              {
                "Name": "burnt_funds",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some of our funds have been burnt."
            ]
          },
          {
            "Name": "Rollover",
            "TypeFields": [
              {
                "Name": "rollover_balance",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Spending has finished; this is the amount that rolls over until next spend."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "Some funds have been deposited."
            ]
          },
          {
            "Name": "SpendApproved",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "A new spend proposal has been approved."
            ]
          },
          {
            "Name": "UpdatedInactive",
            "TypeFields": [
              {
                "Name": "reactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "deactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "The inactive funds of the pallet have been updated."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "147": {
        "Variants": [
          {
            "Name": "Noted",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 0,
            "Docs": [
              "A preimage has been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 1,
            "Docs": [
              "A preimage has been requested."
            ]
          },
          {
            "Name": "Cleared",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "A preimage has ben cleared."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "148": {
        "Variants": [
          {
            "Name": "XvmCall",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "Result<Vec<u8>, XvmError>",
                "TypeId": 149
              }
            ],
            "Index": 0
          },
          {
            "Name": "XvmSend",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "Result<Vec<u8>, XvmError>",
                "TypeId": 149
              }
            ],
            "Index": 1
          },
          {
            "Name": "XvmQuery",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "Result<Vec<u8>, XvmError>",
                "TypeId": 149
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_xvm",
          "pallet",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "149": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": [
              {
                "TypeId": 12
              }
            ],
            "Index": 0
          },
          {
            "Name": "Err",
            "TypeFields": [
              {
                "TypeId": 150
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Result"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          },
          {
            "Name": "E",
            "TypeId": 150
          }
        ],
        "TypeDef": "Variant"
      },
      "150": {
        "Variants": [
          {
            "Name": "VmNotRecognized",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "EncodingFailure",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "ContextConversionFailed",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "OutOfGas",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "ExecutionError",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "pallet_xvm",
          "XvmError"
        ],
        "TypeDef": "Variant"
      },
      "151": {
        "Variants": [
          {
            "Name": "Sudid",
            "TypeFields": [
              {
                "Name": "sudo_result",
                "TypeName": "DispatchResult",
                "TypeId": 30
              }
            ],
            "Index": 0,
            "Docs": [
              "A sudo just took place. \\[result\\]"
            ]
          },
          {
            "Name": "KeyChanged",
            "TypeFields": [
              {
                "Name": "old_sudoer",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 152
              }
            ],
            "Index": 1,
            "Docs": [
              "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
            ]
          },
          {
            "Name": "SudoAsDone",
            "TypeFields": [
              {
                "Name": "sudo_result",
                "TypeName": "DispatchResult",
                "TypeId": 30
              }
            ],
            "Index": 2,
            "Docs": [
              "A sudo just took place. \\[result\\]"
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "152": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "153": {
        "Variants": [
          {
            "Name": "Migrated",
            "TypeFields": [
              {
                "Name": "top",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "child",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "compute",
                "TypeName": "MigrationCompute",
                "TypeId": 154
              }
            ],
            "Index": 0,
            "Docs": [
              "Given number of `(top, child)` keys were migrated respectively, with the given",
              "`compute`."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Some account got slashed by the given amount."
            ]
          },
          {
            "Name": "AutoMigrationFinished",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The auto migration task finished."
            ]
          },
          {
            "Name": "Halted",
            "TypeFields": [
              {
                "Name": "error",
                "TypeName": "Error<T>",
                "TypeId": 155
              }
            ],
            "Index": 3,
            "Docs": [
              "Migration got halted due to an error or miss-configuration."
            ]
          }
        ],
        "Path": [
          "pallet_state_trie_migration",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Inner events of this pallet."
        ]
      },
      "154": {
        "Variants": [
          {
            "Name": "Signed",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Auto",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_state_trie_migration",
          "pallet",
          "MigrationCompute"
        ],
        "TypeDef": "Variant"
      },
      "155": {
        "Variants": [
          {
            "Name": "MaxSignedLimits",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Max signed limits not respected."
            ]
          },
          {
            "Name": "KeyTooLong",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "A key was longer than the configured maximum.",
              "",
              "This means that the migration halted at the current [`Progress`] and",
              "can be resumed with a larger [`crate::Config::MaxKeyLen`] value.",
              "Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.",
              "The value should only be increased to avoid a storage migration for the currently",
              "stored [`crate::Progress::LastKey`]."
            ]
          },
          {
            "Name": "NotEnoughFunds",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "submitter does not have enough funds."
            ]
          },
          {
            "Name": "BadWitness",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Bad witness data provided."
            ]
          },
          {
            "Name": "SignedMigrationNotAllowed",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Signed migration is not allowed because the maximum limit is not set yet."
            ]
          },
          {
            "Name": "BadChildRoot",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Bad child root provided."
            ]
          }
        ],
        "Path": [
          "pallet_state_trie_migration",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "156": {
        "Variants": [
          {
            "Name": "ApplyExtrinsic",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finalization",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Initialization",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_system",
          "Phase"
        ],
        "TypeDef": "Variant"
      },
      "157": {
        "TypeId": 37,
        "TypeDef": "Sequence"
      },
      "158": {
        "TypeFields": [
          {
            "Name": "spec_version",
            "TypeName": "codec::Compact<u32>",
            "TypeId": 69
          },
          {
            "Name": "spec_name",
            "TypeName": "sp_runtime::RuntimeString",
            "TypeId": 131
          }
        ],
        "Path": [
          "frame_system",
          "LastRuntimeUpgradeInfo"
        ],
        "TypeDef": "Composite"
      },
      "159": {
        "Variants": [
          {
            "Name": "remark",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "Make some on-chain remark.",
              "",
              "## Complexity",
              "- `O(1)`"
            ]
          },
          {
            "Name": "set_heap_pages",
            "TypeFields": [
              {
                "Name": "pages",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the number of pages in the WebAssembly environment's heap."
            ]
          },
          {
            "Name": "set_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the new runtime code.",
              "",
              "## Complexity",
              "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"
            ]
          },
          {
            "Name": "set_code_without_checks",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "Set the new runtime code without doing any checks of the given `code`.",
              "",
              "## Complexity",
              "- `O(C)` where `C` length of `code`"
            ]
          },
          {
            "Name": "set_storage",
            "TypeFields": [
              {
                "Name": "items",
                "TypeName": "Vec<KeyValue>",
                "TypeId": 160
              }
            ],
            "Index": 4,
            "Docs": [
              "Set some items of storage."
            ]
          },
          {
            "Name": "kill_storage",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "Vec<Key>",
                "TypeId": 162
              }
            ],
            "Index": 5,
            "Docs": [
              "Kill some items from storage."
            ]
          },
          {
            "Name": "kill_prefix",
            "TypeFields": [
              {
                "Name": "prefix",
                "TypeName": "Key",
                "TypeId": 12
              },
              {
                "Name": "subkeys",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Kill all storage items with a key that starts with the given prefix.",
              "",
              "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
              "the prefix we are removing to accurately calculate the weight of this function."
            ]
          },
          {
            "Name": "remark_with_event",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 7,
            "Docs": [
              "Make some on-chain remark and emit event."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "160": {
        "TypeId": 161,
        "TypeDef": "Sequence"
      },
      "161": {
        "TypeIds": [
          12,
          12
        ],
        "TypeDef": "Tuple"
      },
      "162": {
        "TypeId": 12,
        "TypeDef": "Sequence"
      },
      "163": {
        "TypeFields": [
          {
            "Name": "base_block",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "max_block",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "per_class",
            "TypeName": "PerDispatchClass<WeightsPerClass>",
            "TypeId": 164
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockWeights"
        ],
        "TypeDef": "Composite"
      },
      "164": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 165
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 165
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 165
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 165
          }
        ],
        "TypeDef": "Composite"
      },
      "165": {
        "TypeFields": [
          {
            "Name": "base_extrinsic",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "max_extrinsic",
            "TypeName": "Option<Weight>",
            "TypeId": 166
          },
          {
            "Name": "max_total",
            "TypeName": "Option<Weight>",
            "TypeId": 166
          },
          {
            "Name": "reserved",
            "TypeName": "Option<Weight>",
            "TypeId": 166
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "WeightsPerClass"
        ],
        "TypeDef": "Composite"
      },
      "166": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 8
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 8
          }
        ],
        "TypeDef": "Variant"
      },
      "167": {
        "TypeFields": [
          {
            "Name": "max",
            "TypeName": "PerDispatchClass<u32>",
            "TypeId": 168
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockLength"
        ],
        "TypeDef": "Composite"
      },
      "168": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 4
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "169": {
        "TypeFields": [
          {
            "Name": "read",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "write",
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "sp_weights",
          "RuntimeDbWeight"
        ],
        "TypeDef": "Composite"
      },
      "170": {
        "TypeFields": [
          {
            "Name": "spec_name",
            "TypeName": "RuntimeString",
            "TypeId": 131
          },
          {
            "Name": "impl_name",
            "TypeName": "RuntimeString",
            "TypeId": 131
          },
          {
            "Name": "authoring_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "spec_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "impl_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "apis",
            "TypeName": "ApisVec",
            "TypeId": 171
          },
          {
            "Name": "transaction_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "state_version",
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_version",
          "RuntimeVersion"
        ],
        "TypeDef": "Composite"
      },
      "171": {
        "TypeFields": [
          {
            "TypeId": 172
          }
        ],
        "Path": [
          "Cow"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 172
          }
        ],
        "TypeDef": "Composite"
      },
      "172": {
        "TypeId": 173,
        "TypeDef": "Sequence"
      },
      "173": {
        "TypeIds": [
          84,
          4
        ],
        "TypeDef": "Tuple"
      },
      "174": {
        "Variants": [
          {
            "Name": "InvalidSpecName",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The name of specification does not match between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "SpecVersionNeedsToIncrease",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The specification version is not allowed to decrease between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "FailedToExtractRuntimeVersion",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed to extract the runtime version from the new runtime.",
              "",
              "Either calling `Core_version` or decoding `RuntimeVersion` failed."
            ]
          },
          {
            "Name": "NonDefaultComposite",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Suicide called when the account has non-default composite data."
            ]
          },
          {
            "Name": "NonZeroRefCount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There is a non-zero reference count preventing the account from being purged."
            ]
          },
          {
            "Name": "CallFiltered",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The origin filter prevent the call to be dispatched."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the System pallet"
        ]
      },
      "175": {
        "Variants": [
          {
            "Name": "batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 176
              }
            ],
            "Index": 0,
            "Docs": [
              "Send a batch of dispatch calls.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched.",
              "",
              "This will return `Ok` in all circumstances. To determine the success of the batch, an",
              "event is deposited. If a call failed and the batch was interrupted, then the",
              "`BatchInterrupted` event is deposited, along with the number of successful calls made",
              "and the error of the failed call. If all were successful, then the `BatchCompleted`",
              "event is deposited."
            ]
          },
          {
            "Name": "as_derivative",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 41
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 177
              }
            ],
            "Index": 1,
            "Docs": [
              "Send a call through an indexed pseudonym of the sender.",
              "",
              "Filter from origin are passed along. The call will be dispatched with an origin which",
              "use the same filter as the origin of this call.",
              "",
              "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
              "because you expect `proxy` to have been used prior in the call stack and you do not want",
              "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
              "in the Multisig pallet instead.",
              "",
              "NOTE: Prior to version *12, this was called `as_limited_sub`.",
              "",
              "The dispatch origin for this call must be _Signed_."
            ]
          },
          {
            "Name": "batch_all",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 176
              }
            ],
            "Index": 2,
            "Docs": [
              "Send a batch of dispatch calls and atomically execute them.",
              "The whole transaction will rollback and fail if any of the calls failed.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched."
            ]
          },
          {
            "Name": "dispatch_as",
            "TypeFields": [
              {
                "Name": "as_origin",
                "TypeName": "Box<T::PalletsOrigin>",
                "TypeId": 323
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 177
              }
            ],
            "Index": 3,
            "Docs": [
              "Dispatches a function call with a provided origin.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "force_batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 176
              }
            ],
            "Index": 4,
            "Docs": [
              "Send a batch of dispatch calls.",
              "Unlike `batch`, it allows errors and won't interrupt.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatch without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched."
            ]
          },
          {
            "Name": "with_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 177
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 5,
            "Docs": [
              "Dispatch a function call with a specified weight.",
              "",
              "This function does not check the weight of the call, and instead allows the",
              "Root origin to specify the weight of the call.",
              "",
              "The dispatch origin for this call must be _Root_."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "176": {
        "TypeId": 177,
        "TypeDef": "Sequence"
      },
      "177": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                "TypeId": 159
              }
            ],
            "Index": 10
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                "TypeId": 175
              }
            ],
            "Index": 11
          },
          {
            "Name": "Identity",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                "TypeId": 178
              }
            ],
            "Index": 12
          },
          {
            "Name": "Timestamp",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                "TypeId": 220
              }
            ],
            "Index": 13
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                "TypeId": 221
              }
            ],
            "Index": 14
          },
          {
            "Name": "EthCall",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EthCall, Runtime>",
                "TypeId": 223
              }
            ],
            "Index": 15
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                "TypeId": 224
              }
            ],
            "Index": 17
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                "TypeId": 226
              }
            ],
            "Index": 18
          },
          {
            "Name": "ParachainSystem",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>",
                "TypeId": 228
              }
            ],
            "Index": 20
          },
          {
            "Name": "ParachainInfo",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainInfo, Runtime>",
                "TypeId": 241
              }
            ],
            "Index": 21
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                "TypeId": 242
              }
            ],
            "Index": 31
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                "TypeId": 243
              }
            ],
            "Index": 32
          },
          {
            "Name": "DappsStaking",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DappsStaking, Runtime>",
                "TypeId": 245
              }
            ],
            "Index": 34
          },
          {
            "Name": "BlockReward",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BlockReward, Runtime>",
                "TypeId": 247
              }
            ],
            "Index": 35
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>",
                "TypeId": 248
              }
            ],
            "Index": 36
          },
          {
            "Name": "CollatorSelection",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CollatorSelection, Runtime>",
                "TypeId": 249
              }
            ],
            "Index": 41
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                "TypeId": 250
              }
            ],
            "Index": 42
          },
          {
            "Name": "XcmpQueue",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmpQueue, Runtime>",
                "TypeId": 254
              }
            ],
            "Index": 50
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>",
                "TypeId": 255
              }
            ],
            "Index": 51
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CumulusXcm, Runtime>",
                "TypeId": 277
              }
            ],
            "Index": 52
          },
          {
            "Name": "DmpQueue",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DmpQueue, Runtime>",
                "TypeId": 278
              }
            ],
            "Index": 53
          },
          {
            "Name": "XcAssetConfig",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcAssetConfig, Runtime>",
                "TypeId": 279
              }
            ],
            "Index": 54
          },
          {
            "Name": "Xtokens",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Xtokens, Runtime>",
                "TypeId": 280
              }
            ],
            "Index": 55
          },
          {
            "Name": "EVM",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVM, Runtime>",
                "TypeId": 284
              }
            ],
            "Index": 60
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ethereum, Runtime>",
                "TypeId": 288
              }
            ],
            "Index": 61
          },
          {
            "Name": "BaseFee",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BaseFee, Runtime>",
                "TypeId": 298
              }
            ],
            "Index": 62
          },
          {
            "Name": "Contracts",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Contracts, Runtime>",
                "TypeId": 299
              }
            ],
            "Index": 70
          },
          {
            "Name": "Democracy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>",
                "TypeId": 304
              }
            ],
            "Index": 80
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>",
                "TypeId": 309
              }
            ],
            "Index": 81
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>",
                "TypeId": 310
              }
            ],
            "Index": 82
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                "TypeId": 311
              }
            ],
            "Index": 83
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                "TypeId": 312
              }
            ],
            "Index": 84
          },
          {
            "Name": "Xvm",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Xvm, Runtime>",
                "TypeId": 313
              }
            ],
            "Index": 90
          },
          {
            "Name": "Sudo",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                "TypeId": 316
              }
            ],
            "Index": 99
          },
          {
            "Name": "StateTrieMigration",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<StateTrieMigration, Runtime>",
                "TypeId": 317
              }
            ],
            "Index": 200
          }
        ],
        "Path": [
          "shibuya_runtime",
          "RuntimeCall"
        ],
        "TypeDef": "Variant"
      },
      "178": {
        "Variants": [
          {
            "Name": "add_registrar",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              }
            ],
            "Index": 0,
            "Docs": [
              "Add a registrar to the system.",
              "",
              "The dispatch origin for this call must be `T::RegistrarOrigin`.",
              "",
              "- `account`: the account of the registrar.",
              "",
              "Emits `RegistrarAdded` if successful.",
              "",
              "## Complexity",
              "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded)."
            ]
          },
          {
            "Name": "set_identity",
            "TypeFields": [
              {
                "Name": "info",
                "TypeName": "Box<IdentityInfo<T::MaxAdditionalFields>>",
                "TypeId": 181
              }
            ],
            "Index": 1,
            "Docs": [
              "Set an account's identity information and reserve the appropriate deposit.",
              "",
              "If the account already has identity information, the deposit is taken as part payment",
              "for the new deposit.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `info`: The identity information.",
              "",
              "Emits `IdentitySet` if successful.",
              "",
              "## Complexity",
              "- `O(X + X' + R)`",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
              "  - where `R` judgements-count (registrar-count-bounded)"
            ]
          },
          {
            "Name": "set_subs",
            "TypeFields": [
              {
                "Name": "subs",
                "TypeName": "Vec<(T::AccountId, Data)>",
                "TypeId": 215
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the sub-accounts of the sender.",
              "",
              "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
              "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "identity.",
              "",
              "- `subs`: The identity's (new) sub-accounts.",
              "",
              "## Complexity",
              "- `O(P + S)`",
              "  - where `P` old-subs-count (hard- and deposit-bounded).",
              "  - where `S` subs-count (hard- and deposit-bounded)."
            ]
          },
          {
            "Name": "clear_identity",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Clear an account's identity info and all sub-accounts and return all deposits.",
              "",
              "Payment: All reserved balances on the account are returned.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "identity.",
              "",
              "Emits `IdentityCleared` if successful.",
              "",
              "## Complexity",
              "- `O(R + S + X)`",
              "  - where `R` registrar-count (governance-bounded).",
              "  - where `S` subs-count (hard- and deposit-bounded).",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
            ]
          },
          {
            "Name": "request_judgement",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 69
              },
              {
                "Name": "max_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 72
              }
            ],
            "Index": 4,
            "Docs": [
              "Request a judgement from a registrar.",
              "",
              "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
              "given.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a",
              "registered identity.",
              "",
              "- `reg_index`: The index of the registrar whose judgement is requested.",
              "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
              "",
              "```nocompile",
              "Self::registrars().get(reg_index).unwrap().fee",
              "```",
              "",
              "Emits `JudgementRequested` if successful.",
              "",
              "## Complexity",
              "- `O(R + X)`.",
              "  - where `R` registrar-count (governance-bounded).",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
            ]
          },
          {
            "Name": "cancel_request",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Cancel a previous request.",
              "",
              "Payment: A previously reserved deposit is returned on success.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a",
              "registered identity.",
              "",
              "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
              "",
              "Emits `JudgementUnrequested` if successful.",
              "",
              "## Complexity",
              "- `O(R + X)`.",
              "  - where `R` registrar-count (governance-bounded).",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
            ]
          },
          {
            "Name": "set_fee",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 69
              },
              {
                "Name": "fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 72
              }
            ],
            "Index": 6,
            "Docs": [
              "Set the fee required for a judgement to be requested from a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `fee`: the new fee.",
              "",
              "## Complexity",
              "- `O(R)`.",
              "  - where `R` registrar-count (governance-bounded)."
            ]
          },
          {
            "Name": "set_account_id",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 69
              },
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              }
            ],
            "Index": 7,
            "Docs": [
              "Change the account associated with a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `new`: the new account ID.",
              "",
              "## Complexity",
              "- `O(R)`.",
              "  - where `R` registrar-count (governance-bounded)."
            ]
          },
          {
            "Name": "set_fields",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 69
              },
              {
                "Name": "fields",
                "TypeName": "IdentityFields",
                "TypeId": 217
              }
            ],
            "Index": 8,
            "Docs": [
              "Set the field information for a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `fields`: the fields that the registrar concerns themselves with.",
              "",
              "## Complexity",
              "- `O(R)`.",
              "  - where `R` registrar-count (governance-bounded)."
            ]
          },
          {
            "Name": "provide_judgement",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 69
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "judgement",
                "TypeName": "Judgement<BalanceOf<T>>",
                "TypeId": 219
              },
              {
                "Name": "identity",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 9,
            "Docs": [
              "Provide a judgement for an account's identity.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `reg_index`.",
              "",
              "- `reg_index`: the index of the registrar whose judgement is being made.",
              "- `target`: the account whose identity the judgement is upon. This must be an account",
              "  with a registered identity.",
              "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
              "- `identity`: The hash of the [`IdentityInfo`] for that the judgement is provided.",
              "",
              "Emits `JudgementGiven` if successful.",
              "",
              "## Complexity",
              "- `O(R + X)`.",
              "  - where `R` registrar-count (governance-bounded).",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
            ]
          },
          {
            "Name": "kill_identity",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              }
            ],
            "Index": 10,
            "Docs": [
              "Remove an account's identity and sub-account information and slash the deposits.",
              "",
              "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
              "`Slash`. Verification request deposits are not returned; they should be cancelled",
              "manually using `cancel_request`.",
              "",
              "The dispatch origin for this call must match `T::ForceOrigin`.",
              "",
              "- `target`: the account whose identity the judgement is upon. This must be an account",
              "  with a registered identity.",
              "",
              "Emits `IdentityKilled` if successful.",
              "",
              "## Complexity",
              "- `O(R + S + X)`",
              "  - where `R` registrar-count (governance-bounded).",
              "  - where `S` subs-count (hard- and deposit-bounded).",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
            ]
          },
          {
            "Name": "add_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "data",
                "TypeName": "Data",
                "TypeId": 184
              }
            ],
            "Index": 11,
            "Docs": [
              "Add the given account to the sender's subs.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ]
          },
          {
            "Name": "rename_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "data",
                "TypeName": "Data",
                "TypeId": 184
              }
            ],
            "Index": 12,
            "Docs": [
              "Alter the associated name of the given sub-account.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ]
          },
          {
            "Name": "remove_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              }
            ],
            "Index": 13,
            "Docs": [
              "Remove the given account from the sender's subs.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ]
          },
          {
            "Name": "quit_sub",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Remove the sender as a sub-account.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender (*not* the original depositor).",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "super-identity.",
              "",
              "NOTE: This should not normally be used, but is provided in the case that the non-",
              "controller of an account is maliciously registered as a sub-account."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Identity pallet declaration."
        ]
      },
      "179": {
        "Variants": [
          {
            "Name": "Id",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "AccountIndex",
                "TypeId": 180
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 2
          },
          {
            "Name": "Address32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3
          },
          {
            "Name": "Address20",
            "TypeFields": [
              {
                "TypeName": "[u8; 20]",
                "TypeId": 50
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "sp_runtime",
          "multiaddress",
          "MultiAddress"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "AccountIndex",
            "TypeId": 31
          }
        ],
        "TypeDef": "Variant"
      },
      "180": {
        "TypeId": 31,
        "TypeDef": "Compact"
      },
      "181": {
        "TypeFields": [
          {
            "Name": "additional",
            "TypeName": "BoundedVec<(Data, Data), FieldLimit>",
            "TypeId": 182
          },
          {
            "Name": "display",
            "TypeName": "Data",
            "TypeId": 184
          },
          {
            "Name": "legal",
            "TypeName": "Data",
            "TypeId": 184
          },
          {
            "Name": "web",
            "TypeName": "Data",
            "TypeId": 184
          },
          {
            "Name": "riot",
            "TypeName": "Data",
            "TypeId": 184
          },
          {
            "Name": "email",
            "TypeName": "Data",
            "TypeId": 184
          },
          {
            "Name": "pgp_fingerprint",
            "TypeName": "Option<[u8; 20]>",
            "TypeId": 214
          },
          {
            "Name": "image",
            "TypeName": "Data",
            "TypeId": 184
          },
          {
            "Name": "twitter",
            "TypeName": "Data",
            "TypeId": 184
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "IdentityInfo"
        ],
        "TypeParams": [
          {
            "Name": "FieldLimit"
          }
        ],
        "TypeDef": "Composite"
      },
      "182": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 213
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 183
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "183": {
        "TypeIds": [
          184,
          184
        ],
        "TypeDef": "Tuple"
      },
      "184": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Raw0",
            "TypeFields": [
              {
                "TypeId": 185
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw1",
            "TypeFields": [
              {
                "TypeId": 186
              }
            ],
            "Index": 2
          },
          {
            "Name": "Raw2",
            "TypeFields": [
              {
                "TypeId": 187
              }
            ],
            "Index": 3
          },
          {
            "Name": "Raw3",
            "TypeFields": [
              {
                "TypeId": 188
              }
            ],
            "Index": 4
          },
          {
            "Name": "Raw4",
            "TypeFields": [
              {
                "TypeId": 16
              }
            ],
            "Index": 5
          },
          {
            "Name": "Raw5",
            "TypeFields": [
              {
                "TypeId": 189
              }
            ],
            "Index": 6
          },
          {
            "Name": "Raw6",
            "TypeFields": [
              {
                "TypeId": 190
              }
            ],
            "Index": 7
          },
          {
            "Name": "Raw7",
            "TypeFields": [
              {
                "TypeId": 191
              }
            ],
            "Index": 8
          },
          {
            "Name": "Raw8",
            "TypeFields": [
              {
                "TypeId": 84
              }
            ],
            "Index": 9
          },
          {
            "Name": "Raw9",
            "TypeFields": [
              {
                "TypeId": 192
              }
            ],
            "Index": 10
          },
          {
            "Name": "Raw10",
            "TypeFields": [
              {
                "TypeId": 193
              }
            ],
            "Index": 11
          },
          {
            "Name": "Raw11",
            "TypeFields": [
              {
                "TypeId": 194
              }
            ],
            "Index": 12
          },
          {
            "Name": "Raw12",
            "TypeFields": [
              {
                "TypeId": 195
              }
            ],
            "Index": 13
          },
          {
            "Name": "Raw13",
            "TypeFields": [
              {
                "TypeId": 196
              }
            ],
            "Index": 14
          },
          {
            "Name": "Raw14",
            "TypeFields": [
              {
                "TypeId": 197
              }
            ],
            "Index": 15
          },
          {
            "Name": "Raw15",
            "TypeFields": [
              {
                "TypeId": 198
              }
            ],
            "Index": 16
          },
          {
            "Name": "Raw16",
            "TypeFields": [
              {
                "TypeId": 85
              }
            ],
            "Index": 17
          },
          {
            "Name": "Raw17",
            "TypeFields": [
              {
                "TypeId": 199
              }
            ],
            "Index": 18
          },
          {
            "Name": "Raw18",
            "TypeFields": [
              {
                "TypeId": 200
              }
            ],
            "Index": 19
          },
          {
            "Name": "Raw19",
            "TypeFields": [
              {
                "TypeId": 201
              }
            ],
            "Index": 20
          },
          {
            "Name": "Raw20",
            "TypeFields": [
              {
                "TypeId": 50
              }
            ],
            "Index": 21
          },
          {
            "Name": "Raw21",
            "TypeFields": [
              {
                "TypeId": 202
              }
            ],
            "Index": 22
          },
          {
            "Name": "Raw22",
            "TypeFields": [
              {
                "TypeId": 203
              }
            ],
            "Index": 23
          },
          {
            "Name": "Raw23",
            "TypeFields": [
              {
                "TypeId": 204
              }
            ],
            "Index": 24
          },
          {
            "Name": "Raw24",
            "TypeFields": [
              {
                "TypeId": 205
              }
            ],
            "Index": 25
          },
          {
            "Name": "Raw25",
            "TypeFields": [
              {
                "TypeId": 206
              }
            ],
            "Index": 26
          },
          {
            "Name": "Raw26",
            "TypeFields": [
              {
                "TypeId": 207
              }
            ],
            "Index": 27
          },
          {
            "Name": "Raw27",
            "TypeFields": [
              {
                "TypeId": 208
              }
            ],
            "Index": 28
          },
          {
            "Name": "Raw28",
            "TypeFields": [
              {
                "TypeId": 209
              }
            ],
            "Index": 29
          },
          {
            "Name": "Raw29",
            "TypeFields": [
              {
                "TypeId": 210
              }
            ],
            "Index": 30
          },
          {
            "Name": "Raw30",
            "TypeFields": [
              {
                "TypeId": 211
              }
            ],
            "Index": 31
          },
          {
            "Name": "Raw31",
            "TypeFields": [
              {
                "TypeId": 212
              }
            ],
            "Index": 32
          },
          {
            "Name": "Raw32",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 33
          },
          {
            "Name": "BlakeTwo256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 34
          },
          {
            "Name": "Sha256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 35
          },
          {
            "Name": "Keccak256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 36
          },
          {
            "Name": "ShaThree256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 37
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Data"
        ],
        "TypeDef": "Variant"
      },
      "185": {
        "Length": 0,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "186": {
        "Length": 1,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "187": {
        "Length": 2,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "188": {
        "Length": 3,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "189": {
        "Length": 5,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "190": {
        "Length": 6,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "191": {
        "Length": 7,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "192": {
        "Length": 9,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "193": {
        "Length": 10,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "194": {
        "Length": 11,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "195": {
        "Length": 12,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "196": {
        "Length": 13,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "197": {
        "Length": 14,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "198": {
        "Length": 15,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "199": {
        "Length": 17,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "200": {
        "Length": 18,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "201": {
        "Length": 19,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "202": {
        "Length": 21,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "203": {
        "Length": 22,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "204": {
        "Length": 23,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "205": {
        "Length": 24,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "206": {
        "Length": 25,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "207": {
        "Length": 26,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "208": {
        "Length": 27,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "209": {
        "Length": 28,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "210": {
        "Length": 29,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "211": {
        "Length": 30,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "212": {
        "Length": 31,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "213": {
        "TypeId": 183,
        "TypeDef": "Sequence"
      },
      "214": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 50
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 50
          }
        ],
        "TypeDef": "Variant"
      },
      "215": {
        "TypeId": 216,
        "TypeDef": "Sequence"
      },
      "216": {
        "TypeIds": [
          0,
          184
        ],
        "TypeDef": "Tuple"
      },
      "217": {
        "TypeFields": [
          {
            "TypeName": "IdentityField",
            "TypeId": 10
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "BitFlags"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 218
          }
        ],
        "TypeDef": "Composite"
      },
      "218": {
        "Variants": [
          {
            "Name": "Display",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Legal",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Web",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Riot",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Email",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "PgpFingerprint",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "Image",
            "TypeFields": null,
            "Index": 64
          },
          {
            "Name": "Twitter",
            "TypeFields": null,
            "Index": 128
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "IdentityField"
        ],
        "TypeDef": "Variant"
      },
      "219": {
        "Variants": [
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "FeePaid",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "Reasonable",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "KnownGood",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "OutOfDate",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LowQuality",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Erroneous",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Judgement"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "220": {
        "Variants": [
          {
            "Name": "set",
            "TypeFields": [
              {
                "Name": "now",
                "TypeName": "T::Moment",
                "TypeId": 9
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the current time.",
              "",
              "This call should be invoked exactly once per block. It will panic at the finalization",
              "phase, if this call hasn't been invoked by that time.",
              "",
              "The timestamp should be greater than the previous one by the amount specified by",
              "`MinimumPeriod`.",
              "",
              "The dispatch origin for this call must be `Inherent`.",
              "",
              "## Complexity",
              "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
              "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
              "  `on_finalize`)",
              "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
            ]
          }
        ],
        "Path": [
          "pallet_timestamp",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "221": {
        "Variants": [
          {
            "Name": "as_multi_threshold_1",
            "TypeFields": [
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 59
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 177
              }
            ],
            "Index": 0,
            "Docs": [
              "Immediately dispatch a multi-signature call using a single approval from the caller.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `other_signatories`: The accounts (other than the sender) who are part of the",
              "multi-signature, but do not participate in the approval process.",
              "- `call`: The call to be executed.",
              "",
              "Result is equivalent to the dispatched result.",
              "",
              "## Complexity",
              "O(Z + C) where Z is the length of the call and C its execution weight."
            ]
          },
          {
            "Name": "as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 41
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 59
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<T::BlockNumber>>",
                "TypeId": 222
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 177
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 1,
            "Docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "If there are enough, then dispatch the call.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call`: The call to be executed.",
              "",
              "NOTE: Unless this is the final approval, you will generally want to use",
              "`approve_as_multi` instead, since it only requires a hash of the call.",
              "",
              "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
              "on success, result is `Ok` and the result from the interior call, if it was executed,",
              "may be found in the deposited `MultisigExecuted` event.",
              "",
              "## Complexity",
              "- `O(S + Z + Call)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- The weight of the `call`.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
            ]
          },
          {
            "Name": "approve_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 41
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 59
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<T::BlockNumber>>",
                "TypeId": 222
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 2,
            "Docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
              "",
              "## Complexity",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
            ]
          },
          {
            "Name": "cancel_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 41
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 59
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 34
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
              "for this operation will be unreserved on success.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
              "transaction for this dispatch.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "## Complexity",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- One event.",
              "- I/O: 1 read `O(S)`, one remove.",
              "- Storage: removes one item."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "222": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 34
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 34
          }
        ],
        "TypeDef": "Variant"
      },
      "223": {
        "Variants": [
          {
            "Name": "call",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 177
              },
              {
                "Name": "signer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "signature",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "nonce",
                "TypeName": "T::Index",
                "TypeId": 69
              }
            ],
            "Index": 0,
            "Docs": [
              "# <weight>",
              "- O(1).",
              "- Limited storage reads.",
              "- One DB write (event).",
              "- Weight of derivative `call` execution + read/write + 10_000.",
              "# </weight>"
            ]
          }
        ],
        "Path": [
          "pallet_custom_signatures",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "224": {
        "Variants": [
          {
            "Name": "schedule",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<T::BlockNumber>>",
                "TypeId": 225
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 177
              }
            ],
            "Index": 0,
            "Docs": [
              "Anonymously schedule a task."
            ]
          },
          {
            "Name": "cancel",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Cancel an anonymously scheduled task."
            ]
          },
          {
            "Name": "schedule_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<T::BlockNumber>>",
                "TypeId": 225
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 177
              }
            ],
            "Index": 2,
            "Docs": [
              "Schedule a named task."
            ]
          },
          {
            "Name": "cancel_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel a named scheduled task."
            ]
          },
          {
            "Name": "schedule_after",
            "TypeFields": [
              {
                "Name": "after",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<T::BlockNumber>>",
                "TypeId": 225
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 177
              }
            ],
            "Index": 4,
            "Docs": [
              "Anonymously schedule a task after a delay."
            ]
          },
          {
            "Name": "schedule_named_after",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "after",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<T::BlockNumber>>",
                "TypeId": 225
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 177
              }
            ],
            "Index": 5,
            "Docs": [
              "Schedule a named task after a delay."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "225": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 37
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 37
          }
        ],
        "TypeDef": "Variant"
      },
      "226": {
        "Variants": [
          {
            "Name": "proxy",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 227
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 177
              }
            ],
            "Index": 0,
            "Docs": [
              "Dispatch the given `call` from an account that the sender is authorised for through",
              "`add_proxy`.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
              "- `call`: The call to be made by the `real` account."
            ]
          },
          {
            "Name": "add_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 40
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Register a proxy account for the sender that is able to make calls on its behalf.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `proxy`: The account that the `caller` would like to make a proxy.",
              "- `proxy_type`: The permissions allowed for this proxy account.",
              "- `delay`: The announcement period required of the initial proxy. Will generally be",
              "zero."
            ]
          },
          {
            "Name": "remove_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 40
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Unregister a proxy account for the sender.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `proxy`: The account that the `caller` would like to remove as a proxy.",
              "- `proxy_type`: The permissions currently enabled for the removed proxy account."
            ]
          },
          {
            "Name": "remove_proxies",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Unregister all proxy accounts for the sender.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "WARNING: This may be called on accounts created by `pure`, however if done, then",
              "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
            ]
          },
          {
            "Name": "create_pure",
            "TypeFields": [
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 40
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 41
              }
            ],
            "Index": 4,
            "Docs": [
              "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
              "initialize it with a proxy of `proxy_type` for `origin` sender.",
              "",
              "Requires a `Signed` origin.",
              "",
              "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
              "new account. This will almost always be the most permissive `ProxyType` possible to",
              "allow for maximum flexibility.",
              "- `index`: A disambiguation index, in case this is called multiple times in the same",
              "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
              "want to use `0`.",
              "- `delay`: The announcement period required of the initial proxy. Will generally be",
              "zero.",
              "",
              "Fails with `Duplicate` if this has already been called in this transaction, from the",
              "same sender, with the same parameters.",
              "",
              "Fails if there are insufficient funds to pay for deposit."
            ]
          },
          {
            "Name": "kill_pure",
            "TypeFields": [
              {
                "Name": "spawner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 40
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 41
              },
              {
                "Name": "height",
                "TypeName": "T::BlockNumber",
                "TypeId": 69
              },
              {
                "Name": "ext_index",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 5,
            "Docs": [
              "Removes a previously spawned pure proxy.",
              "",
              "WARNING: **All access to this account will be lost.** Any funds held in it will be",
              "inaccessible.",
              "",
              "Requires a `Signed` origin, and the sender account must have been created by a call to",
              "`pure` with corresponding parameters.",
              "",
              "- `spawner`: The account that originally called `pure` to create this account.",
              "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
              "- `proxy_type`: The proxy type originally passed to `pure`.",
              "- `height`: The height of the chain when the call to `pure` was processed.",
              "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
              "",
              "Fails with `NoPermission` in case the caller is not a previously created pure",
              "account whose `pure` call has corresponding parameters."
            ]
          },
          {
            "Name": "announce",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 6,
            "Docs": [
              "Publish the hash of a proxy-call that will be made in the future.",
              "",
              "This must be called some number of blocks before the corresponding `proxy` is attempted",
              "if the delay associated with the proxy relationship is greater than zero.",
              "",
              "No more than `MaxPending` announcements may be made at any one time.",
              "",
              "This will take a deposit of `AnnouncementDepositFactor` as well as",
              "`AnnouncementDepositBase` if there are no other pending announcements.",
              "",
              "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `call_hash`: The hash of the call to be made by the `real` account."
            ]
          },
          {
            "Name": "remove_announcement",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 7,
            "Docs": [
              "Remove a given announcement.",
              "",
              "May be called by a proxy account to remove a call they previously announced and return",
              "the deposit.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `call_hash`: The hash of the call to be made by the `real` account."
            ]
          },
          {
            "Name": "reject_announcement",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 8,
            "Docs": [
              "Remove the given announcement of a delegate.",
              "",
              "May be called by a target (proxied) account to remove a call that one of their delegates",
              "(`delegate`) has announced they want to execute. The deposit is returned.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `delegate`: The account that previously announced the call.",
              "- `call_hash`: The hash of the call to be made."
            ]
          },
          {
            "Name": "proxy_announced",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 227
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 177
              }
            ],
            "Index": 9,
            "Docs": [
              "Dispatch the given `call` from an account that the sender is authorized for through",
              "`add_proxy`.",
              "",
              "Removes any corresponding announcement(s).",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
              "- `call`: The call to be made by the `real` account."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "227": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 40
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 40
          }
        ],
        "TypeDef": "Variant"
      },
      "228": {
        "Variants": [
          {
            "Name": "set_validation_data",
            "TypeFields": [
              {
                "Name": "data",
                "TypeName": "ParachainInherentData",
                "TypeId": 229
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the current validation data.",
              "",
              "This should be invoked exactly once per block. It will panic at the finalization",
              "phase if the call was not invoked.",
              "",
              "The dispatch origin for this call must be `Inherent`",
              "",
              "As a side effect, this function upgrades the current validation function",
              "if the appropriate time has come."
            ]
          },
          {
            "Name": "sudo_send_upward_message",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "UpwardMessage",
                "TypeId": 12
              }
            ],
            "Index": 1
          },
          {
            "Name": "authorize_upgrade",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 2
          },
          {
            "Name": "enact_authorized_upgrade",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "229": {
        "TypeFields": [
          {
            "Name": "validation_data",
            "TypeName": "PersistedValidationData",
            "TypeId": 230
          },
          {
            "Name": "relay_chain_state",
            "TypeName": "sp_trie::StorageProof",
            "TypeId": 232
          },
          {
            "Name": "downward_messages",
            "TypeName": "Vec<InboundDownwardMessage>",
            "TypeId": 234
          },
          {
            "Name": "horizontal_messages",
            "TypeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>",
            "TypeId": 236
          }
        ],
        "Path": [
          "cumulus_primitives_parachain_inherent",
          "ParachainInherentData"
        ],
        "TypeDef": "Composite"
      },
      "230": {
        "TypeFields": [
          {
            "Name": "parent_head",
            "TypeName": "HeadData",
            "TypeId": 231
          },
          {
            "Name": "relay_parent_number",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "relay_parent_storage_root",
            "TypeName": "H",
            "TypeId": 11
          },
          {
            "Name": "max_pov_size",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "PersistedValidationData"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 11
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "231": {
        "TypeFields": [
          {
            "TypeName": "Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "HeadData"
        ],
        "TypeDef": "Composite"
      },
      "232": {
        "TypeFields": [
          {
            "Name": "trie_nodes",
            "TypeName": "BTreeSet<Vec<u8>>",
            "TypeId": 233
          }
        ],
        "Path": [
          "sp_trie",
          "storage_proof",
          "StorageProof"
        ],
        "TypeDef": "Composite"
      },
      "233": {
        "TypeFields": [
          {
            "TypeId": 162
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "234": {
        "TypeId": 235,
        "TypeDef": "Sequence"
      },
      "235": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "msg",
            "TypeName": "DownwardMessage",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundDownwardMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "236": {
        "TypeFields": [
          {
            "TypeId": 239
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 63
          },
          {
            "Name": "V",
            "TypeId": 237
          }
        ],
        "TypeDef": "Composite"
      },
      "237": {
        "TypeId": 238,
        "TypeDef": "Sequence"
      },
      "238": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "sp_std::vec::Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "239": {
        "TypeId": 240,
        "TypeDef": "Sequence"
      },
      "240": {
        "TypeIds": [
          63,
          237
        ],
        "TypeDef": "Tuple"
      },
      "241": {
        "Variants": null,
        "Path": [
          "parachain_info",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "242": {
        "Variants": [
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 72
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer some liquid free balance to another account.",
              "",
              "`transfer` will set the `FreeBalance` of the sender and receiver.",
              "If the sender's account is below the existential deposit as a result",
              "of the transfer, the account will be reaped.",
              "",
              "The dispatch origin for this call must be `Signed` by the transactor.",
              "",
              "## Complexity",
              "- Dependent on arguments but not critical, given proper implementations for input config",
              "  types. See related functions below.",
              "- It contains a limited number of reads and writes internally and no complex",
              "  computation.",
              "",
              "Related functions:",
              "",
              "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
              "  - Transferring balances to accounts that did not exist before will cause",
              "    `T::OnNewAccount::on_new_account` to be called.",
              "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
              "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
              "    that the transfer will not kill the origin account."
            ]
          },
          {
            "Name": "set_balance",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 72
              },
              {
                "Name": "new_reserved",
                "TypeName": "T::Balance",
                "TypeId": 72
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the balances of a given account.",
              "",
              "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
              "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
              "If the new free or reserved balance is below the existential deposit,",
              "it will reset the account nonce (`frame_system::AccountNonce`).",
              "",
              "The dispatch origin for this call is `root`."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 72
              }
            ],
            "Index": 2,
            "Docs": [
              "Exactly as `transfer`, except the origin must be root and the source account may be",
              "specified.",
              "## Complexity",
              "- Same as transfer, but additional read and write because the source account is not",
              "  assumed to be in the overlay."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 72
              }
            ],
            "Index": 3,
            "Docs": [
              "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
              "origin account.",
              "",
              "99% of the time you want [`transfer`] instead.",
              "",
              "[`transfer`]: struct.Pallet.html#method.transfer"
            ]
          },
          {
            "Name": "transfer_all",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 51
              }
            ],
            "Index": 4,
            "Docs": [
              "Transfer the entire transferable balance from the caller account.",
              "",
              "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
              "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
              "transferred by this function. To ensure that this function results in a killed account,",
              "you might need to prepare the account by removing any reference counters, storage",
              "deposits, etc...",
              "",
              "The dispatch origin of this call must be Signed.",
              "",
              "- `dest`: The recipient of the transfer.",
              "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
              "  of the funds the account has, causing the sender account to be killed (false), or",
              "  transfer everything except at least the existential deposit, which will guarantee to",
              "  keep the sender account alive (true). ## Complexity",
              "- O(1). Just like transfer, but reading the user's transferable balance first."
            ]
          },
          {
            "Name": "force_unreserve",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Unreserve some balance from a user by force.",
              "",
              "Can only be called by ROOT."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "243": {
        "Variants": [
          {
            "Name": "vest",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Unlock any vested funds of the sender account.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
              "locked under this pallet.",
              "",
              "Emits either `VestingCompleted` or `VestingUpdated`.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "vest_other",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              }
            ],
            "Index": 1,
            "Docs": [
              "Unlock any vested funds of a `target` account.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `target`: The account whose vested funds should be unlocked. Must have funds still",
              "locked under this pallet.",
              "",
              "Emits either `VestingCompleted` or `VestingUpdated`.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "vested_transfer",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "schedule",
                "TypeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                "TypeId": 244
              }
            ],
            "Index": 2,
            "Docs": [
              "Create a vested transfer.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `target`: The account receiving the vested funds.",
              "- `schedule`: The vesting schedule attached to the transfer.",
              "",
              "Emits `VestingCreated`.",
              "",
              "NOTE: This will unlock all schedules through the current block.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "force_vested_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "schedule",
                "TypeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                "TypeId": 244
              }
            ],
            "Index": 3,
            "Docs": [
              "Force a vested transfer.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "- `source`: The account whose funds should be transferred.",
              "- `target`: The account that should be transferred the vested funds.",
              "- `schedule`: The vesting schedule attached to the transfer.",
              "",
              "Emits `VestingCreated`.",
              "",
              "NOTE: This will unlock all schedules through the current block.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "merge_schedules",
            "TypeFields": [
              {
                "Name": "schedule1_index",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "schedule2_index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
              "the highest possible start and end blocks. If both schedules have already started the",
              "current block will be used as the schedule start; with the caveat that if one schedule",
              "is finished by the current block, the other will be treated as the new merged schedule,",
              "unmodified.",
              "",
              "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
              "NOTE: This will unlock all schedules through the current block prior to merging.",
              "NOTE: If both schedules have ended by the current block, no new schedule will be created",
              "and both will be removed.",
              "",
              "Merged schedule attributes:",
              "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
              "  current_block)`.",
              "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
              "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `schedule1_index`: index of the first schedule to merge.",
              "- `schedule2_index`: index of the second schedule to merge."
            ]
          }
        ],
        "Path": [
          "pallet_vesting",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "244": {
        "TypeFields": [
          {
            "Name": "locked",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "per_block",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "starting_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_vesting",
          "vesting_info",
          "VestingInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "245": {
        "Variants": [
          {
            "Name": "register",
            "TypeFields": [
              {
                "Name": "developer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "contract_id",
                "TypeName": "T::SmartContract",
                "TypeId": 48
              }
            ],
            "Index": 0,
            "Docs": [
              "Used to register contract for dapps staking.",
              "The origin account used is treated as the `developer` account.",
              "",
              "Depending on the pallet configuration/state it is possible that developer needs to be whitelisted prior to registration.",
              "",
              "As part of this call, `RegisterDeposit` will be reserved from devs account."
            ]
          },
          {
            "Name": "unregister",
            "TypeFields": [
              {
                "Name": "contract_id",
                "TypeName": "T::SmartContract",
                "TypeId": 48
              }
            ],
            "Index": 1,
            "Docs": [
              "Unregister existing contract from dapps staking, making it ineligible for rewards from current era onwards.",
              "This must be called by the root (at the moment).",
              "",
              "Deposit is returned to the developer but existing stakers should manually call `withdraw_from_unregistered` if they wish to to unstake.",
              "",
              "**Warning**: After this action ,contract can not be registered for dapps staking again."
            ]
          },
          {
            "Name": "withdraw_from_unregistered",
            "TypeFields": [
              {
                "Name": "contract_id",
                "TypeName": "T::SmartContract",
                "TypeId": 48
              }
            ],
            "Index": 2,
            "Docs": [
              "Withdraw locked funds from a contract that was unregistered.",
              "",
              "Funds don't need to undergo the unbonding period - they are returned immediately to the staker's free balance."
            ]
          },
          {
            "Name": "bond_and_stake",
            "TypeFields": [
              {
                "Name": "contract_id",
                "TypeName": "T::SmartContract",
                "TypeId": 48
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 72
              }
            ],
            "Index": 3,
            "Docs": [
              "Lock up and stake balance of the origin account.",
              "",
              "`value` must be more than the `minimum_balance` specified by `MinimumStakingAmount`",
              "unless account already has bonded value equal or more than 'minimum_balance'.",
              "",
              "The dispatch origin for this call must be _Signed_ by the staker's account."
            ]
          },
          {
            "Name": "unbond_and_unstake",
            "TypeFields": [
              {
                "Name": "contract_id",
                "TypeName": "T::SmartContract",
                "TypeId": 48
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 72
              }
            ],
            "Index": 4,
            "Docs": [
              "Start unbonding process and unstake balance from the contract.",
              "",
              "The unstaked amount will no longer be eligible for rewards but still won't be unlocked.",
              "User needs to wait for the unbonding period to finish before being able to withdraw",
              "the funds via `withdraw_unbonded` call.",
              "",
              "In case remaining staked balance on contract is below minimum staking amount,",
              "entire stake for that contract will be unstaked."
            ]
          },
          {
            "Name": "withdraw_unbonded",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Withdraw all funds that have completed the unbonding process.",
              "",
              "If there are unbonding chunks which will be fully unbonded in future eras,",
              "they will remain and can be withdrawn later."
            ]
          },
          {
            "Name": "nomination_transfer",
            "TypeFields": [
              {
                "Name": "origin_contract_id",
                "TypeName": "T::SmartContract",
                "TypeId": 48
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 72
              },
              {
                "Name": "target_contract_id",
                "TypeName": "T::SmartContract",
                "TypeId": 48
              }
            ],
            "Index": 6,
            "Docs": [
              "Transfer nomination from one contract to another.",
              "",
              "Same rules as for `bond_and_stake` and `unbond_and_unstake` apply.",
              "Minor difference is that there is no unbonding period so this call won't",
              "check whether max number of unbonding chunks is exceeded.",
              ""
            ]
          },
          {
            "Name": "claim_staker",
            "TypeFields": [
              {
                "Name": "contract_id",
                "TypeName": "T::SmartContract",
                "TypeId": 48
              }
            ],
            "Index": 7,
            "Docs": [
              "Claim earned staker rewards for the oldest unclaimed era.",
              "In order to claim multiple eras, this call has to be called multiple times.",
              "",
              "The rewards are always added to the staker's free balance (account) but depending on the reward destination configuration,",
              "they might be immediately re-staked."
            ]
          },
          {
            "Name": "claim_dapp",
            "TypeFields": [
              {
                "Name": "contract_id",
                "TypeName": "T::SmartContract",
                "TypeId": 48
              },
              {
                "Name": "era",
                "TypeName": "EraIndex",
                "TypeId": 69
              }
            ],
            "Index": 8,
            "Docs": [
              "Claim earned dapp rewards for the specified era.",
              "",
              "Call must ensure that the specified era is eligible for reward payout and that it hasn't already been paid out for the dapp."
            ]
          },
          {
            "Name": "force_new_era",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Force a new era at the start of the next block.",
              "",
              "The dispatch origin must be Root."
            ]
          },
          {
            "Name": "maintenance_mode",
            "TypeFields": [
              {
                "Name": "enable_maintenance",
                "TypeName": "bool",
                "TypeId": 51
              }
            ],
            "Index": 10,
            "Docs": [
              "`true` will disable pallet, enabling maintenance mode. `false` will do the opposite.",
              "",
              "The dispatch origin must be Root."
            ]
          },
          {
            "Name": "set_reward_destination",
            "TypeFields": [
              {
                "Name": "reward_destination",
                "TypeName": "RewardDestination",
                "TypeId": 52
              }
            ],
            "Index": 11,
            "Docs": [
              "Used to set reward destination for staker rewards.",
              "",
              "User must be an active staker in order to use this call.",
              "This will apply to all existing unclaimed rewards."
            ]
          },
          {
            "Name": "set_contract_stake_info",
            "TypeFields": [
              {
                "Name": "contract",
                "TypeName": "T::SmartContract",
                "TypeId": 48
              },
              {
                "Name": "era",
                "TypeName": "EraIndex",
                "TypeId": 4
              },
              {
                "Name": "contract_stake_info",
                "TypeName": "ContractStakeInfo<BalanceOf<T>>",
                "TypeId": 246
              }
            ],
            "Index": 12,
            "Docs": [
              "Used to force set `ContractEraStake` storage values.",
              "The purpose of this call is only for fixing one of the issues detected with dapps-staking.",
              "",
              "The dispatch origin must be Root."
            ]
          },
          {
            "Name": "burn_stale_reward",
            "TypeFields": [
              {
                "Name": "contract_id",
                "TypeName": "T::SmartContract",
                "TypeId": 48
              },
              {
                "Name": "era",
                "TypeName": "EraIndex",
                "TypeId": 69
              }
            ],
            "Index": 13,
            "Docs": [
              "Used to burn unclaimed & stale rewards from an unregistered contract."
            ]
          }
        ],
        "Path": [
          "pallet_dapps_staking",
          "pallet",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "246": {
        "TypeFields": [
          {
            "Name": "total",
            "TypeName": "Balance",
            "TypeId": 72
          },
          {
            "Name": "number_of_stakers",
            "TypeName": "u32",
            "TypeId": 69
          },
          {
            "Name": "contract_reward_claimed",
            "TypeName": "bool",
            "TypeId": 51
          }
        ],
        "Path": [
          "pallet_dapps_staking",
          "ContractStakeInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "247": {
        "Variants": [
          {
            "Name": "set_configuration",
            "TypeFields": [
              {
                "Name": "reward_distro_params",
                "TypeName": "RewardDistributionConfig",
                "TypeId": 54
              }
            ],
            "Index": 0,
            "Docs": [
              "Sets the reward distribution configuration parameters which will be used from next block reward distribution.",
              "",
              "It is mandatory that all components of configuration sum up to one whole (**100%**),",
              "otherwise an error `InvalidDistributionConfiguration` will be raised.",
              "",
              "- `reward_distro_params` - reward distribution params",
              "",
              "Emits `DistributionConfigurationChanged` with config embeded into event itself.",
              ""
            ]
          }
        ],
        "Path": [
          "pallet_block_reward",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "248": {
        "Variants": [
          {
            "Name": "create",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              },
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "min_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Issue a new class of fungible assets from a public origin.",
              "",
              "This new asset class has no assets initially and its owner is the origin.",
              "",
              "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
              "",
              "Funds of sender are reserved by `AssetDeposit`.",
              "",
              "Parameters:",
              "- `id`: The identifier of the new asset. This must not be currently in use to identify",
              "an existing asset.",
              "- `admin`: The admin of this class of assets. The admin is the initial address of each",
              "member of the asset class's admin team.",
              "- `min_balance`: The minimum balance of this new asset that any single account must",
              "have. If an account's balance is reduced below this, then it collapses to zero.",
              "",
              "Emits `Created` event when successful.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_create",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "is_sufficient",
                "TypeName": "bool",
                "TypeId": 51
              },
              {
                "Name": "min_balance",
                "TypeName": "T::Balance",
                "TypeId": 72
              }
            ],
            "Index": 1,
            "Docs": [
              "Issue a new class of fungible assets from a privileged origin.",
              "",
              "This new asset class has no assets initially.",
              "",
              "The origin must conform to `ForceOrigin`.",
              "",
              "Unlike `create`, no funds are reserved.",
              "",
              "- `id`: The identifier of the new asset. This must not be currently in use to identify",
              "an existing asset.",
              "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
              "over this asset, but may later change and configure the permissions using",
              "`transfer_ownership` and `set_team`.",
              "- `min_balance`: The minimum balance of this new asset that any single account must",
              "have. If an account's balance is reduced below this, then it collapses to zero.",
              "",
              "Emits `ForceCreated` event when successful.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "start_destroy",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              }
            ],
            "Index": 2,
            "Docs": [
              "Start the process of destroying a fungible asset class.",
              "",
              "`start_destroy` is the first in a series of extrinsics that should be called, to allow",
              "destruction of an asset class.",
              "",
              "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset.",
              "",
              "The asset class must be frozen before calling `start_destroy`."
            ]
          },
          {
            "Name": "destroy_accounts",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              }
            ],
            "Index": 3,
            "Docs": [
              "Destroy all accounts associated with a given asset.",
              "",
              "`destroy_accounts` should only be called after `start_destroy` has been called, and the",
              "asset is in a `Destroying` state.",
              "",
              "Due to weight restrictions, this function may need to be called multiple times to fully",
              "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset.",
              "",
              "Each call emits the `Event::DestroyedAccounts` event."
            ]
          },
          {
            "Name": "destroy_approvals",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              }
            ],
            "Index": 4,
            "Docs": [
              "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).",
              "",
              "`destroy_approvals` should only be called after `start_destroy` has been called, and the",
              "asset is in a `Destroying` state.",
              "",
              "Due to weight restrictions, this function may need to be called multiple times to fully",
              "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset.",
              "",
              "Each call emits the `Event::DestroyedApprovals` event."
            ]
          },
          {
            "Name": "finish_destroy",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              }
            ],
            "Index": 5,
            "Docs": [
              "Complete destroying asset and unreserve currency.",
              "",
              "`finish_destroy` should only be called after `start_destroy` has been called, and the",
              "asset is in a `Destroying` state. All accounts or approvals should be destroyed before",
              "hand.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset.",
              "",
              "Each successful call emits the `Event::Destroyed` event."
            ]
          },
          {
            "Name": "mint",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 72
              }
            ],
            "Index": 6,
            "Docs": [
              "Mint assets of a particular class.",
              "",
              "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to have some amount minted.",
              "- `beneficiary`: The account to be credited with the minted assets.",
              "- `amount`: The amount of the asset to be minted.",
              "",
              "Emits `Issued` event when successful.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
            ]
          },
          {
            "Name": "burn",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 72
              }
            ],
            "Index": 7,
            "Docs": [
              "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
              "",
              "Origin must be Signed and the sender should be the Manager of the asset `id`.",
              "",
              "Bails with `NoAccount` if the `who` is already dead.",
              "",
              "- `id`: The identifier of the asset to have some amount burned.",
              "- `who`: The account to be debited from.",
              "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
              "",
              "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
              "minimum for the asset, then the amount burned is increased to take it to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
            ]
          },
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 72
              }
            ],
            "Index": 8,
            "Docs": [
              "Move some assets from the sender account to another.",
              "",
              "Origin must be Signed.",
              "",
              "- `id`: The identifier of the asset to have some amount transferred.",
              "- `target`: The account to be credited.",
              "- `amount`: The amount by which the sender's balance of assets should be reduced and",
              "`target`'s balance increased. The amount actually transferred may be slightly greater in",
              "the case that the transfer would otherwise take the sender balance above zero but below",
              "the minimum balance. Must be greater than zero.",
              "",
              "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
              "to below the minimum for the asset, then the amount transferred is increased to take it",
              "to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
              "`target`."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 72
              }
            ],
            "Index": 9,
            "Docs": [
              "Move some assets from the sender account to another, keeping the sender account alive.",
              "",
              "Origin must be Signed.",
              "",
              "- `id`: The identifier of the asset to have some amount transferred.",
              "- `target`: The account to be credited.",
              "- `amount`: The amount by which the sender's balance of assets should be reduced and",
              "`target`'s balance increased. The amount actually transferred may be slightly greater in",
              "the case that the transfer would otherwise take the sender balance above zero but below",
              "the minimum balance. Must be greater than zero.",
              "",
              "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
              "to below the minimum for the asset, then the amount transferred is increased to take it",
              "to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
              "`target`."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              },
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 72
              }
            ],
            "Index": 10,
            "Docs": [
              "Move some assets from one account to another.",
              "",
              "Origin must be Signed and the sender should be the Admin of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to have some amount transferred.",
              "- `source`: The account to be debited.",
              "- `dest`: The account to be credited.",
              "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
              "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
              "the case that the transfer would otherwise take the `source` balance above zero but",
              "below the minimum balance. Must be greater than zero.",
              "",
              "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
              "to below the minimum for the asset, then the amount transferred is increased to take it",
              "to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
              "`dest`."
            ]
          },
          {
            "Name": "freeze",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              }
            ],
            "Index": 11,
            "Docs": [
              "Disallow further unprivileged transfers from an account.",
              "",
              "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "- `who`: The account to be frozen.",
              "",
              "Emits `Frozen`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "thaw",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              }
            ],
            "Index": 12,
            "Docs": [
              "Allow unprivileged transfers from an account again.",
              "",
              "Origin must be Signed and the sender should be the Admin of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "- `who`: The account to be unfrozen.",
              "",
              "Emits `Thawed`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "freeze_asset",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              }
            ],
            "Index": 13,
            "Docs": [
              "Disallow further unprivileged transfers for the asset class.",
              "",
              "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "",
              "Emits `Frozen`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "thaw_asset",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              }
            ],
            "Index": 14,
            "Docs": [
              "Allow unprivileged transfers for the asset again.",
              "",
              "Origin must be Signed and the sender should be the Admin of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be thawed.",
              "",
              "Emits `Thawed`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "transfer_ownership",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              }
            ],
            "Index": 15,
            "Docs": [
              "Change the Owner of an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "- `id`: The identifier of the asset.",
              "- `owner`: The new Owner of this asset.",
              "",
              "Emits `OwnerChanged`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "set_team",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              },
              {
                "Name": "issuer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "freezer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              }
            ],
            "Index": 16,
            "Docs": [
              "Change the Issuer, Admin and Freezer of an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "- `issuer`: The new Issuer of this asset.",
              "- `admin`: The new Admin of this asset.",
              "- `freezer`: The new Freezer of this asset.",
              "",
              "Emits `TeamChanged`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "symbol",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "decimals",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 17,
            "Docs": [
              "Set the metadata for an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "Funds of sender are reserved according to the formula:",
              "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
              "account any already reserved funds.",
              "",
              "- `id`: The identifier of the asset to update.",
              "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
              "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
              "- `decimals`: The number of decimals this asset uses to represent one unit.",
              "",
              "Emits `MetadataSet`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "clear_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              }
            ],
            "Index": 18,
            "Docs": [
              "Clear the metadata for an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "Any deposit is freed for the asset owner.",
              "",
              "- `id`: The identifier of the asset to clear.",
              "",
              "Emits `MetadataCleared`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_set_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "symbol",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "decimals",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 51
              }
            ],
            "Index": 19,
            "Docs": [
              "Force the metadata for an asset to some value.",
              "",
              "Origin must be ForceOrigin.",
              "",
              "Any deposit is left alone.",
              "",
              "- `id`: The identifier of the asset to update.",
              "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
              "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
              "- `decimals`: The number of decimals this asset uses to represent one unit.",
              "",
              "Emits `MetadataSet`.",
              "",
              "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
            ]
          },
          {
            "Name": "force_clear_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              }
            ],
            "Index": 20,
            "Docs": [
              "Clear the metadata for an asset.",
              "",
              "Origin must be ForceOrigin.",
              "",
              "Any deposit is returned.",
              "",
              "- `id`: The identifier of the asset to clear.",
              "",
              "Emits `MetadataCleared`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_asset_status",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "issuer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "freezer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "min_balance",
                "TypeName": "T::Balance",
                "TypeId": 72
              },
              {
                "Name": "is_sufficient",
                "TypeName": "bool",
                "TypeId": 51
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 51
              }
            ],
            "Index": 21,
            "Docs": [
              "Alter the attributes of a given asset.",
              "",
              "Origin must be `ForceOrigin`.",
              "",
              "- `id`: The identifier of the asset.",
              "- `owner`: The new Owner of this asset.",
              "- `issuer`: The new Issuer of this asset.",
              "- `admin`: The new Admin of this asset.",
              "- `freezer`: The new Freezer of this asset.",
              "- `min_balance`: The minimum balance of this new asset that any single account must",
              "have. If an account's balance is reduced below this, then it collapses to zero.",
              "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
              "value to account for the state bloat associated with its balance storage. If set to",
              "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
              "an ED in the Balances pallet or whatever else is used to control user-account state",
              "growth).",
              "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
              "instructions.",
              "",
              "Emits `AssetStatusChanged` with the identity of the asset.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "approve_transfer",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 72
              }
            ],
            "Index": 22,
            "Docs": [
              "Approve an amount of asset for transfer by a delegated third-party account.",
              "",
              "Origin must be Signed.",
              "",
              "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
              "for the purpose of holding the approval. If some non-zero amount of assets is already",
              "approved from signing account to `delegate`, then it is topped up or unreserved to",
              "meet the right value.",
              "",
              "NOTE: The signing account does not need to own `amount` of assets at the point of",
              "making this call.",
              "",
              "- `id`: The identifier of the asset.",
              "- `delegate`: The account to delegate permission to transfer asset.",
              "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
              "already an approval in place, then this acts additively.",
              "",
              "Emits `ApprovedTransfer` on success.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "cancel_approval",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              }
            ],
            "Index": 23,
            "Docs": [
              "Cancel all of some asset approved for delegated transfer by a third-party account.",
              "",
              "Origin must be Signed and there must be an approval in place between signer and",
              "`delegate`.",
              "",
              "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
              "",
              "- `id`: The identifier of the asset.",
              "- `delegate`: The account delegated permission to transfer asset.",
              "",
              "Emits `ApprovalCancelled` on success.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_cancel_approval",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              }
            ],
            "Index": 24,
            "Docs": [
              "Cancel all of some asset approved for delegated transfer by a third-party account.",
              "",
              "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
              "account of the asset `id`.",
              "",
              "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
              "",
              "- `id`: The identifier of the asset.",
              "- `delegate`: The account delegated permission to transfer asset.",
              "",
              "Emits `ApprovalCancelled` on success.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "transfer_approved",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "destination",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 72
              }
            ],
            "Index": 25,
            "Docs": [
              "Transfer some asset balance from a previously delegated account to some third-party",
              "account.",
              "",
              "Origin must be Signed and there must be an approval in place by the `owner` to the",
              "signer.",
              "",
              "If the entire amount approved for transfer is transferred, then any deposit previously",
              "reserved by `approve_transfer` is unreserved.",
              "",
              "- `id`: The identifier of the asset.",
              "- `owner`: The account which previously approved for a transfer of at least `amount` and",
              "from which the asset balance will be withdrawn.",
              "- `destination`: The account to which the asset balance of `amount` will be transferred.",
              "- `amount`: The amount of assets to transfer.",
              "",
              "Emits `TransferredApproved` on success.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "touch",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              }
            ],
            "Index": 26,
            "Docs": [
              "Create an asset account for non-provider assets.",
              "",
              "A deposit will be taken from the signer account.",
              "",
              "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
              "  to be taken.",
              "- `id`: The identifier of the asset for the account to be created.",
              "",
              "Emits `Touched` event when successful."
            ]
          },
          {
            "Name": "refund",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 72
              },
              {
                "Name": "allow_burn",
                "TypeName": "bool",
                "TypeId": 51
              }
            ],
            "Index": 27,
            "Docs": [
              "Return the deposit (if any) of an asset account.",
              "",
              "The origin must be Signed.",
              "",
              "- `id`: The identifier of the asset for the account to be created.",
              "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
              "",
              "Emits `Refunded` event when successful."
            ]
          }
        ],
        "Path": [
          "pallet_assets",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "249": {
        "Variants": [
          {
            "Name": "set_invulnerables",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 59
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the list of invulnerable (fixed) collators."
            ]
          },
          {
            "Name": "set_desired_candidates",
            "TypeFields": [
              {
                "Name": "max",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the ideal number of collators (not including the invulnerables).",
              "If lowering this number, then the number of running collators could be higher than this figure.",
              "Aside from that edge case, there should be no other way to have more collators than the desired number."
            ]
          },
          {
            "Name": "set_candidacy_bond",
            "TypeFields": [
              {
                "Name": "bond",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the candidacy bond amount."
            ]
          },
          {
            "Name": "register_as_candidate",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Register this account as a collator candidate. The account must (a) already have",
              "registered session keys and (b) be able to reserve the `CandidacyBond`.",
              "",
              "This call is not available to `Invulnerable` collators."
            ]
          },
          {
            "Name": "leave_intent",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Deregister `origin` as a collator candidate. Note that the collator can only leave on",
              "session change. The `CandidacyBond` will be unreserved immediately.",
              "",
              "This call will fail if the total number of candidates would drop below `MinCandidates`.",
              "",
              "This call is not available to `Invulnerable` collators."
            ]
          }
        ],
        "Path": [
          "pallet_collator_selection",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "250": {
        "Variants": [
          {
            "Name": "set_keys",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "T::Keys",
                "TypeId": 251
              },
              {
                "Name": "proof",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "Sets the session key(s) of the function caller to `keys`.",
              "Allows an account to set its session key prior to becoming a validator.",
              "This doesn't take effect until the next session.",
              "",
              "The dispatch origin of this function must be signed.",
              "",
              "## Complexity",
              "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
              "  fixed."
            ]
          },
          {
            "Name": "purge_keys",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Removes any session key(s) of the function caller.",
              "",
              "This doesn't take effect until the next session.",
              "",
              "The dispatch origin of this function must be Signed and the account must be either be",
              "convertible to a validator ID using the chain's typical addressing system (this usually",
              "means being a controller account) or directly convertible into a validator ID (which",
              "usually means being a stash account).",
              "",
              "## Complexity",
              "- `O(1)` in number of key types. Actual cost depends on the number of length of",
              "  `T::Keys::key_ids()` which is fixed."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "251": {
        "TypeFields": [
          {
            "Name": "aura",
            "TypeName": "<Aura as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 252
          }
        ],
        "Path": [
          "shibuya_runtime",
          "SessionKeys"
        ],
        "TypeDef": "Composite"
      },
      "252": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 253
          }
        ],
        "Path": [
          "sp_consensus_aura",
          "sr25519",
          "app_sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "253": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "254": {
        "Variants": [
          {
            "Name": "service_overweight",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 10
              },
              {
                "Name": "weight_limit",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 0,
            "Docs": [
              "Services a single overweight XCM.",
              "",
              "- `origin`: Must pass `ExecuteOverweightOrigin`.",
              "- `index`: The index of the overweight XCM to service",
              "- `weight_limit`: The amount of weight that XCM execution may take.",
              "",
              "Errors:",
              "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map.",
              "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format.",
              "- `WeightOverLimit`: XCM execution may use greater `weight_limit`.",
              "",
              "Events:",
              "- `OverweightServiced`: On success."
            ]
          },
          {
            "Name": "suspend_xcm_execution",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
              "",
              "- `origin`: Must pass `ControllerOrigin`."
            ]
          },
          {
            "Name": "resume_xcm_execution",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Resumes all XCM executions for the XCMP queue.",
              "",
              "Note that this function doesn't change the status of the in/out bound channels.",
              "",
              "- `origin`: Must pass `ControllerOrigin`."
            ]
          },
          {
            "Name": "update_suspend_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Overwrites the number of pages of messages which must be in the queue for the other side to be told to",
              "suspend their sending.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.suspend_value`"
            ]
          },
          {
            "Name": "update_drop_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Overwrites the number of pages of messages which must be in the queue after which we drop any further",
              "messages from the channel.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.drop_threshold`"
            ]
          },
          {
            "Name": "update_resume_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Overwrites the number of pages of messages which the queue must be reduced to before it signals that",
              "message sending may recommence after it has been suspended.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.resume_threshold`"
            ]
          },
          {
            "Name": "update_threshold_weight",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 6,
            "Docs": [
              "Overwrites the amount of remaining weight under which we stop processing messages.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.threshold_weight`"
            ]
          },
          {
            "Name": "update_weight_restrict_decay",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 7,
            "Docs": [
              "Overwrites the speed to which the available weight approaches the maximum weight.",
              "A lower number results in a faster progression. A value of 1 makes the entire weight available initially.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."
            ]
          },
          {
            "Name": "update_xcmp_max_individual_weight",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 8,
            "Docs": [
              "Overwrite the maximum amount of weight any individual message may consume.",
              "Messages above this weight go into the overweight queue and may only be serviced explicitly.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "255": {
        "Variants": [
          {
            "Name": "send",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<()>>",
                "TypeId": 256
              }
            ],
            "Index": 0
          },
          {
            "Name": "teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 103
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Teleport some assets from the local chain to some destination chain.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
              "  `dest` side. May not be empty.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees."
            ]
          },
          {
            "Name": "reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 103
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer some assets from the local chain to the sovereign account of a destination",
              "chain and forward a notification XCM.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
              "  `dest` side.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees."
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<<T as SysConfig>::RuntimeCall>>",
                "TypeId": 268
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 3,
            "Docs": [
              "Execute an XCM message from a local, signed, origin.",
              "",
              "An event is deposited indicating whether `msg` could be executed completely or only",
              "partially.",
              "",
              "No more than `max_weight` will be used in its attempted execution. If this is less than the",
              "maximum amount of weight that the message could take to be executed, then no execution",
              "attempt will be made.",
              "",
              "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
              "to completion; only that *some* of it was executed."
            ]
          },
          {
            "Name": "force_xcm_version",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 66
              },
              {
                "Name": "xcm_version",
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Extoll that a particular destination can be communicated with through a particular",
              "version of XCM.",
              "",
              "- `origin`: Must be Root.",
              "- `location`: The destination that is being described.",
              "- `xcm_version`: The latest version of XCM that `location` supports."
            ]
          },
          {
            "Name": "force_default_xcm_version",
            "TypeFields": [
              {
                "Name": "maybe_xcm_version",
                "TypeName": "Option<XcmVersion>",
                "TypeId": 276
              }
            ],
            "Index": 5,
            "Docs": [
              "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
              "version a destination can accept is unknown).",
              "",
              "- `origin`: Must be Root.",
              "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
            ]
          },
          {
            "Name": "force_subscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              }
            ],
            "Index": 6,
            "Docs": [
              "Ask a location to notify us regarding their XCM version and any changes to it.",
              "",
              "- `origin`: Must be Root.",
              "- `location`: The location to which we should subscribe for XCM version notifications."
            ]
          },
          {
            "Name": "force_unsubscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              }
            ],
            "Index": 7,
            "Docs": [
              "Require that a particular destination should no longer notify us regarding any XCM",
              "version changes.",
              "",
              "- `origin`: Must be Root.",
              "- `location`: The location to which we are currently subscribed for XCM version",
              "  notifications which we no longer desire."
            ]
          },
          {
            "Name": "limited_reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 103
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 102
              }
            ],
            "Index": 8,
            "Docs": [
              "Transfer some assets from the local chain to the sovereign account of a destination",
              "chain and forward a notification XCM.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the assets send may be",
              "at risk.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
              "  `dest` side.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          },
          {
            "Name": "limited_teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 103
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 102
              }
            ],
            "Index": 9,
            "Docs": [
              "Teleport some assets from the local chain to some destination chain.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the assets send may be",
              "at risk.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
              "  `dest` side. May not be empty.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          },
          {
            "Name": "reserve_withdraw_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 103
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 200,
            "Docs": [
              "Transfer some assets from sovereign account to reserve holder chain and",
              "forward a notification XCM.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
              "  `dest` side.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees."
            ]
          },
          {
            "Name": "limited_reserve_withdraw_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 103
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 102
              }
            ],
            "Index": 201,
            "Docs": [
              "Transfer some assets from sovereign account to reserve holder chain and",
              "forward a notification XCM.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
              "  `dest` side.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "256": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Xcm<RuntimeCall>",
                "TypeId": 257
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Xcm<RuntimeCall>",
                "TypeId": 75
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "257": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<RuntimeCall>>",
            "TypeId": 258
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Composite"
      },
      "258": {
        "TypeId": 259,
        "TypeDef": "Sequence"
      },
      "259": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 104
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 104
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 104
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 260
              },
              {
                "Name": "max_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 104
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 108
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 104
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 108
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 257
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 96
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 9
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 97
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 108
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 264
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 108
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 264
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 108
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 257
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 264
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 104
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 264
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 108
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 257
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 264
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 108
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 257
              }
            ],
            "Index": 17
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 108
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 264
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 106
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 267
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 257
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 257
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 104
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 108
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "260": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 104
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 261
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 4
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "261": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 262
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 262
          }
        ],
        "TypeDef": "Variant"
      },
      "262": {
        "TypeIds": [
          4,
          263
        ],
        "TypeDef": "Tuple"
      },
      "263": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unimplemented",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UntrustedReserveLocation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UntrustedTeleportLocation",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "MultiLocationFull",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "MultiLocationNotInvertible",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLocation",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FailedToTransactAsset",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "NotWithdrawable",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "LocationCannotHold",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DestinationUnsupported",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Transport",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Unroutable",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "FailedToDecode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MaxWeightInvalid",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "NotHoldingFees",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "TooExpensive",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 21
          },
          {
            "Name": "UnhandledXcmVersion",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "WeightLimitReached",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 23
          },
          {
            "Name": "Barrier",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "WeightNotComputable",
            "TypeFields": null,
            "Index": 25
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "traits",
          "Error"
        ],
        "TypeDef": "Variant"
      },
      "264": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 104
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildMultiAsset",
                "TypeId": 265
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "265": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 107
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 266
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "WildMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "266": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "267": {
        "Variants": [
          {
            "Name": "Unlimited",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Limited",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "WeightLimit"
        ],
        "TypeDef": "Variant"
      },
      "268": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Xcm<RuntimeCall>",
                "TypeId": 269
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Xcm<RuntimeCall>",
                "TypeId": 273
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "269": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<RuntimeCall>>",
            "TypeId": 270
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Composite"
      },
      "270": {
        "TypeId": 271,
        "TypeDef": "Sequence"
      },
      "271": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 104
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 104
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 104
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 260
              },
              {
                "Name": "max_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 104
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 108
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 104
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 108
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 257
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 96
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 9
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 272
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 108
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 264
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 108
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 264
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 108
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 257
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 264
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 104
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 264
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 108
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 257
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 264
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 108
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 257
              }
            ],
            "Index": 17
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 108
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 264
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 106
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 267
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 269
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 269
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 104
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 108
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "272": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "273": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 274
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "274": {
        "TypeId": 275,
        "TypeDef": "Sequence"
      },
      "275": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 78
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 78
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 78
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 86
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "Name": "querier",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 95
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 78
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 78
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 75
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 96
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 272
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 67
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 98
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 99
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 99
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 75
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 99
              },
              {
                "Name": "want",
                "TypeName": "MultiAssets",
                "TypeId": 78
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 51
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 99
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 75
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 99
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 66
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 75
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 98
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 99
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 80
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 102
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 273
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 273
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 78
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 78
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 78
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 95
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 87
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 93
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 98
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 69
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 98
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 68
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 71
              },
              {
                "Name": "destination",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 67
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 75
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 80
              },
              {
                "Name": "unlocker",
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 80
              },
              {
                "Name": "target",
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 80
              },
              {
                "Name": "owner",
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 80
              },
              {
                "Name": "locker",
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 51
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 102
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 95
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "276": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "277": {
        "Variants": null,
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "278": {
        "Variants": [
          {
            "Name": "service_overweight",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 10
              },
              {
                "Name": "weight_limit",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 0,
            "Docs": [
              "Service a single overweight message."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "279": {
        "Variants": [
          {
            "Name": "register_asset_location",
            "TypeFields": [
              {
                "Name": "asset_location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 72
              }
            ],
            "Index": 0,
            "Docs": [
              "Register new asset location to asset Id mapping.",
              "",
              "This makes the asset eligible for XCM interaction."
            ]
          },
          {
            "Name": "set_asset_units_per_second",
            "TypeFields": [
              {
                "Name": "asset_location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "units_per_second",
                "TypeName": "u128",
                "TypeId": 72
              }
            ],
            "Index": 1,
            "Docs": [
              "Change the amount of units we are charging per execution second",
              "for a given AssetLocation."
            ]
          },
          {
            "Name": "change_existing_asset_location",
            "TypeFields": [
              {
                "Name": "new_asset_location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 72
              }
            ],
            "Index": 2,
            "Docs": [
              "Change the xcm type mapping for a given asset Id.",
              "The new asset type will inherit old `units per second` value."
            ]
          },
          {
            "Name": "remove_payment_asset",
            "TypeFields": [
              {
                "Name": "asset_location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              }
            ],
            "Index": 3,
            "Docs": [
              "Removes asset from the set of supported payment assets.",
              "",
              "The asset can still be interacted with via XCM but it cannot be used to pay for execution time."
            ]
          },
          {
            "Name": "remove_asset",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 72
              }
            ],
            "Index": 4,
            "Docs": [
              "Removes all information related to asset, removing it from XCM support."
            ]
          }
        ],
        "Path": [
          "pallet_xc_asset_config",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "280": {
        "Variants": [
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 6
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 102
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer native currencies.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multiasset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Box<VersionedMultiAsset>",
                "TypeId": 281
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 102
              }
            ],
            "Index": 1,
            "Docs": [
              "Transfer `MultiAsset`.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_with_fee",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 6
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "fee",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 102
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer native currencies specifying the fee and amount as",
              "separate.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee` is the amount to be spent to pay for execution in destination",
              "chain. Both fee and amount will be subtracted form the callers",
              "balance.",
              "",
              "If `fee` is not high enough to cover for the execution costs in the",
              "destination chain, then the assets will be trapped in the",
              "destination chain",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multiasset_with_fee",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Box<VersionedMultiAsset>",
                "TypeId": 281
              },
              {
                "Name": "fee",
                "TypeName": "Box<VersionedMultiAsset>",
                "TypeId": 281
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 102
              }
            ],
            "Index": 3,
            "Docs": [
              "Transfer `MultiAsset` specifying the fee and amount as separate.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee` is the multiasset to be spent to pay for execution in",
              "destination chain. Both fee and amount will be subtracted form the",
              "callers balance For now we only accept fee and asset having the same",
              "`MultiLocation` id.",
              "",
              "If `fee` is not high enough to cover for the execution costs in the",
              "destination chain, then the assets will be trapped in the",
              "destination chain",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multicurrencies",
            "TypeFields": [
              {
                "Name": "currencies",
                "TypeName": "Vec<(T::CurrencyId, T::Balance)>",
                "TypeId": 282
              },
              {
                "Name": "fee_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 102
              }
            ],
            "Index": 4,
            "Docs": [
              "Transfer several currencies specifying the item to be used as fee",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee_item` is index of the currencies tuple that we want to use for",
              "payment",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multiassets",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 103
              },
              {
                "Name": "fee_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 117
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 102
              }
            ],
            "Index": 5,
            "Docs": [
              "Transfer several `MultiAsset` specifying the item to be used as fee",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee_item` is index of the MultiAssets that we want to use for",
              "payment",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          }
        ],
        "Path": [
          "orml_xtokens",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "281": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiAsset",
                "TypeId": 106
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiAsset",
                "TypeId": 80
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "282": {
        "TypeId": 283,
        "TypeDef": "Sequence"
      },
      "283": {
        "TypeIds": [
          6,
          6
        ],
        "TypeDef": "Tuple"
      },
      "284": {
        "Variants": [
          {
            "Name": "withdraw",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 49
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Withdraw balance from EVM into currency/balances pallet."
            ]
          },
          {
            "Name": "call",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "H160",
                "TypeId": 49
              },
              {
                "Name": "target",
                "TypeName": "H160",
                "TypeId": 49
              },
              {
                "Name": "input",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "value",
                "TypeName": "U256",
                "TypeId": 135
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "max_fee_per_gas",
                "TypeName": "U256",
                "TypeId": 135
              },
              {
                "Name": "max_priority_fee_per_gas",
                "TypeName": "Option<U256>",
                "TypeId": 285
              },
              {
                "Name": "nonce",
                "TypeName": "Option<U256>",
                "TypeId": 285
              },
              {
                "Name": "access_list",
                "TypeName": "Vec<(H160, Vec<H256>)>",
                "TypeId": 286
              }
            ],
            "Index": 1,
            "Docs": [
              "Issue an EVM call operation. This is similar to a message call transaction in Ethereum."
            ]
          },
          {
            "Name": "create",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "H160",
                "TypeId": 49
              },
              {
                "Name": "init",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "value",
                "TypeName": "U256",
                "TypeId": 135
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "max_fee_per_gas",
                "TypeName": "U256",
                "TypeId": 135
              },
              {
                "Name": "max_priority_fee_per_gas",
                "TypeName": "Option<U256>",
                "TypeId": 285
              },
              {
                "Name": "nonce",
                "TypeName": "Option<U256>",
                "TypeId": 285
              },
              {
                "Name": "access_list",
                "TypeName": "Vec<(H160, Vec<H256>)>",
                "TypeId": 286
              }
            ],
            "Index": 2,
            "Docs": [
              "Issue an EVM create operation. This is similar to a contract creation transaction in",
              "Ethereum."
            ]
          },
          {
            "Name": "create2",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "H160",
                "TypeId": 49
              },
              {
                "Name": "init",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "salt",
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "Name": "value",
                "TypeName": "U256",
                "TypeId": 135
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "max_fee_per_gas",
                "TypeName": "U256",
                "TypeId": 135
              },
              {
                "Name": "max_priority_fee_per_gas",
                "TypeName": "Option<U256>",
                "TypeId": 285
              },
              {
                "Name": "nonce",
                "TypeName": "Option<U256>",
                "TypeId": 285
              },
              {
                "Name": "access_list",
                "TypeName": "Vec<(H160, Vec<H256>)>",
                "TypeId": 286
              }
            ],
            "Index": 3,
            "Docs": [
              "Issue an EVM create2 operation."
            ]
          }
        ],
        "Path": [
          "pallet_evm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "285": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 135
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 135
          }
        ],
        "TypeDef": "Variant"
      },
      "286": {
        "TypeId": 287,
        "TypeDef": "Sequence"
      },
      "287": {
        "TypeIds": [
          49,
          124
        ],
        "TypeDef": "Tuple"
      },
      "288": {
        "Variants": [
          {
            "Name": "transact",
            "TypeFields": [
              {
                "Name": "transaction",
                "TypeName": "Transaction",
                "TypeId": 289
              }
            ],
            "Index": 0,
            "Docs": [
              "Transact an Ethereum transaction."
            ]
          }
        ],
        "Path": [
          "pallet_ethereum",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "289": {
        "Variants": [
          {
            "Name": "Legacy",
            "TypeFields": [
              {
                "TypeName": "LegacyTransaction",
                "TypeId": 290
              }
            ],
            "Index": 0
          },
          {
            "Name": "EIP2930",
            "TypeFields": [
              {
                "TypeName": "EIP2930Transaction",
                "TypeId": 294
              }
            ],
            "Index": 1
          },
          {
            "Name": "EIP1559",
            "TypeFields": [
              {
                "TypeName": "EIP1559Transaction",
                "TypeId": 297
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "TransactionV2"
        ],
        "TypeDef": "Variant"
      },
      "290": {
        "TypeFields": [
          {
            "Name": "nonce",
            "TypeName": "U256",
            "TypeId": 135
          },
          {
            "Name": "gas_price",
            "TypeName": "U256",
            "TypeId": 135
          },
          {
            "Name": "gas_limit",
            "TypeName": "U256",
            "TypeId": 135
          },
          {
            "Name": "action",
            "TypeName": "TransactionAction",
            "TypeId": 291
          },
          {
            "Name": "value",
            "TypeName": "U256",
            "TypeId": 135
          },
          {
            "Name": "input",
            "TypeName": "Bytes",
            "TypeId": 12
          },
          {
            "Name": "signature",
            "TypeName": "TransactionSignature",
            "TypeId": 292
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "LegacyTransaction"
        ],
        "TypeDef": "Composite"
      },
      "291": {
        "Variants": [
          {
            "Name": "Call",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 49
              }
            ],
            "Index": 0
          },
          {
            "Name": "Create",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "TransactionAction"
        ],
        "TypeDef": "Variant"
      },
      "292": {
        "TypeFields": [
          {
            "Name": "v",
            "TypeName": "TransactionRecoveryId",
            "TypeId": 293
          },
          {
            "Name": "r",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "s",
            "TypeName": "H256",
            "TypeId": 11
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "TransactionSignature"
        ],
        "TypeDef": "Composite"
      },
      "293": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "TransactionRecoveryId"
        ],
        "TypeDef": "Composite"
      },
      "294": {
        "TypeFields": [
          {
            "Name": "chain_id",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "nonce",
            "TypeName": "U256",
            "TypeId": 135
          },
          {
            "Name": "gas_price",
            "TypeName": "U256",
            "TypeId": 135
          },
          {
            "Name": "gas_limit",
            "TypeName": "U256",
            "TypeId": 135
          },
          {
            "Name": "action",
            "TypeName": "TransactionAction",
            "TypeId": 291
          },
          {
            "Name": "value",
            "TypeName": "U256",
            "TypeId": 135
          },
          {
            "Name": "input",
            "TypeName": "Bytes",
            "TypeId": 12
          },
          {
            "Name": "access_list",
            "TypeName": "AccessList",
            "TypeId": 295
          },
          {
            "Name": "odd_y_parity",
            "TypeName": "bool",
            "TypeId": 51
          },
          {
            "Name": "r",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "s",
            "TypeName": "H256",
            "TypeId": 11
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "EIP2930Transaction"
        ],
        "TypeDef": "Composite"
      },
      "295": {
        "TypeId": 296,
        "TypeDef": "Sequence"
      },
      "296": {
        "TypeFields": [
          {
            "Name": "address",
            "TypeName": "Address",
            "TypeId": 49
          },
          {
            "Name": "storage_keys",
            "TypeName": "Vec<H256>",
            "TypeId": 124
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "AccessListItem"
        ],
        "TypeDef": "Composite"
      },
      "297": {
        "TypeFields": [
          {
            "Name": "chain_id",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "nonce",
            "TypeName": "U256",
            "TypeId": 135
          },
          {
            "Name": "max_priority_fee_per_gas",
            "TypeName": "U256",
            "TypeId": 135
          },
          {
            "Name": "max_fee_per_gas",
            "TypeName": "U256",
            "TypeId": 135
          },
          {
            "Name": "gas_limit",
            "TypeName": "U256",
            "TypeId": 135
          },
          {
            "Name": "action",
            "TypeName": "TransactionAction",
            "TypeId": 291
          },
          {
            "Name": "value",
            "TypeName": "U256",
            "TypeId": 135
          },
          {
            "Name": "input",
            "TypeName": "Bytes",
            "TypeId": 12
          },
          {
            "Name": "access_list",
            "TypeName": "AccessList",
            "TypeId": 295
          },
          {
            "Name": "odd_y_parity",
            "TypeName": "bool",
            "TypeId": 51
          },
          {
            "Name": "r",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "s",
            "TypeName": "H256",
            "TypeId": 11
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "EIP1559Transaction"
        ],
        "TypeDef": "Composite"
      },
      "298": {
        "Variants": [
          {
            "Name": "set_base_fee_per_gas",
            "TypeFields": [
              {
                "Name": "fee",
                "TypeName": "U256",
                "TypeId": 135
              }
            ],
            "Index": 0
          },
          {
            "Name": "set_elasticity",
            "TypeFields": [
              {
                "Name": "elasticity",
                "TypeName": "Permill",
                "TypeId": 137
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_base_fee",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "299": {
        "Variants": [
          {
            "Name": "call_old_weight",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 72
              },
              {
                "Name": "gas_limit",
                "TypeName": "OldWeight",
                "TypeId": 300
              },
              {
                "Name": "storage_deposit_limit",
                "TypeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                "TypeId": 302
              },
              {
                "Name": "data",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "Deprecated version if [`Self::call`] for use in an in-storage `Call`."
            ]
          },
          {
            "Name": "instantiate_with_code_old_weight",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 72
              },
              {
                "Name": "gas_limit",
                "TypeName": "OldWeight",
                "TypeId": 300
              },
              {
                "Name": "storage_deposit_limit",
                "TypeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                "TypeId": 302
              },
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "data",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "salt",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 1,
            "Docs": [
              "Deprecated version if [`Self::instantiate_with_code`] for use in an in-storage `Call`."
            ]
          },
          {
            "Name": "instantiate_old_weight",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 72
              },
              {
                "Name": "gas_limit",
                "TypeName": "OldWeight",
                "TypeId": 300
              },
              {
                "Name": "storage_deposit_limit",
                "TypeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                "TypeId": 302
              },
              {
                "Name": "code_hash",
                "TypeName": "CodeHash<T>",
                "TypeId": 11
              },
              {
                "Name": "data",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "salt",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "Deprecated version if [`Self::instantiate`] for use in an in-storage `Call`."
            ]
          },
          {
            "Name": "upload_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "storage_deposit_limit",
                "TypeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                "TypeId": 302
              },
              {
                "Name": "determinism",
                "TypeName": "Determinism",
                "TypeId": 303
              }
            ],
            "Index": 3,
            "Docs": [
              "Upload new `code` without instantiating a contract from it.",
              "",
              "If the code does not already exist a deposit is reserved from the caller",
              "and unreserved only when [`Self::remove_code`] is called. The size of the reserve",
              "depends on the instrumented size of the the supplied `code`.",
              "",
              "If the code already exists in storage it will still return `Ok` and upgrades",
              "the in storage version to the current",
              "[`InstructionWeights::version`](InstructionWeights).",
              "",
              "- `determinism`: If this is set to any other value but [`Determinism::Deterministic`]",
              "  then the only way to use this code is to delegate call into it from an offchain",
              "  execution. Set to [`Determinism::Deterministic`] if in doubt.",
              "",
              "# Note",
              "",
              "Anyone can instantiate a contract from any uploaded code and thus prevent its removal.",
              "To avoid this situation a constructor could employ access control so that it can",
              "only be instantiated by permissioned entities. The same is true when uploading",
              "through [`Self::instantiate_with_code`]."
            ]
          },
          {
            "Name": "remove_code",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "CodeHash<T>",
                "TypeId": 11
              }
            ],
            "Index": 4,
            "Docs": [
              "Remove the code stored under `code_hash` and refund the deposit to its owner.",
              "",
              "A code can only be removed by its original uploader (its owner) and only if it is",
              "not used by any contract."
            ]
          },
          {
            "Name": "set_code",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "code_hash",
                "TypeName": "CodeHash<T>",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Privileged function that changes the code of an existing contract.",
              "",
              "This takes care of updating refcounts and all other necessary operations. Returns",
              "an error if either the `code_hash` or `dest` do not exist.",
              "",
              "# Note",
              "",
              "This does **not** change the address of the contract in question. This means",
              "that the contract address is no longer derived from its code hash after calling",
              "this dispatchable."
            ]
          },
          {
            "Name": "call",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 72
              },
              {
                "Name": "gas_limit",
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "Name": "storage_deposit_limit",
                "TypeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                "TypeId": 302
              },
              {
                "Name": "data",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 6,
            "Docs": [
              "Makes a call to an account, optionally transferring some balance.",
              "",
              "# Parameters",
              "",
              "* `dest`: Address of the contract to call.",
              "* `value`: The balance to transfer from the `origin` to `dest`.",
              "* `gas_limit`: The gas limit enforced when executing the constructor.",
              "* `storage_deposit_limit`: The maximum amount of balance that can be charged from the",
              "  caller to pay for the storage consumed.",
              "* `data`: The input data to pass to the contract.",
              "",
              "* If the account is a smart-contract account, the associated code will be",
              "executed and any value will be transferred.",
              "* If the account is a regular account, any value will be transferred.",
              "* If no account exists and the call value is not less than `existential_deposit`,",
              "a regular account will be created and any value will be transferred."
            ]
          },
          {
            "Name": "instantiate_with_code",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 72
              },
              {
                "Name": "gas_limit",
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "Name": "storage_deposit_limit",
                "TypeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                "TypeId": 302
              },
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "data",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "salt",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 7,
            "Docs": [
              "Instantiates a new contract from the supplied `code` optionally transferring",
              "some balance.",
              "",
              "This dispatchable has the same effect as calling [`Self::upload_code`] +",
              "[`Self::instantiate`]. Bundling them together provides efficiency gains. Please",
              "also check the documentation of [`Self::upload_code`].",
              "",
              "# Parameters",
              "",
              "* `value`: The balance to transfer from the `origin` to the newly created contract.",
              "* `gas_limit`: The gas limit enforced when executing the constructor.",
              "* `storage_deposit_limit`: The maximum amount of balance that can be charged/reserved",
              "  from the caller to pay for the storage consumed.",
              "* `code`: The contract code to deploy in raw bytes.",
              "* `data`: The input data to pass to the contract constructor.",
              "* `salt`: Used for the address derivation. See [`Pallet::contract_address`].",
              "",
              "Instantiation is executed as follows:",
              "",
              "- The supplied `code` is instrumented, deployed, and a `code_hash` is created for that",
              "  code.",
              "- If the `code_hash` already exists on the chain the underlying `code` will be shared.",
              "- The destination address is computed based on the sender, code_hash and the salt.",
              "- The smart-contract account is created at the computed address.",
              "- The `value` is transferred to the new account.",
              "- The `deploy` function is executed in the context of the newly-created account."
            ]
          },
          {
            "Name": "instantiate",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 72
              },
              {
                "Name": "gas_limit",
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "Name": "storage_deposit_limit",
                "TypeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                "TypeId": 302
              },
              {
                "Name": "code_hash",
                "TypeName": "CodeHash<T>",
                "TypeId": 11
              },
              {
                "Name": "data",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "salt",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 8,
            "Docs": [
              "Instantiates a contract from a previously deployed wasm binary.",
              "",
              "This function is identical to [`Self::instantiate_with_code`] but without the",
              "code deployment step. Instead, the `code_hash` of an on-chain deployed wasm binary",
              "must be supplied."
            ]
          }
        ],
        "Path": [
          "pallet_contracts",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "300": {
        "TypeId": 301,
        "TypeDef": "Compact"
      },
      "301": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "sp_weights",
          "OldWeight"
        ],
        "TypeDef": "Composite"
      },
      "302": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 72
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 72
          }
        ],
        "TypeDef": "Variant"
      },
      "303": {
        "Variants": [
          {
            "Name": "Deterministic",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllowIndeterminism",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_contracts",
          "wasm",
          "Determinism"
        ],
        "TypeDef": "Variant"
      },
      "304": {
        "Variants": [
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 305
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 72
              }
            ],
            "Index": 0,
            "Docs": [
              "Propose a sensitive action to be taken.",
              "",
              "The dispatch origin of this call must be _Signed_ and the sender must",
              "have funds to cover the deposit.",
              "",
              "- `proposal_hash`: The hash of the proposal preimage.",
              "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
              "",
              "Emits `Proposed`."
            ]
          },
          {
            "Name": "second",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "PropIndex",
                "TypeId": 69
              }
            ],
            "Index": 1,
            "Docs": [
              "Signals agreement with a particular proposal.",
              "",
              "The dispatch origin of this call must be _Signed_ and the sender",
              "must have funds to cover the deposit, equal to the original deposit.",
              "",
              "- `proposal`: The index of the proposal to second."
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 69
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T>>",
                "TypeId": 141
              }
            ],
            "Index": 2,
            "Docs": [
              "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
              "otherwise it is a vote to keep the status quo.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `ref_index`: The index of the referendum to vote for.",
              "- `vote`: The vote configuration."
            ]
          },
          {
            "Name": "emergency_cancel",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
              "referendum.",
              "",
              "The dispatch origin of this call must be `CancellationOrigin`.",
              "",
              "-`ref_index`: The index of the referendum to cancel.",
              "",
              "Weight: `O(1)`."
            ]
          },
          {
            "Name": "external_propose",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 305
              }
            ],
            "Index": 4,
            "Docs": [
              "Schedule a referendum to be tabled once it is legal to schedule an external",
              "referendum.",
              "",
              "The dispatch origin of this call must be `ExternalOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal."
            ]
          },
          {
            "Name": "external_propose_majority",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 305
              }
            ],
            "Index": 5,
            "Docs": [
              "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
              "an external referendum.",
              "",
              "The dispatch of this call must be `ExternalMajorityOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal.",
              "",
              "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
              "pre-scheduled `external_propose` call.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "external_propose_default",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 305
              }
            ],
            "Index": 6,
            "Docs": [
              "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
              "schedule an external referendum.",
              "",
              "The dispatch of this call must be `ExternalDefaultOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal.",
              "",
              "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
              "pre-scheduled `external_propose` call.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "fast_track",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "Name": "voting_period",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Schedule the currently externally-proposed majority-carries referendum to be tabled",
              "immediately. If there is no externally-proposed referendum currently, or if there is one",
              "but it is not a majority-carries referendum then it fails.",
              "",
              "The dispatch of this call must be `FastTrackOrigin`.",
              "",
              "- `proposal_hash`: The hash of the current external proposal.",
              "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
              "\tMust be always greater than zero.",
              "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.",
              "- `delay`: The number of block after voting has ended in approval and this should be",
              "  enacted. This doesn't have a minimum amount.",
              "",
              "Emits `Started`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "veto_external",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 11
              }
            ],
            "Index": 8,
            "Docs": [
              "Veto and blacklist the external proposal hash.",
              "",
              "The dispatch origin of this call must be `VetoOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
              "",
              "Emits `Vetoed`.",
              "",
              "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
            ]
          },
          {
            "Name": "cancel_referendum",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 69
              }
            ],
            "Index": 9,
            "Docs": [
              "Remove a referendum.",
              "",
              "The dispatch origin of this call must be _Root_.",
              "",
              "- `ref_index`: The index of the referendum to cancel.",
              "",
              "# Weight: `O(1)`."
            ]
          },
          {
            "Name": "delegate",
            "TypeFields": [
              {
                "Name": "to",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "conviction",
                "TypeName": "Conviction",
                "TypeId": 307
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Delegate the voting power (with some given conviction) of the sending account.",
              "",
              "The balance delegated is locked for as long as it's delegated, and thereafter for the",
              "time appropriate for the conviction's lock period.",
              "",
              "The dispatch origin of this call must be _Signed_, and the signing account must either:",
              "  - be delegating already; or",
              "  - have no voting activity (if there is, then it will need to be removed/consolidated",
              "    through `reap_vote` or `unvote`).",
              "",
              "- `to`: The account whose voting the `target` account's voting power will follow.",
              "- `conviction`: The conviction that will be attached to the delegated votes. When the",
              "  account is undelegated, the funds will be locked for the corresponding period.",
              "- `balance`: The amount of the account's balance to be used in delegating. This must not",
              "  be more than the account's current balance.",
              "",
              "Emits `Delegated`.",
              "",
              "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
              "  voted on. Weight is charged as if maximum votes."
            ]
          },
          {
            "Name": "undelegate",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Undelegate the voting power of the sending account.",
              "",
              "Tokens may be unlocked following once an amount of time consistent with the lock period",
              "of the conviction with which the delegation was issued.",
              "",
              "The dispatch origin of this call must be _Signed_ and the signing account must be",
              "currently delegating.",
              "",
              "Emits `Undelegated`.",
              "",
              "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
              "  voted on. Weight is charged as if maximum votes."
            ]
          },
          {
            "Name": "clear_public_proposals",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Clears all public proposals.",
              "",
              "The dispatch origin of this call must be _Root_.",
              "",
              "Weight: `O(1)`."
            ]
          },
          {
            "Name": "unlock",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              }
            ],
            "Index": 13,
            "Docs": [
              "Unlock tokens that have an expired lock.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `target`: The account to remove the lock on.",
              "",
              "Weight: `O(R)` with R number of vote of target."
            ]
          },
          {
            "Name": "remove_vote",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 14,
            "Docs": [
              "Remove a vote for a referendum.",
              "",
              "If:",
              "- the referendum was cancelled, or",
              "- the referendum is ongoing, or",
              "- the referendum has ended such that",
              "  - the vote of the account was in opposition to the result; or",
              "  - there was no conviction to the account's vote; or",
              "  - the account made a split vote",
              "...then the vote is removed cleanly and a following call to `unlock` may result in more",
              "funds being available.",
              "",
              "If, however, the referendum has ended and:",
              "- it finished corresponding to the vote of the account, and",
              "- the account made a standard vote with conviction, and",
              "- the lock period of the conviction is not over",
              "...then the lock will be aggregated into the overall account's lock, which may involve",
              "*overlocking* (where the two locks are combined into a single lock that is the maximum",
              "of both the amount locked and the time is it locked for).",
              "",
              "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
              "registered for referendum `index`.",
              "",
              "- `index`: The index of referendum of the vote to be removed.",
              "",
              "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ]
          },
          {
            "Name": "remove_other_vote",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "Remove a vote for a referendum.",
              "",
              "If the `target` is equal to the signer, then this function is exactly equivalent to",
              "`remove_vote`. If not equal to the signer, then the vote must have expired,",
              "either because the referendum was cancelled, because the voter lost the referendum or",
              "because the conviction period is over.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `target`: The account of the vote to be removed; this account must have voted for",
              "  referendum `index`.",
              "- `index`: The index of referendum of the vote to be removed.",
              "",
              "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ]
          },
          {
            "Name": "blacklist",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "Name": "maybe_ref_index",
                "TypeName": "Option<ReferendumIndex>",
                "TypeId": 276
              }
            ],
            "Index": 16,
            "Docs": [
              "Permanently place a proposal into the blacklist. This prevents it from ever being",
              "proposed again.",
              "",
              "If called on a queued public or external proposal, then this will result in it being",
              "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
              "then it will be cancelled.",
              "",
              "The dispatch origin of this call must be `BlacklistOrigin`.",
              "",
              "- `proposal_hash`: The proposal hash to blacklist permanently.",
              "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
              "cancelled.",
              "",
              "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
              "  reasonable value)."
            ]
          },
          {
            "Name": "cancel_proposal",
            "TypeFields": [
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 69
              }
            ],
            "Index": 17,
            "Docs": [
              "Remove a proposal.",
              "",
              "The dispatch origin of this call must be `CancelProposalOrigin`.",
              "",
              "- `prop_index`: The index of the proposal to cancel.",
              "",
              "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 143
              },
              {
                "Name": "maybe_hash",
                "TypeName": "Option<PreimageHash>",
                "TypeId": 308
              }
            ],
            "Index": 18,
            "Docs": [
              "Set or clear a metadata of a proposal or a referendum.",
              "",
              "Parameters:",
              "- `origin`: Must correspond to the `MetadataOwner`.",
              "    - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`",
              "      threshold.",
              "    - `ExternalDefaultOrigin` for an external proposal with the `SuperMajorityAgainst`",
              "      threshold.",
              "    - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`",
              "      threshold.",
              "    - `Signed` by a creator for a public proposal.",
              "    - `Signed` to clear a metadata for a finished referendum.",
              "    - `Root` to set a metadata for an ongoing referendum.",
              "- `owner`: an identifier of a metadata owner.",
              "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "305": {
        "Variants": [
          {
            "Name": "Legacy",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "Hash",
                "TypeId": 11
              }
            ],
            "Index": 0
          },
          {
            "Name": "Inline",
            "TypeFields": [
              {
                "TypeName": "BoundedInline",
                "TypeId": 306
              }
            ],
            "Index": 1
          },
          {
            "Name": "Lookup",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "Hash",
                "TypeId": 11
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "preimages",
          "Bounded"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 177
          }
        ],
        "TypeDef": "Variant"
      },
      "306": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "307": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Locked1x",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Locked2x",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Locked3x",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Locked4x",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Locked5x",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Locked6x",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "conviction",
          "Conviction"
        ],
        "TypeDef": "Variant"
      },
      "308": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 11
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 11
          }
        ],
        "TypeDef": "Variant"
      },
      "309": {
        "Variants": [
          {
            "Name": "set_members",
            "TypeFields": [
              {
                "Name": "new_members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 59
              },
              {
                "Name": "prime",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 152
              },
              {
                "Name": "old_count",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the collective's membership.",
              "",
              "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
              "- `prime`: The prime member whose vote sets the default.",
              "- `old_count`: The upper bound for the previous number of members in storage. Used for",
              "  weight estimation.",
              "",
              "The dispatch of this call must be `SetMembersOrigin`.",
              "",
              "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
              "      the weight estimations rely on it to estimate dispatchable weight.",
              "",
              "# WARNING:",
              "",
              "The `pallet-collective` can also be managed by logic outside of the pallet through the",
              "implementation of the trait [`ChangeMembers`].",
              "Any call to `set_members` must be careful that the member set doesn't get out of sync",
              "with other logic managing the member set.",
              "",
              "## Complexity:",
              "- `O(MP + N)` where:",
              "  - `M` old-members-count (code- and governance-bounded)",
              "  - `N` new-members-count (code- and governance-bounded)",
              "  - `P` proposals-count (code-bounded)"
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 177
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 1,
            "Docs": [
              "Dispatch a proposal from a member using the `Member` origin.",
              "",
              "Origin must be a member of the collective.",
              "",
              "## Complexity:",
              "- `O(B + M + P)` where:",
              "- `B` is `proposal` size in bytes (length-fee-bounded)",
              "- `M` members-count (code-bounded)",
              "- `P` complexity of dispatching `proposal`"
            ]
          },
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 69
              },
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 177
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 2,
            "Docs": [
              "Add a new proposal to either be voted on or executed directly.",
              "",
              "Requires the sender to be member.",
              "",
              "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
              "or put up for voting.",
              "",
              "## Complexity",
              "- `O(B + M + P1)` or `O(B + M + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - branching is influenced by `threshold` where:",
              "    - `P1` is proposal execution complexity (`threshold < 2`)",
              "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 69
              },
              {
                "Name": "approve",
                "TypeName": "bool",
                "TypeId": 51
              }
            ],
            "Index": 3,
            "Docs": [
              "Add an aye or nay vote for the sender to the given proposal.",
              "",
              "Requires the sender to be a member.",
              "",
              "Transaction fees will be waived if the member is voting on any particular proposal",
              "for the first time and the call is successful. Subsequent vote changes will charge a",
              "fee.",
              "## Complexity",
              "- `O(M)` where `M` is members-count (code- and governance-bounded)"
            ]
          },
          {
            "Name": "close_old_weight",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 69
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "OldWeight",
                "TypeId": 300
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 4,
            "Docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
              "",
              "## Complexity",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)"
            ]
          },
          {
            "Name": "disapprove_proposal",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Disapprove a proposal, close, and remove it from the system, regardless of its current",
              "state.",
              "",
              "Must be called by the Root origin.",
              "",
              "Parameters:",
              "* `proposal_hash`: The hash of the proposal that should be disapproved.",
              "",
              "## Complexity",
              "O(P) where P is the number of max proposals"
            ]
          },
          {
            "Name": "close",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 69
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 6,
            "Docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
              "",
              "## Complexity",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)"
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "310": {
        "Variants": [
          {
            "Name": "set_members",
            "TypeFields": [
              {
                "Name": "new_members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 59
              },
              {
                "Name": "prime",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 152
              },
              {
                "Name": "old_count",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the collective's membership.",
              "",
              "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
              "- `prime`: The prime member whose vote sets the default.",
              "- `old_count`: The upper bound for the previous number of members in storage. Used for",
              "  weight estimation.",
              "",
              "The dispatch of this call must be `SetMembersOrigin`.",
              "",
              "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
              "      the weight estimations rely on it to estimate dispatchable weight.",
              "",
              "# WARNING:",
              "",
              "The `pallet-collective` can also be managed by logic outside of the pallet through the",
              "implementation of the trait [`ChangeMembers`].",
              "Any call to `set_members` must be careful that the member set doesn't get out of sync",
              "with other logic managing the member set.",
              "",
              "## Complexity:",
              "- `O(MP + N)` where:",
              "  - `M` old-members-count (code- and governance-bounded)",
              "  - `N` new-members-count (code- and governance-bounded)",
              "  - `P` proposals-count (code-bounded)"
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 177
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 1,
            "Docs": [
              "Dispatch a proposal from a member using the `Member` origin.",
              "",
              "Origin must be a member of the collective.",
              "",
              "## Complexity:",
              "- `O(B + M + P)` where:",
              "- `B` is `proposal` size in bytes (length-fee-bounded)",
              "- `M` members-count (code-bounded)",
              "- `P` complexity of dispatching `proposal`"
            ]
          },
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 69
              },
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 177
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 2,
            "Docs": [
              "Add a new proposal to either be voted on or executed directly.",
              "",
              "Requires the sender to be member.",
              "",
              "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
              "or put up for voting.",
              "",
              "## Complexity",
              "- `O(B + M + P1)` or `O(B + M + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - branching is influenced by `threshold` where:",
              "    - `P1` is proposal execution complexity (`threshold < 2`)",
              "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 69
              },
              {
                "Name": "approve",
                "TypeName": "bool",
                "TypeId": 51
              }
            ],
            "Index": 3,
            "Docs": [
              "Add an aye or nay vote for the sender to the given proposal.",
              "",
              "Requires the sender to be a member.",
              "",
              "Transaction fees will be waived if the member is voting on any particular proposal",
              "for the first time and the call is successful. Subsequent vote changes will charge a",
              "fee.",
              "## Complexity",
              "- `O(M)` where `M` is members-count (code- and governance-bounded)"
            ]
          },
          {
            "Name": "close_old_weight",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 69
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "OldWeight",
                "TypeId": 300
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 4,
            "Docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
              "",
              "## Complexity",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)"
            ]
          },
          {
            "Name": "disapprove_proposal",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Disapprove a proposal, close, and remove it from the system, regardless of its current",
              "state.",
              "",
              "Must be called by the Root origin.",
              "",
              "Parameters:",
              "* `proposal_hash`: The hash of the proposal that should be disapproved.",
              "",
              "## Complexity",
              "O(P) where P is the number of max proposals"
            ]
          },
          {
            "Name": "close",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 69
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 69
              }
            ],
            "Index": 6,
            "Docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
              "",
              "## Complexity",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)"
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "311": {
        "Variants": [
          {
            "Name": "propose_spend",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 72
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              }
            ],
            "Index": 0,
            "Docs": [
              "Put forward a suggestion for spending. A deposit proportional to the value",
              "is reserved and slashed if the proposal is rejected. It is returned once the",
              "proposal is awarded.",
              "",
              "## Complexity",
              "- O(1)"
            ]
          },
          {
            "Name": "reject_proposal",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 69
              }
            ],
            "Index": 1,
            "Docs": [
              "Reject a proposed spend. The original deposit will be slashed.",
              "",
              "May only be called from `T::RejectOrigin`.",
              "",
              "## Complexity",
              "- O(1)"
            ]
          },
          {
            "Name": "approve_proposal",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 69
              }
            ],
            "Index": 2,
            "Docs": [
              "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
              "and the original deposit will be returned.",
              "",
              "May only be called from `T::ApproveOrigin`.",
              "",
              "## Complexity",
              " - O(1)."
            ]
          },
          {
            "Name": "spend",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 72
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              }
            ],
            "Index": 3,
            "Docs": [
              "Propose and approve a spend of treasury funds.",
              "",
              "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.",
              "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
              "- `beneficiary`: The destination account for the transfer.",
              "",
              "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
              "beneficiary."
            ]
          },
          {
            "Name": "remove_approval",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 69
              }
            ],
            "Index": 4,
            "Docs": [
              "Force a previously approved proposal to be removed from the approval queue.",
              "The original deposit will no longer be returned.",
              "",
              "May only be called from `T::RejectOrigin`.",
              "- `proposal_id`: The index of a proposal",
              "",
              "## Complexity",
              "- O(A) where `A` is the number of approvals",
              "",
              "Errors:",
              "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,",
              "i.e., the proposal has not been approved. This could also mean the proposal does not",
              "exist altogether, thus there is no way it would have been approved in the first place."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "312": {
        "Variants": [
          {
            "Name": "note_preimage",
            "TypeFields": [
              {
                "Name": "bytes",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "Register a preimage on-chain.",
              "",
              "If the preimage was previously requested, no fees or deposits are taken for providing",
              "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
            ]
          },
          {
            "Name": "unnote_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 1,
            "Docs": [
              "Clear an unrequested preimage from the runtime storage.",
              "",
              "If `len` is provided, then it will be a much cheaper operation.",
              "",
              "- `hash`: The hash of the preimage to be removed from the store.",
              "- `len`: The length of the preimage of `hash`."
            ]
          },
          {
            "Name": "request_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "Request a preimage be uploaded to the chain without paying any fees or deposits.",
              "",
              "If the preimage requests has already been provided on-chain, we unreserve any deposit",
              "a user may have paid, and take the control of the preimage out of their hands."
            ]
          },
          {
            "Name": "unrequest_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 3,
            "Docs": [
              "Clear a previously made request for a preimage.",
              "",
              "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "313": {
        "Variants": [
          {
            "Name": "xvm_call",
            "TypeFields": [
              {
                "Name": "context",
                "TypeName": "XvmContext",
                "TypeId": 314
              },
              {
                "Name": "to",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "input",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0
          },
          {
            "Name": "xvm_send",
            "TypeFields": [
              {
                "Name": "context",
                "TypeName": "XvmContext",
                "TypeId": 314
              },
              {
                "Name": "to",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "message",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 1
          },
          {
            "Name": "xvm_query",
            "TypeFields": [
              {
                "Name": "context",
                "TypeName": "XvmContext",
                "TypeId": 314
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_xvm",
          "pallet",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "314": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "VmId",
            "TypeId": 2
          },
          {
            "Name": "max_weight",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "env",
            "TypeName": "Option<Vec<u8>>",
            "TypeId": 315
          }
        ],
        "Path": [
          "pallet_xvm",
          "XvmContext"
        ],
        "TypeDef": "Composite"
      },
      "315": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 12
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          }
        ],
        "TypeDef": "Variant"
      },
      "316": {
        "Variants": [
          {
            "Name": "sudo",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 177
              }
            ],
            "Index": 0,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Root` origin.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "sudo_unchecked_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 177
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 1,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Root` origin.",
              "This function does not check the weight of the call, and instead allows the",
              "Sudo user to specify the weight of the call.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "set_key",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              }
            ],
            "Index": 2,
            "Docs": [
              "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
              "key.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "sudo_as",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 179
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 177
              }
            ],
            "Index": 3,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
              "a given account.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "317": {
        "Variants": [
          {
            "Name": "control_auto_migration",
            "TypeFields": [
              {
                "Name": "maybe_config",
                "TypeName": "Option<MigrationLimits>",
                "TypeId": 318
              }
            ],
            "Index": 0,
            "Docs": [
              "Control the automatic migration.",
              "",
              "The dispatch origin of this call must be [`Config::ControlOrigin`]."
            ]
          },
          {
            "Name": "continue_migrate",
            "TypeFields": [
              {
                "Name": "limits",
                "TypeName": "MigrationLimits",
                "TypeId": 319
              },
              {
                "Name": "real_size_upper",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "witness_task",
                "TypeName": "MigrationTask<T>",
                "TypeId": 320
              }
            ],
            "Index": 1,
            "Docs": [
              "Continue the migration for the given `limits`.",
              "",
              "The dispatch origin of this call can be any signed account.",
              "",
              "This transaction has NO MONETARY INCENTIVES. calling it will not reward anyone. Albeit,",
              "Upon successful execution, the transaction fee is returned.",
              "",
              "The (potentially over-estimated) of the byte length of all the data read must be",
              "provided for up-front fee-payment and weighing. In essence, the caller is guaranteeing",
              "that executing the current `MigrationTask` with the given `limits` will not exceed",
              "`real_size_upper` bytes of read data.",
              "",
              "The `witness_task` is merely a helper to prevent the caller from being slashed or",
              "generally trigger a migration that they do not intend. This parameter is just a message",
              "from caller, saying that they believed `witness_task` was the last state of the",
              "migration, and they only wish for their transaction to do anything, if this assumption",
              "holds. In case `witness_task` does not match, the transaction fails.",
              "",
              "Based on the documentation of [`MigrationTask::migrate_until_exhaustion`], the",
              "recommended way of doing this is to pass a `limit` that only bounds `count`, as the",
              "`size` limit can always be overwritten."
            ]
          },
          {
            "Name": "migrate_custom_top",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "Vec<Vec<u8>>",
                "TypeId": 162
              },
              {
                "Name": "witness_size",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Migrate the list of top keys by iterating each of them one by one.",
              "",
              "This does not affect the global migration process tracker ([`MigrationProcess`]), and",
              "should only be used in case any keys are leftover due to a bug."
            ]
          },
          {
            "Name": "migrate_custom_child",
            "TypeFields": [
              {
                "Name": "root",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "child_keys",
                "TypeName": "Vec<Vec<u8>>",
                "TypeId": 162
              },
              {
                "Name": "total_size",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Migrate the list of child keys by iterating each of them one by one.",
              "",
              "All of the given child keys must be present under one `child_root`.",
              "",
              "This does not affect the global migration process tracker ([`MigrationProcess`]), and",
              "should only be used in case any keys are leftover due to a bug."
            ]
          },
          {
            "Name": "set_signed_max_limits",
            "TypeFields": [
              {
                "Name": "limits",
                "TypeName": "MigrationLimits",
                "TypeId": 319
              }
            ],
            "Index": 4,
            "Docs": [
              "Set the maximum limit of the signed migration."
            ]
          },
          {
            "Name": "force_set_progress",
            "TypeFields": [
              {
                "Name": "progress_top",
                "TypeName": "ProgressOf<T>",
                "TypeId": 321
              },
              {
                "Name": "progress_child",
                "TypeName": "ProgressOf<T>",
                "TypeId": 321
              }
            ],
            "Index": 5,
            "Docs": [
              "Forcefully set the progress the running migration.",
              "",
              "This is only useful in one case: the next key to migrate is too big to be migrated with",
              "a signed account, in a parachain context, and we simply want to skip it. A reasonable",
              "example of this would be `:code:`, which is both very expensive to migrate, and commonly",
              "used, so probably it is already migrated.",
              "",
              "In case you mess things up, you can also, in principle, use this to reset the migration",
              "process."
            ]
          }
        ],
        "Path": [
          "pallet_state_trie_migration",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "318": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 319
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 319
          }
        ],
        "TypeDef": "Variant"
      },
      "319": {
        "TypeFields": [
          {
            "Name": "size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "item",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_state_trie_migration",
          "pallet",
          "MigrationLimits"
        ],
        "TypeDef": "Composite"
      },
      "320": {
        "TypeFields": [
          {
            "Name": "progress_top",
            "TypeName": "ProgressOf<T>",
            "TypeId": 321
          },
          {
            "Name": "progress_child",
            "TypeName": "ProgressOf<T>",
            "TypeId": 321
          },
          {
            "Name": "size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "top_items",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "child_items",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_state_trie_migration",
          "pallet",
          "MigrationTask"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "321": {
        "Variants": [
          {
            "Name": "ToStart",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "LastKey",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<u8, MaxKeyLen>",
                "TypeId": 322
              }
            ],
            "Index": 1
          },
          {
            "Name": "Complete",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_state_trie_migration",
          "pallet",
          "Progress"
        ],
        "TypeParams": [
          {
            "Name": "MaxKeyLen"
          }
        ],
        "TypeDef": "Variant"
      },
      "322": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "323": {
        "Variants": [
          {
            "Name": "system",
            "TypeFields": [
              {
                "TypeName": "frame_system::Origin<Runtime>",
                "TypeId": 324
              }
            ],
            "Index": 10
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm::Origin",
                "TypeId": 325
              }
            ],
            "Index": 51
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcm::Origin",
                "TypeId": 326
              }
            ],
            "Index": 52
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "TypeName": "pallet_ethereum::Origin",
                "TypeId": 327
              }
            ],
            "Index": 61
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                "TypeId": 328
              }
            ],
            "Index": 81
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>",
                "TypeId": 329
              }
            ],
            "Index": 82
          },
          {
            "Name": "Void",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                "TypeId": 330
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "shibuya_runtime",
          "OriginCaller"
        ],
        "TypeDef": "Variant"
      },
      "324": {
        "Variants": [
          {
            "Name": "Root",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Signed",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "325": {
        "Variants": [
          {
            "Name": "Xcm",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 0
          },
          {
            "Name": "Response",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 66
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "326": {
        "Variants": [
          {
            "Name": "Relay",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SiblingParachain",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 63
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "327": {
        "Variants": [
          {
            "Name": "EthereumTransaction",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 49
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "pallet_ethereum",
          "RawOrigin"
        ],
        "TypeDef": "Variant"
      },
      "328": {
        "Variants": [
          {
            "Name": "Members",
            "TypeFields": [
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Member",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "_Phantom",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_collective",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant"
      },
      "329": {
        "Variants": [
          {
            "Name": "Members",
            "TypeFields": [
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Member",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "_Phantom",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_collective",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant"
      },
      "330": {
        "Variants": null,
        "Path": [
          "sp_core",
          "Void"
        ],
        "TypeDef": "Variant"
      },
      "331": {
        "Variants": [
          {
            "Name": "TooManyCalls",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many calls batched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "332": {
        "TypeFields": [
          {
            "Name": "judgements",
            "TypeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
            "TypeId": 333
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "info",
            "TypeName": "IdentityInfo<MaxAdditionalFields>",
            "TypeId": 181
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Registration"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "MaxJudgements"
          },
          {
            "Name": "MaxAdditionalFields"
          }
        ],
        "TypeDef": "Composite"
      },
      "333": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 335
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 334
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "334": {
        "TypeIds": [
          4,
          219
        ],
        "TypeDef": "Tuple"
      },
      "335": {
        "TypeId": 334,
        "TypeDef": "Sequence"
      },
      "336": {
        "TypeIds": [
          6,
          337
        ],
        "TypeDef": "Tuple"
      },
      "337": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 59
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "338": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 341
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 339
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "339": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 340
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 340
          }
        ],
        "TypeDef": "Variant"
      },
      "340": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "fee",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "fields",
            "TypeName": "IdentityFields",
            "TypeId": 217
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "RegistrarInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "341": {
        "TypeId": 339,
        "TypeDef": "Sequence"
      },
      "342": {
        "Variants": [
          {
            "Name": "TooManySubAccounts",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many subs-accounts."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account isn't found."
            ]
          },
          {
            "Name": "NotNamed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Account isn't named."
            ]
          },
          {
            "Name": "EmptyIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Empty index."
            ]
          },
          {
            "Name": "FeeChanged",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Fee is changed."
            ]
          },
          {
            "Name": "NoIdentity",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No identity found."
            ]
          },
          {
            "Name": "StickyJudgement",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Sticky judgement."
            ]
          },
          {
            "Name": "JudgementGiven",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Judgement given."
            ]
          },
          {
            "Name": "InvalidJudgement",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Invalid judgement."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The index is invalid."
            ]
          },
          {
            "Name": "InvalidTarget",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The target is invalid."
            ]
          },
          {
            "Name": "TooManyFields",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Too many additional fields."
            ]
          },
          {
            "Name": "TooManyRegistrars",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Maximum amount of registrars reached. Cannot add any more."
            ]
          },
          {
            "Name": "AlreadyClaimed",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Account ID is already named."
            ]
          },
          {
            "Name": "NotSub",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Sender is not a sub-account."
            ]
          },
          {
            "Name": "NotOwned",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Sub-account isn't owned by sender."
            ]
          },
          {
            "Name": "JudgementForDifferentIdentity",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The provided judgement was for a different identity."
            ]
          },
          {
            "Name": "JudgementPaymentFailed",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Error that occurs when there is an issue paying for judgement."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "343": {
        "TypeIds": [
          0,
          1
        ],
        "TypeDef": "Tuple"
      },
      "344": {
        "TypeFields": [
          {
            "Name": "when",
            "TypeName": "Timepoint<BlockNumber>",
            "TypeId": 34
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "depositor",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "approvals",
            "TypeName": "BoundedVec<AccountId, MaxApprovals>",
            "TypeId": 345
          }
        ],
        "Path": [
          "pallet_multisig",
          "Multisig"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "MaxApprovals"
          }
        ],
        "TypeDef": "Composite"
      },
      "345": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 59
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "346": {
        "Variants": [
          {
            "Name": "MinimumThreshold",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Threshold must be 2 or greater."
            ]
          },
          {
            "Name": "AlreadyApproved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Call is already approved by this signatory."
            ]
          },
          {
            "Name": "NoApprovalsNeeded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Call doesn't need any (more) approvals."
            ]
          },
          {
            "Name": "TooFewSignatories",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are too few signatories in the list."
            ]
          },
          {
            "Name": "TooManySignatories",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There are too many signatories in the list."
            ]
          },
          {
            "Name": "SignatoriesOutOfOrder",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The signatories were provided out of order; they should be ordered."
            ]
          },
          {
            "Name": "SenderInSignatories",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The sender was contained in the other signatories; it shouldn't be."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Multisig operation not found when attempting to cancel."
            ]
          },
          {
            "Name": "NotOwner",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Only the account that originally created the multisig is able to cancel it."
            ]
          },
          {
            "Name": "NoTimepoint",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "No timepoint was given, yet the multisig operation is already underway."
            ]
          },
          {
            "Name": "WrongTimepoint",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "A different timepoint was given to the multisig operation that is underway."
            ]
          },
          {
            "Name": "UnexpectedTimepoint",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "A timepoint was given, yet no multisig operation is underway."
            ]
          },
          {
            "Name": "MaxWeightTooLow",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The maximum weight information provided was too low."
            ]
          },
          {
            "Name": "AlreadyStored",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The data to be stored is already stored."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "347": {
        "Variants": [
          {
            "Name": "DecodeFailure",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Signature decode fails."
            ]
          },
          {
            "Name": "InvalidSignature",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Signature and account mismatched."
            ]
          },
          {
            "Name": "BadNonce",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Bad nonce parameter."
            ]
          }
        ],
        "Path": [
          "pallet_custom_signatures",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "348": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 124
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 11
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "349": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 352
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 350
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "350": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 351
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 351
          }
        ],
        "TypeDef": "Variant"
      },
      "351": {
        "TypeFields": [
          {
            "Name": "maybe_id",
            "TypeName": "Option<Name>",
            "TypeId": 38
          },
          {
            "Name": "priority",
            "TypeName": "schedule::Priority",
            "TypeId": 2
          },
          {
            "Name": "call",
            "TypeName": "Call",
            "TypeId": 305
          },
          {
            "Name": "maybe_periodic",
            "TypeName": "Option<schedule::Period<BlockNumber>>",
            "TypeId": 225
          },
          {
            "Name": "origin",
            "TypeName": "PalletsOrigin",
            "TypeId": 323
          }
        ],
        "Path": [
          "pallet_scheduler",
          "Scheduled"
        ],
        "TypeParams": [
          {
            "Name": "Name",
            "TypeId": 1
          },
          {
            "Name": "Call",
            "TypeId": 305
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PalletsOrigin",
            "TypeId": 323
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "352": {
        "TypeId": 350,
        "TypeDef": "Sequence"
      },
      "353": {
        "Variants": [
          {
            "Name": "FailedToSchedule",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Failed to schedule a call"
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Cannot find the scheduled call."
            ]
          },
          {
            "Name": "TargetBlockNumberInPast",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Given target block number is in the past."
            ]
          },
          {
            "Name": "RescheduleNoChange",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Reschedule failed because it does not change scheduled time."
            ]
          },
          {
            "Name": "Named",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Attempt to use a non-named function on a named task."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "354": {
        "TypeIds": [
          355,
          6
        ],
        "TypeDef": "Tuple"
      },
      "355": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 357
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 356
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "356": {
        "TypeFields": [
          {
            "Name": "delegate",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "proxy_type",
            "TypeName": "ProxyType",
            "TypeId": 40
          },
          {
            "Name": "delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "ProxyDefinition"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ProxyType",
            "TypeId": 40
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "357": {
        "TypeId": 356,
        "TypeDef": "Sequence"
      },
      "358": {
        "TypeIds": [
          359,
          6
        ],
        "TypeDef": "Tuple"
      },
      "359": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 361
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 360
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "360": {
        "TypeFields": [
          {
            "Name": "real",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "call_hash",
            "TypeName": "Hash",
            "TypeId": 11
          },
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "Announcement"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Hash",
            "TypeId": 11
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "361": {
        "TypeId": 360,
        "TypeDef": "Sequence"
      },
      "362": {
        "Variants": [
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "There are too many proxies registered or too many announcements pending."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Proxy registration not found."
            ]
          },
          {
            "Name": "NotProxy",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Sender is not a proxy of the account to be proxied."
            ]
          },
          {
            "Name": "Unproxyable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A call which is incompatible with the proxy type's filter was attempted."
            ]
          },
          {
            "Name": "Duplicate",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Account is already a proxy."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Call may not be made by proxy because it may escalate its privileges."
            ]
          },
          {
            "Name": "Unannounced",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Announcement, if made at all, was made too recently."
            ]
          },
          {
            "Name": "NoSelfProxy",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Cannot add self as proxy."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "363": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 364
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 364
          }
        ],
        "TypeDef": "Variant"
      },
      "364": {
        "Variants": [
          {
            "Name": "Present",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "UpgradeRestriction"
        ],
        "TypeDef": "Variant"
      },
      "365": {
        "TypeFields": [
          {
            "Name": "dmq_mqc_head",
            "TypeName": "relay_chain::Hash",
            "TypeId": 11
          },
          {
            "Name": "relay_dispatch_queue_size",
            "TypeName": "(u32, u32)",
            "TypeId": 37
          },
          {
            "Name": "ingress_channels",
            "TypeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
            "TypeId": 366
          },
          {
            "Name": "egress_channels",
            "TypeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
            "TypeId": 366
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "relay_state_snapshot",
          "MessagingStateSnapshot"
        ],
        "TypeDef": "Composite"
      },
      "366": {
        "TypeId": 367,
        "TypeDef": "Sequence"
      },
      "367": {
        "TypeIds": [
          63,
          368
        ],
        "TypeDef": "Tuple"
      },
      "368": {
        "TypeFields": [
          {
            "Name": "max_capacity",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_total_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_message_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "msg_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "total_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "mqc_head",
            "TypeName": "Option<Hash>",
            "TypeId": 308
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "AbridgedHrmpChannel"
        ],
        "TypeDef": "Composite"
      },
      "369": {
        "TypeFields": [
          {
            "Name": "max_code_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_head_data_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_queue_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_queue_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_message_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_max_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "validation_upgrade_cooldown",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "validation_upgrade_delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "AbridgedHostConfiguration"
        ],
        "TypeDef": "Composite"
      },
      "370": {
        "TypeFields": [
          {
            "TypeName": "RelayHash",
            "TypeId": 11
          }
        ],
        "Path": [
          "cumulus_primitives_parachain_inherent",
          "MessageQueueChain"
        ],
        "TypeDef": "Composite"
      },
      "371": {
        "TypeFields": [
          {
            "TypeId": 372
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 63
          },
          {
            "Name": "V",
            "TypeId": 370
          }
        ],
        "TypeDef": "Composite"
      },
      "372": {
        "TypeId": 373,
        "TypeDef": "Sequence"
      },
      "373": {
        "TypeIds": [
          63,
          370
        ],
        "TypeDef": "Tuple"
      },
      "374": {
        "TypeId": 375,
        "TypeDef": "Sequence"
      },
      "375": {
        "TypeFields": [
          {
            "Name": "recipient",
            "TypeName": "Id",
            "TypeId": 63
          },
          {
            "Name": "data",
            "TypeName": "sp_std::vec::Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "OutboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 63
          }
        ],
        "TypeDef": "Composite"
      },
      "376": {
        "Variants": [
          {
            "Name": "OverlappingUpgrades",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Attempt to upgrade validation function while existing upgrade pending"
            ]
          },
          {
            "Name": "ProhibitedByPolkadot",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Polkadot currently prohibits this parachain from upgrading its validation function"
            ]
          },
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The supplied validation function has compiled into a blob larger than Polkadot is",
              "willing to run"
            ]
          },
          {
            "Name": "ValidationDataNotAvailable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The inherent which supplies the validation data did not run this block"
            ]
          },
          {
            "Name": "HostConfigurationNotAvailable",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The inherent which supplies the host configuration did not run this block"
            ]
          },
          {
            "Name": "NotScheduled",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No validation function upgrade is currently scheduled."
            ]
          },
          {
            "Name": "NothingAuthorized",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "No code upgrade has been authorized."
            ]
          },
          {
            "Name": "Unauthorized",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The given code upgrade has not been authorized."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "377": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "sp_arithmetic",
          "fixed_point",
          "FixedU128"
        ],
        "TypeDef": "Composite"
      },
      "378": {
        "Variants": [
          {
            "Name": "V1Ancient",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V2",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "379": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 382
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 380
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "380": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "LockIdentifier",
            "TypeId": 84
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reasons",
            "TypeName": "Reasons",
            "TypeId": 381
          }
        ],
        "Path": [
          "pallet_balances",
          "BalanceLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "381": {
        "Variants": [
          {
            "Name": "Fee",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Misc",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_balances",
          "Reasons"
        ],
        "TypeDef": "Variant"
      },
      "382": {
        "TypeId": 380,
        "TypeDef": "Sequence"
      },
      "383": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 385
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 384
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "384": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "ReserveIdentifier",
            "TypeId": 84
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "ReserveData"
        ],
        "TypeParams": [
          {
            "Name": "ReserveIdentifier",
            "TypeId": 84
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "385": {
        "TypeId": 384,
        "TypeDef": "Sequence"
      },
      "386": {
        "Variants": [
          {
            "Name": "VestingBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Vesting balance too high to send value"
            ]
          },
          {
            "Name": "LiquidityRestrictions",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account liquidity restrictions prevent withdrawal"
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Balance too low to send value."
            ]
          },
          {
            "Name": "ExistentialDeposit",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Value too low to create account due to existential deposit"
            ]
          },
          {
            "Name": "KeepAlive",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Transfer/payment would kill account"
            ]
          },
          {
            "Name": "ExistingVestingSchedule",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "A vesting schedule already exists for this account"
            ]
          },
          {
            "Name": "DeadAccount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Beneficiary account must pre-exist"
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Number of named reserves exceed MaxReserves"
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "387": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 388
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 244
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "388": {
        "TypeId": 244,
        "TypeDef": "Sequence"
      },
      "389": {
        "Variants": [
          {
            "Name": "V0",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V1",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_vesting",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "390": {
        "Variants": [
          {
            "Name": "NotVesting",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The account given is not vesting."
            ]
          },
          {
            "Name": "AtMaxVestingSchedules",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The account already has `MaxVestingSchedules` count of schedules and thus",
              "cannot add another one. Consider merging existing schedules in order to add another."
            ]
          },
          {
            "Name": "AmountLow",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Amount being transferred is too low to create a vesting schedule."
            ]
          },
          {
            "Name": "ScheduleIndexOutOfBounds",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "An index was out of bounds of the vesting schedules."
            ]
          },
          {
            "Name": "InvalidScheduleParams",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Failed to create a new schedule because some parameter was invalid."
            ]
          }
        ],
        "Path": [
          "pallet_vesting",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the vesting pallet."
        ]
      },
      "391": {
        "TypeFields": [
          {
            "Name": "locked",
            "TypeName": "Balance",
            "TypeId": 72
          },
          {
            "Name": "unbonding_info",
            "TypeName": "UnbondingInfo<Balance>",
            "TypeId": 392
          },
          {
            "Name": "reward_destination",
            "TypeName": "RewardDestination",
            "TypeId": 52
          }
        ],
        "Path": [
          "pallet_dapps_staking",
          "AccountLedger"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "392": {
        "TypeFields": [
          {
            "Name": "unlocking_chunks",
            "TypeName": "Vec<UnlockingChunk<Balance>>",
            "TypeId": 393
          }
        ],
        "Path": [
          "pallet_dapps_staking",
          "UnbondingInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "393": {
        "TypeId": 394,
        "TypeDef": "Sequence"
      },
      "394": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 72
          },
          {
            "Name": "unlock_era",
            "TypeName": "EraIndex",
            "TypeId": 69
          }
        ],
        "Path": [
          "pallet_dapps_staking",
          "UnlockingChunk"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "395": {
        "TypeFields": [
          {
            "Name": "stakers",
            "TypeName": "Balance",
            "TypeId": 72
          },
          {
            "Name": "dapps",
            "TypeName": "Balance",
            "TypeId": 72
          }
        ],
        "Path": [
          "pallet_dapps_staking",
          "RewardInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "396": {
        "Variants": [
          {
            "Name": "NotForcing",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "ForceNew",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_dapps_staking",
          "Forcing"
        ],
        "TypeDef": "Variant"
      },
      "397": {
        "TypeFields": [
          {
            "Name": "developer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "state",
            "TypeName": "DAppState",
            "TypeId": 398
          }
        ],
        "Path": [
          "pallet_dapps_staking",
          "DAppInfo"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "398": {
        "Variants": [
          {
            "Name": "Registered",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unregistered",
            "TypeFields": [
              {
                "TypeName": "EraIndex",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_dapps_staking",
          "DAppState"
        ],
        "TypeDef": "Variant"
      },
      "399": {
        "TypeFields": [
          {
            "Name": "rewards",
            "TypeName": "RewardInfo<Balance>",
            "TypeId": 395
          },
          {
            "Name": "staked",
            "TypeName": "Balance",
            "TypeId": 72
          },
          {
            "Name": "locked",
            "TypeName": "Balance",
            "TypeId": 72
          }
        ],
        "Path": [
          "pallet_dapps_staking",
          "EraInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "400": {
        "TypeIds": [
          48,
          4
        ],
        "TypeDef": "Tuple"
      },
      "401": {
        "TypeIds": [
          0,
          48
        ],
        "TypeDef": "Tuple"
      },
      "402": {
        "TypeFields": [
          {
            "Name": "stakes",
            "TypeName": "Vec<EraStake<Balance>>",
            "TypeId": 403
          }
        ],
        "Path": [
          "pallet_dapps_staking",
          "StakerInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "403": {
        "TypeId": 404,
        "TypeDef": "Sequence"
      },
      "404": {
        "TypeFields": [
          {
            "Name": "staked",
            "TypeName": "Balance",
            "TypeId": 72
          },
          {
            "Name": "era",
            "TypeName": "EraIndex",
            "TypeId": 69
          }
        ],
        "Path": [
          "pallet_dapps_staking",
          "EraStake"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "405": {
        "Variants": [
          {
            "Name": "V1_0_0",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V2_0_0",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "V3_0_0",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "V4_0_0",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_dapps_staking",
          "Version"
        ],
        "TypeDef": "Variant"
      },
      "406": {
        "TypeFields": [
          {
            "TypeName": "[u8; 8]",
            "TypeId": 84
          }
        ],
        "Path": [
          "frame_support",
          "PalletId"
        ],
        "TypeDef": "Composite"
      },
      "407": {
        "Variants": [
          {
            "Name": "Disabled",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Disabled"
            ]
          },
          {
            "Name": "NoMaintenanceModeChange",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No change in maintenance mode"
            ]
          },
          {
            "Name": "UpgradeTooHeavy",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Upgrade is too heavy, reduce the weight parameter."
            ]
          },
          {
            "Name": "StakingWithNoValue",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Can not stake with zero value."
            ]
          },
          {
            "Name": "InsufficientValue",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Can not stake with value less than minimum staking value"
            ]
          },
          {
            "Name": "MaxNumberOfStakersExceeded",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Number of stakers per contract exceeded."
            ]
          },
          {
            "Name": "NotOperatedContract",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Targets must be operated contracts"
            ]
          },
          {
            "Name": "NotStakedContract",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Contract isn't staked."
            ]
          },
          {
            "Name": "NotUnregisteredContract",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Contract isn't unregistered."
            ]
          },
          {
            "Name": "UnclaimedRewardsRemaining",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Unclaimed rewards should be claimed before withdrawing stake."
            ]
          },
          {
            "Name": "UnstakingWithNoValue",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Unstaking a contract with zero value"
            ]
          },
          {
            "Name": "NothingToWithdraw",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "There are no previously unbonded funds that can be unstaked and withdrawn."
            ]
          },
          {
            "Name": "AlreadyRegisteredContract",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The contract is already registered by other account"
            ]
          },
          {
            "Name": "AlreadyUsedDeveloperAccount",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "This account was already used to register contract"
            ]
          },
          {
            "Name": "NotOwnedContract",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Smart contract not owned by the account id."
            ]
          },
          {
            "Name": "UnknownEraReward",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Report issue on github if this is ever emitted"
            ]
          },
          {
            "Name": "UnexpectedStakeInfoEra",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Report issue on github if this is ever emitted"
            ]
          },
          {
            "Name": "TooManyUnlockingChunks",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Contract has too many unlocking chunks. Withdraw the existing chunks if possible",
              "or wait for current chunks to complete unlocking process to withdraw them."
            ]
          },
          {
            "Name": "AlreadyClaimedInThisEra",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Contract already claimed in this era and reward is distributed"
            ]
          },
          {
            "Name": "EraOutOfBounds",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Era parameter is out of bounds"
            ]
          },
          {
            "Name": "TooManyEraStakeValues",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Too many active `EraStake` values for (staker, contract) pairing.",
              "Claim existing rewards to fix this problem."
            ]
          },
          {
            "Name": "NotActiveStaker",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Account is not actively staking"
            ]
          },
          {
            "Name": "NominationTransferToSameContract",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Transfering nomination to the same contract"
            ]
          }
        ],
        "Path": [
          "pallet_dapps_staking",
          "pallet",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "408": {
        "Variants": [
          {
            "Name": "InvalidDistributionConfiguration",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Sum of all rations must be one whole (100%)"
            ]
          }
        ],
        "Path": [
          "pallet_block_reward",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "409": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "issuer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "admin",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "freezer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "supply",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "min_balance",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "is_sufficient",
            "TypeName": "bool",
            "TypeId": 51
          },
          {
            "Name": "accounts",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "sufficients",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "approvals",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "status",
            "TypeName": "AssetStatus",
            "TypeId": 410
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetDetails"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "DepositBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "410": {
        "Variants": [
          {
            "Name": "Live",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Destroying",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetStatus"
        ],
        "TypeDef": "Variant"
      },
      "411": {
        "TypeIds": [
          6,
          0
        ],
        "TypeDef": "Tuple"
      },
      "412": {
        "TypeFields": [
          {
            "Name": "balance",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "is_frozen",
            "TypeName": "bool",
            "TypeId": 51
          },
          {
            "Name": "reason",
            "TypeName": "ExistenceReason<DepositBalance>",
            "TypeId": 413
          },
          {
            "Name": "extra",
            "TypeName": "Extra",
            "TypeId": 31
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetAccount"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "Extra",
            "TypeId": 31
          }
        ],
        "TypeDef": "Composite"
      },
      "413": {
        "Variants": [
          {
            "Name": "Consumer",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Sufficient",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DepositHeld",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 2
          },
          {
            "Name": "DepositRefunded",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "ExistenceReason"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "414": {
        "TypeIds": [
          6,
          0,
          0
        ],
        "TypeDef": "Tuple"
      },
      "415": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "Approval"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "DepositBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "416": {
        "TypeFields": [
          {
            "Name": "deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "name",
            "TypeName": "BoundedString",
            "TypeId": 417
          },
          {
            "Name": "symbol",
            "TypeName": "BoundedString",
            "TypeId": 417
          },
          {
            "Name": "decimals",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "is_frozen",
            "TypeName": "bool",
            "TypeId": 51
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetMetadata"
        ],
        "TypeParams": [
          {
            "Name": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "BoundedString",
            "TypeId": 417
          }
        ],
        "TypeDef": "Composite"
      },
      "417": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "418": {
        "Variants": [
          {
            "Name": "BalanceLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account balance must be greater than or equal to the transfer amount."
            ]
          },
          {
            "Name": "NoAccount",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The account to alter does not exist."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The signing account has no permission to do the operation."
            ]
          },
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The given asset ID is unknown."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The origin account is frozen."
            ]
          },
          {
            "Name": "InUse",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The asset ID is already taken."
            ]
          },
          {
            "Name": "BadWitness",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Invalid witness data given."
            ]
          },
          {
            "Name": "MinBalanceZero",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Minimum balance should be non-zero."
            ]
          },
          {
            "Name": "NoProvider",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Unable to increment the consumer reference counters on the account. Either no provider",
              "reference exists to allow a non-zero balance of a non-self-sufficient asset, or the",
              "maximum number of consumers has been reached."
            ]
          },
          {
            "Name": "BadMetadata",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Invalid metadata given."
            ]
          },
          {
            "Name": "Unapproved",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "No approval exists that would allow the transfer."
            ]
          },
          {
            "Name": "WouldDie",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The source account would not survive the transfer and it needs to stay alive."
            ]
          },
          {
            "Name": "AlreadyExists",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The asset-account already exists."
            ]
          },
          {
            "Name": "NoDeposit",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The asset-account doesn't have an associated deposit."
            ]
          },
          {
            "Name": "WouldBurn",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The operation would result in funds being burned."
            ]
          },
          {
            "Name": "LiveAsset",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The asset is a live asset and is actively being used. Usually emit for operations such",
              "as `start_destroy` which require the asset to be in a destroying state."
            ]
          },
          {
            "Name": "AssetNotLive",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The asset is not live, and likely being destroyed."
            ]
          },
          {
            "Name": "IncorrectStatus",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The asset status is not the expected status."
            ]
          },
          {
            "Name": "NotFrozen",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "The asset should be frozen before the given operation."
            ]
          }
        ],
        "Path": [
          "pallet_assets",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "419": {
        "TypeId": 420,
        "TypeDef": "Sequence"
      },
      "420": {
        "TypeFields": [
          {
            "Name": "who",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_collator_selection",
          "pallet",
          "CandidateInfo"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "421": {
        "Variants": [
          {
            "Name": "TooManyCandidates",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many candidates"
            ]
          },
          {
            "Name": "TooFewCandidates",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Too few candidates"
            ]
          },
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Unknown error"
            ]
          },
          {
            "Name": "Permission",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Permission issue"
            ]
          },
          {
            "Name": "AlreadyCandidate",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "User is already a candidate"
            ]
          },
          {
            "Name": "NotCandidate",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "User is not a candidate"
            ]
          },
          {
            "Name": "AlreadyInvulnerable",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "User is already an Invulnerable"
            ]
          },
          {
            "Name": "NoAssociatedValidatorId",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Account has no associated validator ID"
            ]
          },
          {
            "Name": "ValidatorNotRegistered",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Validator ID is not yet registered"
            ]
          }
        ],
        "Path": [
          "pallet_collator_selection",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "422": {
        "TypeId": 423,
        "TypeDef": "Sequence"
      },
      "423": {
        "TypeIds": [
          0,
          251
        ],
        "TypeDef": "Tuple"
      },
      "424": {
        "TypeId": 4,
        "TypeDef": "Sequence"
      },
      "425": {
        "TypeIds": [
          426,
          12
        ],
        "TypeDef": "Tuple"
      },
      "426": {
        "TypeFields": [
          {
            "TypeName": "[u8; 4]",
            "TypeId": 16
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "KeyTypeId"
        ],
        "TypeDef": "Composite"
      },
      "427": {
        "Variants": [
          {
            "Name": "InvalidProof",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Invalid ownership proof."
            ]
          },
          {
            "Name": "NoAssociatedValidatorId",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No associated validator ID for account."
            ]
          },
          {
            "Name": "DuplicatedKey",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Registered duplicate key."
            ]
          },
          {
            "Name": "NoKeys",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "No keys are associated with this account."
            ]
          },
          {
            "Name": "NoAccount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Key setting account is not live, so it's impossible to associate keys."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the session pallet."
        ]
      },
      "428": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 429
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 252
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "429": {
        "TypeId": 252,
        "TypeDef": "Sequence"
      },
      "430": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "sp_consensus_slots",
          "Slot"
        ],
        "TypeDef": "Composite"
      },
      "431": {
        "TypeId": 432,
        "TypeDef": "Sequence"
      },
      "432": {
        "TypeFields": [
          {
            "Name": "sender",
            "TypeName": "ParaId",
            "TypeId": 63
          },
          {
            "Name": "state",
            "TypeName": "InboundState",
            "TypeId": 433
          },
          {
            "Name": "message_metadata",
            "TypeName": "Vec<(RelayBlockNumber, XcmpMessageFormat)>",
            "TypeId": 434
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "InboundChannelDetails"
        ],
        "TypeDef": "Composite"
      },
      "433": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Suspended",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "InboundState"
        ],
        "TypeDef": "Variant"
      },
      "434": {
        "TypeId": 435,
        "TypeDef": "Sequence"
      },
      "435": {
        "TypeIds": [
          4,
          436
        ],
        "TypeDef": "Tuple"
      },
      "436": {
        "Variants": [
          {
            "Name": "ConcatenatedVersionedXcm",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "ConcatenatedEncodedBlob",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Signals",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "XcmpMessageFormat"
        ],
        "TypeDef": "Variant"
      },
      "437": {
        "TypeIds": [
          63,
          4
        ],
        "TypeDef": "Tuple"
      },
      "438": {
        "TypeId": 439,
        "TypeDef": "Sequence"
      },
      "439": {
        "TypeFields": [
          {
            "Name": "recipient",
            "TypeName": "ParaId",
            "TypeId": 63
          },
          {
            "Name": "state",
            "TypeName": "OutboundState",
            "TypeId": 440
          },
          {
            "Name": "signals_exist",
            "TypeName": "bool",
            "TypeId": 51
          },
          {
            "Name": "first_index",
            "TypeName": "u16",
            "TypeId": 41
          },
          {
            "Name": "last_index",
            "TypeName": "u16",
            "TypeId": 41
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "OutboundChannelDetails"
        ],
        "TypeDef": "Composite"
      },
      "440": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Suspended",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "OutboundState"
        ],
        "TypeDef": "Variant"
      },
      "441": {
        "TypeIds": [
          63,
          41
        ],
        "TypeDef": "Tuple"
      },
      "442": {
        "TypeFields": [
          {
            "Name": "suspend_threshold",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "drop_threshold",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "resume_threshold",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "threshold_weight",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "weight_restrict_decay",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "xcmp_max_individual_weight",
            "TypeName": "Weight",
            "TypeId": 8
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "QueueConfigData"
        ],
        "TypeDef": "Composite"
      },
      "443": {
        "TypeIds": [
          63,
          4,
          12
        ],
        "TypeDef": "Tuple"
      },
      "444": {
        "Variants": [
          {
            "Name": "FailedToSend",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Failed to send XCM message."
            ]
          },
          {
            "Name": "BadXcmOrigin",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Bad XCM origin."
            ]
          },
          {
            "Name": "BadXcm",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Bad XCM data."
            ]
          },
          {
            "Name": "BadOverweightIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Bad overweight index."
            ]
          },
          {
            "Name": "WeightOverLimit",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Provided weight is possibly not enough to execute the message."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "445": {
        "Variants": [
          {
            "Name": "Pending",
            "TypeFields": [
              {
                "Name": "responder",
                "TypeName": "VersionedMultiLocation",
                "TypeId": 117
              },
              {
                "Name": "maybe_match_querier",
                "TypeName": "Option<VersionedMultiLocation>",
                "TypeId": 446
              },
              {
                "Name": "maybe_notify",
                "TypeName": "Option<(u8, u8)>",
                "TypeId": 447
              },
              {
                "Name": "timeout",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "VersionNotifier",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "VersionedMultiLocation",
                "TypeId": 117
              },
              {
                "Name": "is_active",
                "TypeName": "bool",
                "TypeId": 51
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ready",
            "TypeFields": [
              {
                "Name": "response",
                "TypeName": "VersionedResponse",
                "TypeId": 449
              },
              {
                "Name": "at",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "QueryStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "446": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 117
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 117
          }
        ],
        "TypeDef": "Variant"
      },
      "447": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 448
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 448
          }
        ],
        "TypeDef": "Variant"
      },
      "448": {
        "TypeIds": [
          2,
          2
        ],
        "TypeDef": "Tuple"
      },
      "449": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Response",
                "TypeId": 260
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Response",
                "TypeId": 86
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedResponse"
        ],
        "TypeDef": "Variant"
      },
      "450": {
        "TypeIds": [
          4,
          117
        ],
        "TypeDef": "Tuple"
      },
      "451": {
        "TypeIds": [
          10,
          8,
          4
        ],
        "TypeDef": "Tuple"
      },
      "452": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 454
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 453
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "453": {
        "TypeIds": [
          117,
          4
        ],
        "TypeDef": "Tuple"
      },
      "454": {
        "TypeId": 453,
        "TypeDef": "Sequence"
      },
      "455": {
        "Variants": [
          {
            "Name": "MigrateSupportedVersion",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "MigrateVersionNotifiers",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NotifyCurrentTargets",
            "TypeFields": [
              {
                "TypeName": "Option<Vec<u8>>",
                "TypeId": 315
              }
            ],
            "Index": 2
          },
          {
            "Name": "MigrateAndNotifyOldTargets",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "VersionMigrationStage"
        ],
        "TypeDef": "Variant"
      },
      "456": {
        "TypeIds": [
          4,
          0,
          457
        ],
        "TypeDef": "Tuple"
      },
      "457": {
        "Variants": [
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::AssetId",
                "TypeId": 81
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedAssetId"
        ],
        "TypeDef": "Variant"
      },
      "458": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "owner",
            "TypeName": "VersionedMultiLocation",
            "TypeId": 117
          },
          {
            "Name": "locker",
            "TypeName": "VersionedMultiLocation",
            "TypeId": 117
          },
          {
            "Name": "users",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "RemoteLockedFungibleRecord"
        ],
        "TypeDef": "Composite"
      },
      "459": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 461
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 460
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "460": {
        "TypeIds": [
          6,
          117
        ],
        "TypeDef": "Tuple"
      },
      "461": {
        "TypeId": 460,
        "TypeDef": "Sequence"
      },
      "462": {
        "Variants": [
          {
            "Name": "Unreachable",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The desired destination was unreachable, generally because there is a no way of routing",
              "to it."
            ]
          },
          {
            "Name": "SendFailure",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
              "a lack of space for buffering the message."
            ]
          },
          {
            "Name": "Filtered",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The message execution fails the filter."
            ]
          },
          {
            "Name": "UnweighableMessage",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The message's weight could not be determined."
            ]
          },
          {
            "Name": "DestinationNotInvertible",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The destination `MultiLocation` provided cannot be inverted."
            ]
          },
          {
            "Name": "Empty",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The assets to be sent are empty."
            ]
          },
          {
            "Name": "CannotReanchor",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Could not re-anchor the assets to declare the fees for the destination chain."
            ]
          },
          {
            "Name": "TooManyAssets",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Too many assets have been attempted for transfer."
            ]
          },
          {
            "Name": "InvalidOrigin",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Origin is invalid for sending."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The version of the `Versioned` value used is not able to be interpreted."
            ]
          },
          {
            "Name": "BadLocation",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The given location could not be used (e.g. because it cannot be expressed in the",
              "desired version of XCM)."
            ]
          },
          {
            "Name": "NoSubscription",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The referenced subscription could not be found."
            ]
          },
          {
            "Name": "AlreadySubscribed",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The location is invalid since it already has a subscription from us."
            ]
          },
          {
            "Name": "InvalidAsset",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Invalid asset for the operation."
            ]
          },
          {
            "Name": "LowBalance",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The owner does not own (all) of the asset that they wish to do the operation on."
            ]
          },
          {
            "Name": "TooManyLocks",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The asset owner has too many locks on the asset."
            ]
          },
          {
            "Name": "AccountNotSovereign",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The given account is not an identifiable sovereign account for any location."
            ]
          },
          {
            "Name": "FeesNotMet",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The operation required fees to be paid which the initiator could not meet."
            ]
          },
          {
            "Name": "LockNotFound",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "A remote lock with the corresponding data could not be found."
            ]
          },
          {
            "Name": "InUse",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The unlock operation cannot succeed because there are still users of the lock."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "463": {
        "Variants": null,
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "464": {
        "TypeFields": [
          {
            "Name": "max_individual",
            "TypeName": "Weight",
            "TypeId": 8
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "ConfigData"
        ],
        "TypeDef": "Composite"
      },
      "465": {
        "TypeFields": [
          {
            "Name": "begin_used",
            "TypeName": "PageCounter",
            "TypeId": 4
          },
          {
            "Name": "end_used",
            "TypeName": "PageCounter",
            "TypeId": 4
          },
          {
            "Name": "overweight_count",
            "TypeName": "OverweightIndex",
            "TypeId": 10
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "PageIndexData"
        ],
        "TypeDef": "Composite"
      },
      "466": {
        "TypeId": 467,
        "TypeDef": "Sequence"
      },
      "467": {
        "TypeIds": [
          4,
          12
        ],
        "TypeDef": "Tuple"
      },
      "468": {
        "Variants": [
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The message index given is unknown."
            ]
          },
          {
            "Name": "OverLimit",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The amount of weight given is possibly not enough for executing the message."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "469": {
        "Variants": [
          {
            "Name": "AssetAlreadyRegistered",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Asset is already registered."
            ]
          },
          {
            "Name": "AssetDoesNotExist",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Asset does not exist (hasn't been registered)."
            ]
          },
          {
            "Name": "MultiLocationNotSupported",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed to convert to latest versioned MultiLocation"
            ]
          }
        ],
        "Path": [
          "pallet_xc_asset_config",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "470": {
        "Variants": [
          {
            "Name": "AssetHasNoReserve",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Asset has no reserve location."
            ]
          },
          {
            "Name": "NotCrossChainTransfer",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not cross-chain transfer."
            ]
          },
          {
            "Name": "InvalidDest",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Invalid transfer destination."
            ]
          },
          {
            "Name": "NotCrossChainTransferableCurrency",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Currency is not cross-chain transferable."
            ]
          },
          {
            "Name": "UnweighableMessage",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The message's weight could not be determined."
            ]
          },
          {
            "Name": "XcmExecutionFailed",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "XCM execution failed."
            ]
          },
          {
            "Name": "CannotReanchor",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Could not re-anchor the assets to declare the fees for the",
              "destination chain."
            ]
          },
          {
            "Name": "InvalidAncestry",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Could not get ancestry of asset reserve location."
            ]
          },
          {
            "Name": "InvalidAsset",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The MultiAsset is invalid."
            ]
          },
          {
            "Name": "DestinationNotInvertible",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The destination `MultiLocation` provided cannot be inverted."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The version of the `Versioned` value used is not able to be",
              "interpreted."
            ]
          },
          {
            "Name": "DistinctReserveForAssetAndFee",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "We tried sending distinct asset and fee but they have different",
              "reserve chains."
            ]
          },
          {
            "Name": "ZeroFee",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The fee is zero."
            ]
          },
          {
            "Name": "ZeroAmount",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The transfering asset amount is zero."
            ]
          },
          {
            "Name": "TooManyAssetsBeingSent",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The number of assets to be sent is over the maximum."
            ]
          },
          {
            "Name": "AssetIndexNonExistent",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The specified index does not exist in a MultiAssets struct."
            ]
          },
          {
            "Name": "FeeNotEnough",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Fee is not enough."
            ]
          },
          {
            "Name": "NotSupportedMultiLocation",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Not supported MultiLocation"
            ]
          },
          {
            "Name": "MinXcmFeeNotDefined",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "MinXcmFee not registered for certain reserve location"
            ]
          }
        ],
        "Path": [
          "orml_xtokens",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "471": {
        "TypeIds": [
          49,
          11
        ],
        "TypeDef": "Tuple"
      },
      "472": {
        "Variants": [
          {
            "Name": "BalanceLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Not enough balance to perform action"
            ]
          },
          {
            "Name": "FeeOverflow",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Calculating total fee overflowed"
            ]
          },
          {
            "Name": "PaymentOverflow",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Calculating total payment overflowed"
            ]
          },
          {
            "Name": "WithdrawFailed",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Withdraw fee failed"
            ]
          },
          {
            "Name": "GasPriceTooLow",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Gas price is too low."
            ]
          },
          {
            "Name": "InvalidNonce",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Nonce is invalid"
            ]
          },
          {
            "Name": "GasLimitTooLow",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Gas limit is too low."
            ]
          },
          {
            "Name": "GasLimitTooHigh",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Gas limit is too high."
            ]
          },
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Undefined error."
            ]
          },
          {
            "Name": "Reentrancy",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "EVM reentrancy"
            ]
          },
          {
            "Name": "TransactionMustComeFromEOA",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "EIP-3607,"
            ]
          }
        ],
        "Path": [
          "pallet_evm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "473": {
        "TypeId": 474,
        "TypeDef": "Sequence"
      },
      "474": {
        "TypeIds": [
          289,
          475,
          480
        ],
        "TypeDef": "Tuple"
      },
      "475": {
        "TypeFields": [
          {
            "Name": "transaction_hash",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "transaction_index",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "from",
            "TypeName": "H160",
            "TypeId": 49
          },
          {
            "Name": "to",
            "TypeName": "Option<H160>",
            "TypeId": 476
          },
          {
            "Name": "contract_address",
            "TypeName": "Option<H160>",
            "TypeId": 476
          },
          {
            "Name": "logs",
            "TypeName": "Vec<Log>",
            "TypeId": 477
          },
          {
            "Name": "logs_bloom",
            "TypeName": "Bloom",
            "TypeId": 478
          }
        ],
        "Path": [
          "fp_rpc",
          "TransactionStatus"
        ],
        "TypeDef": "Composite"
      },
      "476": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 49
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 49
          }
        ],
        "TypeDef": "Variant"
      },
      "477": {
        "TypeId": 123,
        "TypeDef": "Sequence"
      },
      "478": {
        "TypeFields": [
          {
            "TypeName": "[u8; BLOOM_SIZE]",
            "TypeId": 479
          }
        ],
        "Path": [
          "ethbloom",
          "Bloom"
        ],
        "TypeDef": "Composite"
      },
      "479": {
        "Length": 256,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "480": {
        "Variants": [
          {
            "Name": "Legacy",
            "TypeFields": [
              {
                "TypeName": "EIP658ReceiptData",
                "TypeId": 481
              }
            ],
            "Index": 0
          },
          {
            "Name": "EIP2930",
            "TypeFields": [
              {
                "TypeName": "EIP2930ReceiptData",
                "TypeId": 481
              }
            ],
            "Index": 1
          },
          {
            "Name": "EIP1559",
            "TypeFields": [
              {
                "TypeName": "EIP1559ReceiptData",
                "TypeId": 481
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "ethereum",
          "receipt",
          "ReceiptV3"
        ],
        "TypeDef": "Variant"
      },
      "481": {
        "TypeFields": [
          {
            "Name": "status_code",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "used_gas",
            "TypeName": "U256",
            "TypeId": 135
          },
          {
            "Name": "logs_bloom",
            "TypeName": "Bloom",
            "TypeId": 478
          },
          {
            "Name": "logs",
            "TypeName": "Vec<Log>",
            "TypeId": 477
          }
        ],
        "Path": [
          "ethereum",
          "receipt",
          "EIP658ReceiptData"
        ],
        "TypeDef": "Composite"
      },
      "482": {
        "TypeFields": [
          {
            "Name": "header",
            "TypeName": "Header",
            "TypeId": 483
          },
          {
            "Name": "transactions",
            "TypeName": "Vec<T>",
            "TypeId": 485
          },
          {
            "Name": "ommers",
            "TypeName": "Vec<Header>",
            "TypeId": 486
          }
        ],
        "Path": [
          "ethereum",
          "block",
          "Block"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 289
          }
        ],
        "TypeDef": "Composite"
      },
      "483": {
        "TypeFields": [
          {
            "Name": "parent_hash",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "ommers_hash",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "beneficiary",
            "TypeName": "H160",
            "TypeId": 49
          },
          {
            "Name": "state_root",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "transactions_root",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "receipts_root",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "logs_bloom",
            "TypeName": "Bloom",
            "TypeId": 478
          },
          {
            "Name": "difficulty",
            "TypeName": "U256",
            "TypeId": 135
          },
          {
            "Name": "number",
            "TypeName": "U256",
            "TypeId": 135
          },
          {
            "Name": "gas_limit",
            "TypeName": "U256",
            "TypeId": 135
          },
          {
            "Name": "gas_used",
            "TypeName": "U256",
            "TypeId": 135
          },
          {
            "Name": "timestamp",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "extra_data",
            "TypeName": "Bytes",
            "TypeId": 12
          },
          {
            "Name": "mix_hash",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "nonce",
            "TypeName": "H64",
            "TypeId": 484
          }
        ],
        "Path": [
          "ethereum",
          "header",
          "Header"
        ],
        "TypeDef": "Composite"
      },
      "484": {
        "TypeFields": [
          {
            "TypeName": "[u8; 8]",
            "TypeId": 84
          }
        ],
        "Path": [
          "ethereum_types",
          "hash",
          "H64"
        ],
        "TypeDef": "Composite"
      },
      "485": {
        "TypeId": 289,
        "TypeDef": "Sequence"
      },
      "486": {
        "TypeId": 483,
        "TypeDef": "Sequence"
      },
      "487": {
        "TypeId": 480,
        "TypeDef": "Sequence"
      },
      "488": {
        "TypeId": 475,
        "TypeDef": "Sequence"
      },
      "489": {
        "Variants": [
          {
            "Name": "InvalidSignature",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Signature is invalid."
            ]
          },
          {
            "Name": "PreLogExists",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Pre-log is present, therefore transact is not allowed."
            ]
          }
        ],
        "Path": [
          "pallet_ethereum",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "490": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "491": {
        "TypeFields": [
          {
            "Name": "instruction_weights_version",
            "TypeName": "u32",
            "TypeId": 69
          },
          {
            "Name": "initial",
            "TypeName": "u32",
            "TypeId": 69
          },
          {
            "Name": "maximum",
            "TypeName": "u32",
            "TypeId": 69
          },
          {
            "Name": "code",
            "TypeName": "RelaxedCodeVec<T>",
            "TypeId": 492
          },
          {
            "Name": "determinism",
            "TypeName": "Determinism",
            "TypeId": 303
          }
        ],
        "Path": [
          "pallet_contracts",
          "wasm",
          "PrefabWasmModule"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "492": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "493": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountIdOf<T>",
            "TypeId": 0
          },
          {
            "Name": "deposit",
            "TypeName": "BalanceOf<T>",
            "TypeId": 72
          },
          {
            "Name": "refcount",
            "TypeName": "u64",
            "TypeId": 9
          }
        ],
        "Path": [
          "pallet_contracts",
          "wasm",
          "OwnerInfo"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "494": {
        "TypeFields": [
          {
            "Name": "trie_id",
            "TypeName": "TrieId",
            "TypeId": 306
          },
          {
            "Name": "code_hash",
            "TypeName": "CodeHash<T>",
            "TypeId": 11
          },
          {
            "Name": "storage_bytes",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "storage_items",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "storage_byte_deposit",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          },
          {
            "Name": "storage_item_deposit",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          },
          {
            "Name": "storage_base_deposit",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_contracts",
          "storage",
          "ContractInfo"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "495": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 497
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 496
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "496": {
        "TypeFields": [
          {
            "Name": "trie_id",
            "TypeName": "TrieId",
            "TypeId": 306
          }
        ],
        "Path": [
          "pallet_contracts",
          "storage",
          "DeletedContract"
        ],
        "TypeDef": "Composite"
      },
      "497": {
        "TypeId": 496,
        "TypeDef": "Sequence"
      },
      "498": {
        "TypeFields": [
          {
            "Name": "limits",
            "TypeName": "Limits",
            "TypeId": 499
          },
          {
            "Name": "instruction_weights",
            "TypeName": "InstructionWeights<T>",
            "TypeId": 500
          },
          {
            "Name": "host_fn_weights",
            "TypeName": "HostFnWeights<T>",
            "TypeId": 501
          }
        ],
        "Path": [
          "pallet_contracts",
          "schedule",
          "Schedule"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "499": {
        "TypeFields": [
          {
            "Name": "event_topics",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "globals",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "locals",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "parameters",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "memory_pages",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "table_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "br_table_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "subject_len",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "payload_len",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_contracts",
          "schedule",
          "Limits"
        ],
        "TypeDef": "Composite"
      },
      "500": {
        "TypeFields": [
          {
            "Name": "version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "fallback",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64const",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64load",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64store",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "select",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "r#if",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "br",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "br_if",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "br_table",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "br_table_per_entry",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "call",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "call_indirect",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "call_indirect_per_param",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "call_per_local",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "local_get",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "local_set",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "local_tee",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "global_get",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "global_set",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "memory_current",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "memory_grow",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64clz",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64ctz",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64popcnt",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64eqz",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64extendsi32",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64extendui32",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32wrapi64",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64eq",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64ne",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64lts",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64ltu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64gts",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64gtu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64les",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64leu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64ges",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64geu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64add",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64sub",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64mul",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64divs",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64divu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64rems",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64remu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64and",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64or",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64xor",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64shl",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64shrs",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64shru",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64rotl",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64rotr",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_contracts",
          "schedule",
          "InstructionWeights"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "501": {
        "TypeFields": [
          {
            "Name": "caller",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "is_contract",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "code_hash",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "own_code_hash",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "caller_is_origin",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "address",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gas_left",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "balance",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "value_transferred",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "minimum_balance",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "block_number",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "now",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "weight_to_fee",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gas",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "input",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "input_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "r#return",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "return_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "terminate",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "random",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "deposit_event",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "deposit_event_per_topic",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "deposit_event_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "debug_message",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "debug_message_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "set_storage",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "set_storage_per_new_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "set_storage_per_old_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "set_code_hash",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "clear_storage",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "clear_storage_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "contains_storage",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "contains_storage_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "get_storage",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "get_storage_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "take_storage",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "take_storage_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "transfer",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "call",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "delegate_call",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "call_transfer_surcharge",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "call_per_cloned_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "instantiate",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "instantiate_transfer_surcharge",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "instantiate_per_input_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "instantiate_per_salt_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "hash_sha2_256",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "hash_sha2_256_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "hash_keccak_256",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "hash_keccak_256_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "hash_blake2_256",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "hash_blake2_256_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "hash_blake2_128",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "hash_blake2_128_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "ecdsa_recover",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "ecdsa_to_eth_address",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "reentrance_count",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "account_reentrance_count",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "instantiation_nonce",
            "TypeName": "Weight",
            "TypeId": 8
          }
        ],
        "Path": [
          "pallet_contracts",
          "schedule",
          "HostFnWeights"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "502": {
        "Variants": [
          {
            "Name": "InvalidScheduleVersion",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "A new schedule must have a greater version than the current one."
            ]
          },
          {
            "Name": "InvalidCallFlags",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Invalid combination of flags supplied to `seal_call` or `seal_delegate_call`."
            ]
          },
          {
            "Name": "OutOfGas",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The executed contract exhausted its gas limit."
            ]
          },
          {
            "Name": "OutputBufferTooSmall",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The output buffer supplied to a contract API call was too small."
            ]
          },
          {
            "Name": "TransferFailed",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Performing the requested transfer failed. Probably because there isn't enough",
              "free balance in the sender's account."
            ]
          },
          {
            "Name": "MaxCallDepthReached",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Performing a call was denied because the calling depth reached the limit",
              "of what is specified in the schedule."
            ]
          },
          {
            "Name": "ContractNotFound",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "No contract was found at the specified address."
            ]
          },
          {
            "Name": "CodeTooLarge",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The code supplied to `instantiate_with_code` exceeds the limit specified in the",
              "current schedule."
            ]
          },
          {
            "Name": "CodeNotFound",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "No code could be found at the supplied code hash."
            ]
          },
          {
            "Name": "OutOfBounds",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "A buffer outside of sandbox memory was passed to a contract API function."
            ]
          },
          {
            "Name": "DecodingFailed",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Input passed to a contract API function failed to decode as expected type."
            ]
          },
          {
            "Name": "ContractTrapped",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Contract trapped during execution."
            ]
          },
          {
            "Name": "ValueTooLarge",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The size defined in `T::MaxValueSize` was exceeded."
            ]
          },
          {
            "Name": "TerminatedWhileReentrant",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Termination of a contract is not allowed while the contract is already",
              "on the call stack. Can be triggered by `seal_terminate`."
            ]
          },
          {
            "Name": "InputForwarded",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "`seal_call` forwarded this contracts input. It therefore is no longer available."
            ]
          },
          {
            "Name": "RandomSubjectTooLong",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The subject passed to `seal_random` exceeds the limit."
            ]
          },
          {
            "Name": "TooManyTopics",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The amount of topics passed to `seal_deposit_events` exceeds the limit."
            ]
          },
          {
            "Name": "NoChainExtension",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The chain does not provide a chain extension. Calling the chain extension results",
              "in this error. Note that this usually  shouldn't happen as deploying such contracts",
              "is rejected."
            ]
          },
          {
            "Name": "DeletionQueueFull",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Removal of a contract failed because the deletion queue is full.",
              "",
              "This can happen when calling `seal_terminate`.",
              "The queue is filled by deleting contracts and emptied by a fixed amount each block.",
              "Trying again during another block is the only way to resolve this issue."
            ]
          },
          {
            "Name": "DuplicateContract",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "A contract with the same AccountId already exists."
            ]
          },
          {
            "Name": "TerminatedInConstructor",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "A contract self destructed in its constructor.",
              "",
              "This can be triggered by a call to `seal_terminate`."
            ]
          },
          {
            "Name": "ReentranceDenied",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "A call tried to invoke a contract that is flagged as non-reentrant."
            ]
          },
          {
            "Name": "StorageDepositNotEnoughFunds",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Origin doesn't have enough balance to pay the required storage deposits."
            ]
          },
          {
            "Name": "StorageDepositLimitExhausted",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "More storage was created than allowed by the storage deposit limit."
            ]
          },
          {
            "Name": "CodeInUse",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "Code removal was denied because the code is still in use by at least one contract."
            ]
          },
          {
            "Name": "ContractReverted",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "The contract ran to completion but decided to revert its storage changes.",
              "Please note that this error is only returned from extrinsics. When called directly",
              "or via RPC an `Ok` will be returned. In this case the caller needs to inspect the flags",
              "to determine whether a reversion has taken place."
            ]
          },
          {
            "Name": "CodeRejected",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "The contract's code was found to be invalid during validation or instrumentation.",
              "",
              "The most likely cause of this is that an API was used which is not supported by the",
              "node. This hapens if an older node is used with a new version of ink!. Try updating",
              "your node to the newest available version.",
              "",
              "A more detailed error can be found on the node console if debug messages are enabled",
              "by supplying `-lruntime::contracts=debug`."
            ]
          },
          {
            "Name": "Indeterministic",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "An indetermistic code was used in a context where this is not permitted."
            ]
          }
        ],
        "Path": [
          "pallet_contracts",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "503": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 505
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 504
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "504": {
        "TypeIds": [
          4,
          305,
          0
        ],
        "TypeDef": "Tuple"
      },
      "505": {
        "TypeId": 504,
        "TypeDef": "Sequence"
      },
      "506": {
        "TypeIds": [
          345,
          6
        ],
        "TypeDef": "Tuple"
      },
      "507": {
        "Variants": [
          {
            "Name": "Ongoing",
            "TypeFields": [
              {
                "TypeName": "ReferendumStatus<BlockNumber, Proposal, Balance>",
                "TypeId": 508
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finished",
            "TypeFields": [
              {
                "Name": "approved",
                "TypeName": "bool",
                "TypeId": 51
              },
              {
                "Name": "end",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "ReferendumInfo"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Proposal",
            "TypeId": 305
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "508": {
        "TypeFields": [
          {
            "Name": "end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "proposal",
            "TypeName": "Proposal",
            "TypeId": 305
          },
          {
            "Name": "threshold",
            "TypeName": "VoteThreshold",
            "TypeId": 140
          },
          {
            "Name": "delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "tally",
            "TypeName": "Tally<Balance>",
            "TypeId": 509
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "ReferendumStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Proposal",
            "TypeId": 305
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "509": {
        "TypeFields": [
          {
            "Name": "ayes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "nays",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "turnout",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "Tally"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "510": {
        "Variants": [
          {
            "Name": "Direct",
            "TypeFields": [
              {
                "Name": "votes",
                "TypeName": "BoundedVec<(ReferendumIndex, AccountVote<Balance>), MaxVotes>",
                "TypeId": 511
              },
              {
                "Name": "delegations",
                "TypeName": "Delegations<Balance>",
                "TypeId": 514
              },
              {
                "Name": "prior",
                "TypeName": "PriorLock<BlockNumber, Balance>",
                "TypeId": 515
              }
            ],
            "Index": 0
          },
          {
            "Name": "Delegating",
            "TypeFields": [
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "target",
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "Name": "conviction",
                "TypeName": "Conviction",
                "TypeId": 307
              },
              {
                "Name": "delegations",
                "TypeName": "Delegations<Balance>",
                "TypeId": 514
              },
              {
                "Name": "prior",
                "TypeName": "PriorLock<BlockNumber, Balance>",
                "TypeId": 515
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "Voting"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "MaxVotes"
          }
        ],
        "TypeDef": "Variant"
      },
      "511": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 513
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 512
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "512": {
        "TypeIds": [
          4,
          141
        ],
        "TypeDef": "Tuple"
      },
      "513": {
        "TypeId": 512,
        "TypeDef": "Sequence"
      },
      "514": {
        "TypeFields": [
          {
            "Name": "votes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "capital",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "Delegations"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "515": {
        "TypeFields": [
          {
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "PriorLock"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "516": {
        "TypeIds": [
          305,
          140
        ],
        "TypeDef": "Tuple"
      },
      "517": {
        "TypeIds": [
          4,
          345
        ],
        "TypeDef": "Tuple"
      },
      "518": {
        "Variants": [
          {
            "Name": "ValueLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Value too low"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Proposal does not exist"
            ]
          },
          {
            "Name": "AlreadyCanceled",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Cannot cancel the same proposal twice"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Proposal already made"
            ]
          },
          {
            "Name": "ProposalBlacklisted",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Proposal still blacklisted"
            ]
          },
          {
            "Name": "NotSimpleMajority",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Next external proposal not simple majority"
            ]
          },
          {
            "Name": "InvalidHash",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Invalid hash"
            ]
          },
          {
            "Name": "NoProposal",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No external proposal"
            ]
          },
          {
            "Name": "AlreadyVetoed",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Identity may not veto a proposal twice"
            ]
          },
          {
            "Name": "ReferendumInvalid",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Vote given for invalid referendum"
            ]
          },
          {
            "Name": "NoneWaiting",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "No proposals waiting"
            ]
          },
          {
            "Name": "NotVoter",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The given account did not vote on the referendum."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The actor has no permission to conduct the action."
            ]
          },
          {
            "Name": "AlreadyDelegating",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The account is already delegating."
            ]
          },
          {
            "Name": "InsufficientFunds",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Too high a balance was provided that the account cannot afford."
            ]
          },
          {
            "Name": "NotDelegating",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The account is not currently delegating."
            ]
          },
          {
            "Name": "VotesExist",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The account currently has votes attached to it and the operation cannot succeed until",
              "these are removed, either through `unvote` or `reap_vote`."
            ]
          },
          {
            "Name": "InstantNotAllowed",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The instant referendum origin is currently disallowed."
            ]
          },
          {
            "Name": "Nonsense",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Delegation to oneself makes no sense."
            ]
          },
          {
            "Name": "WrongUpperBound",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Invalid upper bound."
            ]
          },
          {
            "Name": "MaxVotesReached",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Maximum number of votes reached."
            ]
          },
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Maximum number of items reached."
            ]
          },
          {
            "Name": "VotingPeriodLow",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Voting period too low"
            ]
          },
          {
            "Name": "PreimageNotExist",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The preimage does not exist."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "519": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 124
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 11
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "520": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "ProposalIndex",
            "TypeId": 4
          },
          {
            "Name": "threshold",
            "TypeName": "MemberCount",
            "TypeId": 4
          },
          {
            "Name": "ayes",
            "TypeName": "Vec<AccountId>",
            "TypeId": 59
          },
          {
            "Name": "nays",
            "TypeName": "Vec<AccountId>",
            "TypeId": 59
          },
          {
            "Name": "end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_collective",
          "Votes"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "521": {
        "Variants": [
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is not a member"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Proposal must exist"
            ]
          },
          {
            "Name": "WrongIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Mismatched index"
            ]
          },
          {
            "Name": "DuplicateVote",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Duplicate vote ignored"
            ]
          },
          {
            "Name": "AlreadyInitialized",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Members are already initialized!"
            ]
          },
          {
            "Name": "TooEarly",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "Name": "TooManyProposals",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "Name": "WrongProposalWeight",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "Name": "WrongProposalLength",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given length bound for the proposal was too low."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "522": {
        "Variants": [
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is not a member"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Proposal must exist"
            ]
          },
          {
            "Name": "WrongIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Mismatched index"
            ]
          },
          {
            "Name": "DuplicateVote",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Duplicate vote ignored"
            ]
          },
          {
            "Name": "AlreadyInitialized",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Members are already initialized!"
            ]
          },
          {
            "Name": "TooEarly",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "Name": "TooManyProposals",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "Name": "WrongProposalWeight",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "Name": "WrongProposalLength",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given length bound for the proposal was too low."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "523": {
        "TypeFields": [
          {
            "Name": "proposer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "beneficiary",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_treasury",
          "Proposal"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "524": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 424
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "525": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "526": {
        "Variants": [
          {
            "Name": "InsufficientProposersBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Proposer's balance is too low."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No proposal or bounty at that index."
            ]
          },
          {
            "Name": "TooManyApprovals",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Too many approvals in the queue."
            ]
          },
          {
            "Name": "InsufficientPermission",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The spend origin is valid but the amount it is allowed to spend is lower than the",
              "amount to be spent."
            ]
          },
          {
            "Name": "ProposalNotApproved",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Proposal has not been approved."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the treasury pallet."
        ]
      },
      "527": {
        "Variants": [
          {
            "Name": "Unrequested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "(AccountId, Balance)",
                "TypeId": 528
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "Option<(AccountId, Balance)>",
                "TypeId": 529
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "len",
                "TypeName": "Option<u32>",
                "TypeId": 276
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_preimage",
          "RequestStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "528": {
        "TypeIds": [
          0,
          6
        ],
        "TypeDef": "Tuple"
      },
      "529": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 528
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 528
          }
        ],
        "TypeDef": "Variant"
      },
      "530": {
        "TypeIds": [
          11,
          4
        ],
        "TypeDef": "Tuple"
      },
      "531": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "532": {
        "Variants": [
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Preimage is too large to store on-chain."
            ]
          },
          {
            "Name": "AlreadyNoted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Preimage has already been noted on-chain."
            ]
          },
          {
            "Name": "NotAuthorized",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The user is not authorized to perform this action."
            ]
          },
          {
            "Name": "NotNoted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The preimage cannot be removed since it has not yet been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "A preimage may not be removed when there are outstanding requests."
            ]
          },
          {
            "Name": "NotRequested",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The preimage request cannot be removed since no outstanding requests exist."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "533": {
        "Variants": null,
        "Path": [
          "pallet_xvm",
          "pallet",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "534": {
        "Variants": [
          {
            "Name": "RequireSudo",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Sender must be the Sudo account"
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the Sudo pallet"
        ]
      },
      "535": {
        "TypeFields": [
          {
            "TypeName": "sp_runtime::generic::UncheckedExtrinsic<Address, Call, Signature, Extra\n>",
            "TypeId": 551
          }
        ],
        "Path": [
          "fp_self_contained",
          "unchecked_extrinsic",
          "UncheckedExtrinsic"
        ],
        "TypeParams": [
          {
            "Name": "Address",
            "TypeId": 179
          },
          {
            "Name": "Call",
            "TypeId": 177
          },
          {
            "Name": "Signature",
            "TypeId": 536
          },
          {
            "Name": "Extra",
            "TypeId": 542
          }
        ],
        "TypeDef": "Composite"
      },
      "536": {
        "Variants": [
          {
            "Name": "Ed25519",
            "TypeFields": [
              {
                "TypeName": "ed25519::Signature",
                "TypeId": 537
              }
            ],
            "Index": 0
          },
          {
            "Name": "Sr25519",
            "TypeFields": [
              {
                "TypeName": "sr25519::Signature",
                "TypeId": 539
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ecdsa",
            "TypeFields": [
              {
                "TypeName": "ecdsa::Signature",
                "TypeId": 540
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "sp_runtime",
          "MultiSignature"
        ],
        "TypeDef": "Variant"
      },
      "537": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 538
          }
        ],
        "Path": [
          "sp_core",
          "ed25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "538": {
        "Length": 64,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "539": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 538
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "540": {
        "TypeFields": [
          {
            "TypeName": "[u8; 65]",
            "TypeId": 541
          }
        ],
        "Path": [
          "sp_core",
          "ecdsa",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "541": {
        "Length": 65,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "542": {
        "TypeIds": [
          543,
          544,
          545,
          546,
          548,
          549,
          550
        ],
        "TypeDef": "Tuple"
      },
      "543": {
        "Path": [
          "frame_system",
          "extensions",
          "check_spec_version",
          "CheckSpecVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "544": {
        "Path": [
          "frame_system",
          "extensions",
          "check_tx_version",
          "CheckTxVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "545": {
        "Path": [
          "frame_system",
          "extensions",
          "check_genesis",
          "CheckGenesis"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "546": {
        "TypeFields": [
          {
            "TypeName": "Era",
            "TypeId": 547
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_mortality",
          "CheckMortality"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "547": {
        "Variants": [
          {
            "Name": "Immortal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Mortal1",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 1
          },
          {
            "Name": "Mortal2",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 2
          },
          {
            "Name": "Mortal3",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 3
          },
          {
            "Name": "Mortal4",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "Mortal5",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 5
          },
          {
            "Name": "Mortal6",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 6
          },
          {
            "Name": "Mortal7",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 7
          },
          {
            "Name": "Mortal8",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 8
          },
          {
            "Name": "Mortal9",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 9
          },
          {
            "Name": "Mortal10",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 10
          },
          {
            "Name": "Mortal11",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 11
          },
          {
            "Name": "Mortal12",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 12
          },
          {
            "Name": "Mortal13",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 13
          },
          {
            "Name": "Mortal14",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 14
          },
          {
            "Name": "Mortal15",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 15
          },
          {
            "Name": "Mortal16",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 16
          },
          {
            "Name": "Mortal17",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 17
          },
          {
            "Name": "Mortal18",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 18
          },
          {
            "Name": "Mortal19",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 19
          },
          {
            "Name": "Mortal20",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 20
          },
          {
            "Name": "Mortal21",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 21
          },
          {
            "Name": "Mortal22",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 22
          },
          {
            "Name": "Mortal23",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 23
          },
          {
            "Name": "Mortal24",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 24
          },
          {
            "Name": "Mortal25",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 25
          },
          {
            "Name": "Mortal26",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 26
          },
          {
            "Name": "Mortal27",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 27
          },
          {
            "Name": "Mortal28",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 28
          },
          {
            "Name": "Mortal29",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 29
          },
          {
            "Name": "Mortal30",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 30
          },
          {
            "Name": "Mortal31",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 31
          },
          {
            "Name": "Mortal32",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 32
          },
          {
            "Name": "Mortal33",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 33
          },
          {
            "Name": "Mortal34",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 34
          },
          {
            "Name": "Mortal35",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 35
          },
          {
            "Name": "Mortal36",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 36
          },
          {
            "Name": "Mortal37",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 37
          },
          {
            "Name": "Mortal38",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 38
          },
          {
            "Name": "Mortal39",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 39
          },
          {
            "Name": "Mortal40",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 40
          },
          {
            "Name": "Mortal41",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 41
          },
          {
            "Name": "Mortal42",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 42
          },
          {
            "Name": "Mortal43",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 43
          },
          {
            "Name": "Mortal44",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 44
          },
          {
            "Name": "Mortal45",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 45
          },
          {
            "Name": "Mortal46",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 46
          },
          {
            "Name": "Mortal47",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 47
          },
          {
            "Name": "Mortal48",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 48
          },
          {
            "Name": "Mortal49",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 49
          },
          {
            "Name": "Mortal50",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 50
          },
          {
            "Name": "Mortal51",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 51
          },
          {
            "Name": "Mortal52",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 52
          },
          {
            "Name": "Mortal53",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 53
          },
          {
            "Name": "Mortal54",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 54
          },
          {
            "Name": "Mortal55",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 55
          },
          {
            "Name": "Mortal56",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 56
          },
          {
            "Name": "Mortal57",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 57
          },
          {
            "Name": "Mortal58",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 58
          },
          {
            "Name": "Mortal59",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 59
          },
          {
            "Name": "Mortal60",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 60
          },
          {
            "Name": "Mortal61",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 61
          },
          {
            "Name": "Mortal62",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 62
          },
          {
            "Name": "Mortal63",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 63
          },
          {
            "Name": "Mortal64",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 64
          },
          {
            "Name": "Mortal65",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 65
          },
          {
            "Name": "Mortal66",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 66
          },
          {
            "Name": "Mortal67",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 67
          },
          {
            "Name": "Mortal68",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 68
          },
          {
            "Name": "Mortal69",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 69
          },
          {
            "Name": "Mortal70",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 70
          },
          {
            "Name": "Mortal71",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 71
          },
          {
            "Name": "Mortal72",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 72
          },
          {
            "Name": "Mortal73",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 73
          },
          {
            "Name": "Mortal74",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 74
          },
          {
            "Name": "Mortal75",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 75
          },
          {
            "Name": "Mortal76",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 76
          },
          {
            "Name": "Mortal77",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 77
          },
          {
            "Name": "Mortal78",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 78
          },
          {
            "Name": "Mortal79",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 79
          },
          {
            "Name": "Mortal80",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 80
          },
          {
            "Name": "Mortal81",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 81
          },
          {
            "Name": "Mortal82",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 82
          },
          {
            "Name": "Mortal83",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 83
          },
          {
            "Name": "Mortal84",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 84
          },
          {
            "Name": "Mortal85",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 85
          },
          {
            "Name": "Mortal86",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 86
          },
          {
            "Name": "Mortal87",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 87
          },
          {
            "Name": "Mortal88",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 88
          },
          {
            "Name": "Mortal89",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 89
          },
          {
            "Name": "Mortal90",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 90
          },
          {
            "Name": "Mortal91",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 91
          },
          {
            "Name": "Mortal92",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 92
          },
          {
            "Name": "Mortal93",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 93
          },
          {
            "Name": "Mortal94",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 94
          },
          {
            "Name": "Mortal95",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 95
          },
          {
            "Name": "Mortal96",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 96
          },
          {
            "Name": "Mortal97",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 97
          },
          {
            "Name": "Mortal98",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 98
          },
          {
            "Name": "Mortal99",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 99
          },
          {
            "Name": "Mortal100",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 100
          },
          {
            "Name": "Mortal101",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 101
          },
          {
            "Name": "Mortal102",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 102
          },
          {
            "Name": "Mortal103",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 103
          },
          {
            "Name": "Mortal104",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 104
          },
          {
            "Name": "Mortal105",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 105
          },
          {
            "Name": "Mortal106",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 106
          },
          {
            "Name": "Mortal107",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 107
          },
          {
            "Name": "Mortal108",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 108
          },
          {
            "Name": "Mortal109",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 109
          },
          {
            "Name": "Mortal110",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 110
          },
          {
            "Name": "Mortal111",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 111
          },
          {
            "Name": "Mortal112",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 112
          },
          {
            "Name": "Mortal113",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 113
          },
          {
            "Name": "Mortal114",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 114
          },
          {
            "Name": "Mortal115",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 115
          },
          {
            "Name": "Mortal116",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 116
          },
          {
            "Name": "Mortal117",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 117
          },
          {
            "Name": "Mortal118",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 118
          },
          {
            "Name": "Mortal119",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 119
          },
          {
            "Name": "Mortal120",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 120
          },
          {
            "Name": "Mortal121",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 121
          },
          {
            "Name": "Mortal122",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 122
          },
          {
            "Name": "Mortal123",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 123
          },
          {
            "Name": "Mortal124",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 124
          },
          {
            "Name": "Mortal125",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 125
          },
          {
            "Name": "Mortal126",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 126
          },
          {
            "Name": "Mortal127",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 127
          },
          {
            "Name": "Mortal128",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 128
          },
          {
            "Name": "Mortal129",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 129
          },
          {
            "Name": "Mortal130",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 130
          },
          {
            "Name": "Mortal131",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 131
          },
          {
            "Name": "Mortal132",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 132
          },
          {
            "Name": "Mortal133",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 133
          },
          {
            "Name": "Mortal134",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 134
          },
          {
            "Name": "Mortal135",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 135
          },
          {
            "Name": "Mortal136",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 136
          },
          {
            "Name": "Mortal137",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 137
          },
          {
            "Name": "Mortal138",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 138
          },
          {
            "Name": "Mortal139",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 139
          },
          {
            "Name": "Mortal140",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 140
          },
          {
            "Name": "Mortal141",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 141
          },
          {
            "Name": "Mortal142",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 142
          },
          {
            "Name": "Mortal143",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 143
          },
          {
            "Name": "Mortal144",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 144
          },
          {
            "Name": "Mortal145",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 145
          },
          {
            "Name": "Mortal146",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 146
          },
          {
            "Name": "Mortal147",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 147
          },
          {
            "Name": "Mortal148",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 148
          },
          {
            "Name": "Mortal149",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 149
          },
          {
            "Name": "Mortal150",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 150
          },
          {
            "Name": "Mortal151",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 151
          },
          {
            "Name": "Mortal152",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 152
          },
          {
            "Name": "Mortal153",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 153
          },
          {
            "Name": "Mortal154",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 154
          },
          {
            "Name": "Mortal155",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 155
          },
          {
            "Name": "Mortal156",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 156
          },
          {
            "Name": "Mortal157",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 157
          },
          {
            "Name": "Mortal158",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 158
          },
          {
            "Name": "Mortal159",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 159
          },
          {
            "Name": "Mortal160",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 160
          },
          {
            "Name": "Mortal161",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 161
          },
          {
            "Name": "Mortal162",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 162
          },
          {
            "Name": "Mortal163",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 163
          },
          {
            "Name": "Mortal164",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 164
          },
          {
            "Name": "Mortal165",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 165
          },
          {
            "Name": "Mortal166",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 166
          },
          {
            "Name": "Mortal167",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 167
          },
          {
            "Name": "Mortal168",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 168
          },
          {
            "Name": "Mortal169",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 169
          },
          {
            "Name": "Mortal170",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 170
          },
          {
            "Name": "Mortal171",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 171
          },
          {
            "Name": "Mortal172",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 172
          },
          {
            "Name": "Mortal173",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 173
          },
          {
            "Name": "Mortal174",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 174
          },
          {
            "Name": "Mortal175",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 175
          },
          {
            "Name": "Mortal176",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 176
          },
          {
            "Name": "Mortal177",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 177
          },
          {
            "Name": "Mortal178",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 178
          },
          {
            "Name": "Mortal179",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 179
          },
          {
            "Name": "Mortal180",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 180
          },
          {
            "Name": "Mortal181",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 181
          },
          {
            "Name": "Mortal182",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 182
          },
          {
            "Name": "Mortal183",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 183
          },
          {
            "Name": "Mortal184",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 184
          },
          {
            "Name": "Mortal185",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 185
          },
          {
            "Name": "Mortal186",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 186
          },
          {
            "Name": "Mortal187",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 187
          },
          {
            "Name": "Mortal188",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 188
          },
          {
            "Name": "Mortal189",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 189
          },
          {
            "Name": "Mortal190",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 190
          },
          {
            "Name": "Mortal191",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 191
          },
          {
            "Name": "Mortal192",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 192
          },
          {
            "Name": "Mortal193",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 193
          },
          {
            "Name": "Mortal194",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 194
          },
          {
            "Name": "Mortal195",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 195
          },
          {
            "Name": "Mortal196",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 196
          },
          {
            "Name": "Mortal197",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 197
          },
          {
            "Name": "Mortal198",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 198
          },
          {
            "Name": "Mortal199",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 199
          },
          {
            "Name": "Mortal200",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 200
          },
          {
            "Name": "Mortal201",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 201
          },
          {
            "Name": "Mortal202",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 202
          },
          {
            "Name": "Mortal203",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 203
          },
          {
            "Name": "Mortal204",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 204
          },
          {
            "Name": "Mortal205",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 205
          },
          {
            "Name": "Mortal206",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 206
          },
          {
            "Name": "Mortal207",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 207
          },
          {
            "Name": "Mortal208",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 208
          },
          {
            "Name": "Mortal209",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 209
          },
          {
            "Name": "Mortal210",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 210
          },
          {
            "Name": "Mortal211",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 211
          },
          {
            "Name": "Mortal212",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 212
          },
          {
            "Name": "Mortal213",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 213
          },
          {
            "Name": "Mortal214",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 214
          },
          {
            "Name": "Mortal215",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 215
          },
          {
            "Name": "Mortal216",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 216
          },
          {
            "Name": "Mortal217",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 217
          },
          {
            "Name": "Mortal218",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 218
          },
          {
            "Name": "Mortal219",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 219
          },
          {
            "Name": "Mortal220",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 220
          },
          {
            "Name": "Mortal221",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 221
          },
          {
            "Name": "Mortal222",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 222
          },
          {
            "Name": "Mortal223",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 223
          },
          {
            "Name": "Mortal224",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 224
          },
          {
            "Name": "Mortal225",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 225
          },
          {
            "Name": "Mortal226",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 226
          },
          {
            "Name": "Mortal227",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 227
          },
          {
            "Name": "Mortal228",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 228
          },
          {
            "Name": "Mortal229",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 229
          },
          {
            "Name": "Mortal230",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 230
          },
          {
            "Name": "Mortal231",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 231
          },
          {
            "Name": "Mortal232",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 232
          },
          {
            "Name": "Mortal233",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 233
          },
          {
            "Name": "Mortal234",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 234
          },
          {
            "Name": "Mortal235",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 235
          },
          {
            "Name": "Mortal236",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 236
          },
          {
            "Name": "Mortal237",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 237
          },
          {
            "Name": "Mortal238",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 238
          },
          {
            "Name": "Mortal239",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 239
          },
          {
            "Name": "Mortal240",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 240
          },
          {
            "Name": "Mortal241",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 241
          },
          {
            "Name": "Mortal242",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 242
          },
          {
            "Name": "Mortal243",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 243
          },
          {
            "Name": "Mortal244",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 244
          },
          {
            "Name": "Mortal245",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 245
          },
          {
            "Name": "Mortal246",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 246
          },
          {
            "Name": "Mortal247",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 247
          },
          {
            "Name": "Mortal248",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 248
          },
          {
            "Name": "Mortal249",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 249
          },
          {
            "Name": "Mortal250",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 250
          },
          {
            "Name": "Mortal251",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 251
          },
          {
            "Name": "Mortal252",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 252
          },
          {
            "Name": "Mortal253",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 253
          },
          {
            "Name": "Mortal254",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 254
          },
          {
            "Name": "Mortal255",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 255
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "era",
          "Era"
        ],
        "TypeDef": "Variant"
      },
      "548": {
        "TypeFields": [
          {
            "TypeName": "T::Index",
            "TypeId": 69
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_nonce",
          "CheckNonce"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "549": {
        "Path": [
          "frame_system",
          "extensions",
          "check_weight",
          "CheckWeight"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "550": {
        "TypeFields": [
          {
            "TypeName": "BalanceOf<T>",
            "TypeId": 72
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "ChargeTransactionPayment"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "551": {
        "TypeFields": [
          {
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "unchecked_extrinsic",
          "UncheckedExtrinsic"
        ],
        "TypeParams": [
          {
            "Name": "Address",
            "TypeId": 179
          },
          {
            "Name": "Call",
            "TypeId": 177
          },
          {
            "Name": "Signature",
            "TypeId": 536
          },
          {
            "Name": "Extra",
            "TypeId": 542
          }
        ],
        "TypeDef": "Composite"
      },
      "552": {
        "Path": [
          "shibuya_runtime",
          "Runtime"
        ],
        "TypeDef": "Composite"
      }
    },
    "Modules": {
      "10": {
        "Name": "System",
        "Storage": {
          "Prefix": "System",
          "Entries": [
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 3
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The full account information for a particular account ID."
              ]
            },
            {
              "Name": "ExtrinsicCount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total extrinsics count for the current block."
              ]
            },
            {
              "Name": "BlockWeight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAAAA",
              "Docs": [
                " The current weight for the block."
              ]
            },
            {
              "Name": "AllExtrinsicsLen",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total length (in bytes) for all extrinsics put together, for the current block."
              ]
            },
            {
              "Name": "BlockHash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 11
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Map of block numbers to block hashes."
              ]
            },
            {
              "Name": "ExtrinsicData",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Extrinsics data for the current block (maps an extrinsic's index to its data)."
              ]
            },
            {
              "Name": "Number",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The current block number being processed. Set by `execute_block`."
              ]
            },
            {
              "Name": "ParentHash",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Hash of the previous block."
              ]
            },
            {
              "Name": "Digest",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 13,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Digest of the current block, also part of the block header."
              ]
            },
            {
              "Name": "Events",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 17,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Events deposited for the current block.",
                "",
                " NOTE: The item is unbound and should therefore never be read on chain.",
                " It could otherwise inflate the PoV size of a block.",
                "",
                " Events have a large in-memory size. Box the events to not go out-of-memory",
                " just in case someone still reads them from within the runtime."
              ]
            },
            {
              "Name": "EventCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of events in the `Events<T>` list."
              ]
            },
            {
              "Name": "EventTopics",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 11,
                  "Value": 157
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                " of events in the `<Events<T>>` list.",
                "",
                " All topic vectors have deterministic storage locations depending on the topic. This",
                " allows light-clients to leverage the changes trie storage tracking mechanism and",
                " in case of changes fetch the list of events of interest.",
                "",
                " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                " the `EventIndex` then in case if the topic has the same contents on the next block",
                " no notification will be triggered thus the event might be lost."
              ]
            },
            {
              "Name": "LastRuntimeUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 158,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
              ]
            },
            {
              "Name": "UpgradedToU32RefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 51,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
              ]
            },
            {
              "Name": "UpgradedToTripleRefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 51,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                " (default) if not."
              ]
            },
            {
              "Name": "ExecutionPhase",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 156,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The execution phase of the block."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 159
        },
        "Events": {
          "TypeId": 20
        },
        "Constants": [
          {
            "Name": "BlockWeights",
            "TypeId": 163,
            "Value": "Yk/XWgAHAIhSanQCAEABAsDNFwABBwACj6VLAgDQAAEHAOa9T1cCAPAAAQAAAsDNFwABBwCkI8BoAgAgAQEHAIhSanQCAEABAQcAopQaHQIAUAACwM0XAAAAAA==",
            "Docs": [
              " Block & extrinsics weights: base values and limits."
            ]
          },
          {
            "Name": "BlockLength",
            "TypeId": 167,
            "Value": "AAA8AAAAUAAAAFAA",
            "Docs": [
              " The maximum length of a block (in bytes)."
            ]
          },
          {
            "Name": "BlockHashCount",
            "TypeId": 4,
            "Value": "ABAAAA==",
            "Docs": [
              " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
            ]
          },
          {
            "Name": "DbWeight",
            "TypeId": 169,
            "Value": "QHh9AQAAAAAA4fUFAAAAAA==",
            "Docs": [
              " The weight of runtime database operations the runtime can invoke."
            ]
          },
          {
            "Name": "Version",
            "TypeId": 170,
            "Value": "HHNoaWJ1eWEcc2hpYnV5YQEAAABlAAAAAAAAADjfastomQdgmwQAAAA345f8fJH15AEAAADdcY1cxTJi1AEAAABA/jrUAfiVmgYAAADSvJiX7tCPFQMAAAD3iyeL5T9FTAIAAAC8nYmQT1uSPwEAAAA3yLsTUKmiqAMAAADz/xTVq1JwWQMAAACrPAVyKR/riwEAAADqk+Pxbz1pYgIAAABYIhH2W7FLiQQAAADmWwDkbO3QqgIAAABotmuhIsk/pwIAAAACAAAAAQ==",
            "Docs": [
              " Get the chain's current version."
            ]
          },
          {
            "Name": "SS58Prefix",
            "TypeId": 41,
            "Value": "BQA=",
            "Docs": [
              " The designated SS58 prefix of this chain.",
              "",
              " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
              " that the runtime should know about the prefix in order to make use of it as",
              " an identifier of the chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 174
        },
        "Index": 10
      },
      "11": {
        "Name": "Utility",
        "Storage": null,
        "Calls": {
          "TypeId": 175
        },
        "Events": {
          "TypeId": 29
        },
        "Constants": [
          {
            "Name": "batched_calls_limit",
            "TypeId": 4,
            "Value": "qioAAA==",
            "Docs": [
              " The limit on the number of batched calls."
            ]
          }
        ],
        "Errors": {
          "TypeId": 331
        },
        "Index": 11
      },
      "12": {
        "Name": "Identity",
        "Storage": {
          "Prefix": "Identity",
          "Entries": [
            {
              "Name": "IdentityOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 332
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information that is pertinent to identify the entity behind an account.",
                "",
                " TWOX-NOTE: OK ��� `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "SuperOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 216
                }
              },
              "Default": "AA==",
              "Docs": [
                " The super-identity of an alternative \"sub\" identity together with its name, within that",
                " context. If the account is not some other account's sub-identity, then just `None`."
              ]
            },
            {
              "Name": "SubsOf",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 336
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Alternative \"sub\" identities of this account.",
                "",
                " The first item is the deposit, the second is a vector of the accounts.",
                "",
                " TWOX-NOTE: OK ��� `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "Registrars",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 338,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The set of registrars. Not expected to get very big as can only be added through a",
                " special origin (likely a council motion).",
                "",
                " The index into this can be cast to `RegistrarIndex` to get a valid value."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 178
        },
        "Events": {
          "TypeId": 32
        },
        "Constants": [
          {
            "Name": "BasicDeposit",
            "TypeId": 6,
            "Value": "AICYQqpfPA4AAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for a registered identity"
            ]
          },
          {
            "Name": "FieldDeposit",
            "TypeId": 6,
            "Value": "AICEP6pyFwAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit per additional field for a registered identity."
            ]
          },
          {
            "Name": "SubAccountDeposit",
            "TypeId": 6,
            "Value": "AECzEAaL8w0AAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for a registered subaccount. This should account for the fact",
              " that one storage item's value will increase by the size of an account ID, and there will",
              " be another trie item whose value is the size of an account ID plus 32 bytes."
            ]
          },
          {
            "Name": "MaxSubAccounts",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of sub-accounts allowed per identified account."
            ]
          },
          {
            "Name": "MaxAdditionalFields",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
              " required to access an identity, but can be pretty high."
            ]
          },
          {
            "Name": "MaxRegistrars",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
              " of, e.g., updating judgements."
            ]
          }
        ],
        "Errors": {
          "TypeId": 342
        },
        "Index": 12
      },
      "13": {
        "Name": "Timestamp",
        "Storage": {
          "Prefix": "Timestamp",
          "Entries": [
            {
              "Name": "Now",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Current time for the current block."
              ]
            },
            {
              "Name": "DidUpdate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 51,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Did the timestamp get updated in this block?"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 220
        },
        "Events": null,
        "Constants": [
          {
            "Name": "MinimumPeriod",
            "TypeId": 10,
            "Value": "cBcAAAAAAAA=",
            "Docs": [
              " The minimum period between blocks. Beware that this is different to the *expected*",
              " period that the block production apparatus provides. Your chosen consensus system will",
              " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
              " double this period on default settings."
            ]
          }
        ],
        "Errors": null,
        "Index": 13
      },
      "14": {
        "Name": "Multisig",
        "Storage": {
          "Prefix": "Multisig",
          "Entries": [
            {
              "Name": "Multisigs",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 343,
                  "Value": 344
                }
              },
              "Default": "AA==",
              "Docs": [
                " The set of open multisig operations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 221
        },
        "Events": {
          "TypeId": 33
        },
        "Constants": [
          {
            "Name": "DepositBase",
            "TypeId": 6,
            "Value": "AABqUUH6/w0AAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a multisig execution or to",
              " store a dispatch call for later.",
              "",
              " This is held for an additional storage item whose value size is",
              " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
              " `32 + sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "DepositFactor",
            "TypeId": 6,
            "Value": "AABID2JeCwAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per unit threshold when creating a multisig execution.",
              "",
              " This is held for adding 32 bytes more into a pre-existing storage value."
            ]
          },
          {
            "Name": "MaxSignatories",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum amount of signatories allowed in the multisig."
            ]
          }
        ],
        "Errors": {
          "TypeId": 346
        },
        "Index": 14
      },
      "15": {
        "Name": "EthCall",
        "Storage": null,
        "Calls": {
          "TypeId": 223
        },
        "Events": {
          "TypeId": 35
        },
        "Constants": [
          {
            "Name": "CallFee",
            "TypeId": 6,
            "Value": "AACKXXhFYwEAAAAAAAAAAA==",
            "Docs": [
              " The call processing fee amount."
            ]
          },
          {
            "Name": "CallMagicNumber",
            "TypeId": 41,
            "Value": "Uf8=",
            "Docs": [
              " The call magic number."
            ]
          }
        ],
        "Errors": {
          "TypeId": 347
        },
        "Index": 15
      },
      "16": {
        "Name": "RandomnessCollectiveFlip",
        "Storage": {
          "Prefix": "RandomnessCollectiveFlip",
          "Entries": [
            {
              "Name": "RandomMaterial",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 348,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Series of block headers from the last 81 blocks that acts as random seed material. This",
                " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                " the oldest hash."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 16
      },
      "17": {
        "Name": "Scheduler",
        "Storage": {
          "Prefix": "Scheduler",
          "Entries": [
            {
              "Name": "IncompleteSince",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Agenda",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 349
                }
              },
              "Default": "AA==",
              "Docs": [
                " Items to be executed, indexed by the block number that they should be executed on."
              ]
            },
            {
              "Name": "Lookup",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 1,
                  "Value": 37
                }
              },
              "Default": "AA==",
              "Docs": [
                " Lookup from a name to the block number and index of the task.",
                "",
                " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                " identities."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 224
        },
        "Events": {
          "TypeId": 36
        },
        "Constants": [
          {
            "Name": "MaximumWeight",
            "TypeId": 8,
            "Value": "BwDmvU9XAgDwAA==",
            "Docs": [
              " The maximum weight that may be scheduled per block for any dispatchables."
            ]
          },
          {
            "Name": "MaxScheduledPerBlock",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of scheduled calls in the queue for a single block."
            ]
          }
        ],
        "Errors": {
          "TypeId": 353
        },
        "Index": 17
      },
      "18": {
        "Name": "Proxy",
        "Storage": {
          "Prefix": "Proxy",
          "Entries": [
            {
              "Name": "Proxies",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 354
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The set of account proxies. Maps the account which has delegated to the accounts",
                " which are being delegated to, together with the amount held on deposit."
              ]
            },
            {
              "Name": "Announcements",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 358
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The announcements made by the proxy (key)."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 226
        },
        "Events": {
          "TypeId": 39
        },
        "Constants": [
          {
            "Name": "ProxyDepositBase",
            "TypeId": 6,
            "Value": "AAA2K0yO4w0AAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a proxy.",
              "",
              " This is held for an additional storage item whose value size is",
              " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "ProxyDepositFactor",
            "TypeId": 6,
            "Value": "AEDCH1W5CwAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per proxy added.",
              "",
              " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
              " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
              " into account `32 + proxy_type.encode().len()` bytes of data."
            ]
          },
          {
            "Name": "MaxProxies",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum amount of proxies allowed for a single account."
            ]
          },
          {
            "Name": "MaxPending",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum amount of time-delayed announcements that are allowed to be pending."
            ]
          },
          {
            "Name": "AnnouncementDepositBase",
            "TypeId": 6,
            "Value": "AAA2K0yO4w0AAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating an announcement.",
              "",
              " This is held when a new storage item holding a `Balance` is created (typically 16",
              " bytes)."
            ]
          },
          {
            "Name": "AnnouncementDepositFactor",
            "TypeId": 6,
            "Value": "AICEP6pyFwAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per announcement made.",
              "",
              " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
              " into a pre-existing storage value."
            ]
          }
        ],
        "Errors": {
          "TypeId": 362
        },
        "Index": 18
      },
      "20": {
        "Name": "ParachainSystem",
        "Storage": {
          "Prefix": "ParachainSystem",
          "Entries": [
            {
              "Name": "PendingValidationCode",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " In case of a scheduled upgrade, this storage field contains the validation code to be applied.",
                "",
                " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]",
                " which will result the next block process with the new validation code. This concludes the upgrade process.",
                "",
                " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"
              ]
            },
            {
              "Name": "NewValidationCode",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Validation code that is set by the parachain and is to be communicated to collator and",
                " consequently the relay-chain.",
                "",
                " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                " the value."
              ]
            },
            {
              "Name": "ValidationData",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 230,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The [`PersistedValidationData`] set for this block.",
                " This value is expected to be set only once per block and it's never stored",
                " in the trie."
              ]
            },
            {
              "Name": "DidSetValidationCode",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 51,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Were the validation data set to notify the relay chain?"
              ]
            },
            {
              "Name": "LastRelayChainBlockNumber",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The relay chain block number associated with the last parachain block."
              ]
            },
            {
              "Name": "UpgradeRestrictionSignal",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 363,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                " candidate will be invalid.",
                "",
                " This storage item is a mirror of the corresponding value for the current parachain from the",
                " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                " set after the inherent."
              ]
            },
            {
              "Name": "RelayStateProof",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 232,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The state proof for the last relay parent block.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "RelevantMessagingState",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 365,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The snapshot of some state related to messaging relevant to the current parachain as per",
                " the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "HostConfiguration",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 369,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The parachain host configuration that was obtained from the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "LastDmqMqcHead",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 370,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The last downward message queue chain head we have observed.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "Name": "LastHrmpMqcHeads",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 371,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The message queue chain heads we have observed per each channel incoming channel.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "Name": "ProcessedDownwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of downward messages processed in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "HrmpWatermark",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " HRMP watermark that was set in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "HrmpOutboundMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 374,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " HRMP messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "UpwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 162,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Upward messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "PendingUpwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 162,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Upward messages that are still pending and not yet send to the relay chain."
              ]
            },
            {
              "Name": "AnnouncedHrmpMessagesPerCandidate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                " announcing the weight of `on_initialize` and `on_finalize`."
              ]
            },
            {
              "Name": "ReservedXcmpWeightOverride",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "Name": "ReservedDmpWeightOverride",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The weight we reserve at the beginning of the block for processing DMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "Name": "AuthorizedUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The next authorized upgrade, if there is one."
              ]
            },
            {
              "Name": "CustomValidationHeadData",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " A custom head data that should be returned as result of `validate_block`.",
                "",
                " See [`Pallet::set_custom_validation_head_data`] for more information."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 228
        },
        "Events": {
          "TypeId": 42
        },
        "Constants": [],
        "Errors": {
          "TypeId": 376
        },
        "Index": 20
      },
      "21": {
        "Name": "ParachainInfo",
        "Storage": {
          "Prefix": "ParachainInfo",
          "Entries": [
            {
              "Name": "ParachainId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 63,
                "Item2": null
              },
              "Default": "ZAAAAA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 241
        },
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 21
      },
      "30": {
        "Name": "TransactionPayment",
        "Storage": {
          "Prefix": "TransactionPayment",
          "Entries": [
            {
              "Name": "NextFeeMultiplier",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 377,
                "Item2": null
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 378,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 43
        },
        "Constants": [
          {
            "Name": "OperationalFeeMultiplier",
            "TypeId": 2,
            "Value": "BQ==",
            "Docs": [
              " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
              " `priority`",
              "",
              " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
              " added to a tip component in regular `priority` calculations.",
              " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
              " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
              "",
              " ```rust,ignore",
              " // For `Normal`",
              " let priority = priority_calc(tip);",
              "",
              " // For `Operational`",
              " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
              " let priority = priority_calc(tip + virtual_tip);",
              " ```",
              "",
              " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
              " sent with the transaction. So, not only does the transaction get a priority bump based",
              " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
              " transactions."
            ]
          }
        ],
        "Errors": null,
        "Index": 30
      },
      "31": {
        "Name": "Balances",
        "Storage": {
          "Prefix": "Balances",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units issued in the system."
              ]
            },
            {
              "Name": "InactiveIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units of outstanding deactivated balance in the system."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 5
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The Balances pallet example of storing the balance of an account.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                "  }",
                " ```",
                "",
                " You can also store the balance of an account in the `System` pallet.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "   type AccountStore = System",
                "  }",
                " ```",
                "",
                " But this comes with tradeoffs, storing account balances in the system pallet stores",
                " `frame_system` data alongside the account data contrary to storing account balances in the",
                " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                " NOTE: This is only used in the case that this pallet is used to store balances."
              ]
            },
            {
              "Name": "Locks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 379
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any liquidity locks on some account balances.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock."
              ]
            },
            {
              "Name": "Reserves",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 383
                }
              },
              "Default": "AA==",
              "Docs": [
                " Named reserves on some account balances."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 242
        },
        "Events": {
          "TypeId": 44
        },
        "Constants": [
          {
            "Name": "ExistentialDeposit",
            "TypeId": 6,
            "Value": "QEIPAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount required to keep an account open."
            ]
          },
          {
            "Name": "MaxLocks",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of locks that should exist on an account.",
              " Not strictly enforced, but used for weight estimation."
            ]
          },
          {
            "Name": "MaxReserves",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of named reserves that can exist on an account."
            ]
          }
        ],
        "Errors": {
          "TypeId": 386
        },
        "Index": 31
      },
      "32": {
        "Name": "Vesting",
        "Storage": {
          "Prefix": "Vesting",
          "Entries": [
            {
              "Name": "Vesting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 387
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information regarding the vesting of a given account."
              ]
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 389,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Storage version of the pallet.",
                "",
                " New networks start with latest version, as determined by the genesis build."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 243
        },
        "Events": {
          "TypeId": 46
        },
        "Constants": [
          {
            "Name": "MinVestedTransfer",
            "TypeId": 6,
            "Value": "AABkp7O24A0AAAAAAAAAAA==",
            "Docs": [
              " The minimum amount transferred to call `vested_transfer`."
            ]
          },
          {
            "Name": "MaxVestingSchedules",
            "TypeId": 4,
            "Value": "HAAAAA==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 390
        },
        "Index": 32
      },
      "34": {
        "Name": "DappsStaking",
        "Storage": {
          "Prefix": "DappsStaking",
          "Entries": [
            {
              "Name": "PalletDisabled",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 51,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Denotes whether pallet is disabled (in maintenance mode) or not"
              ]
            },
            {
              "Name": "Ledger",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 391
                }
              },
              "Default": "AAAB",
              "Docs": [
                " General information about the staker (non-smart-contract specific)."
              ]
            },
            {
              "Name": "CurrentEra",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The current era index."
              ]
            },
            {
              "Name": "BlockRewardAccumulator",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 395,
                "Item2": null
              },
              "Default": "AAA=",
              "Docs": [
                " Accumulator for block rewards during an era. It is reset at every new era"
              ]
            },
            {
              "Name": "ForceEra",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 396,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Mode of era forcing."
              ]
            },
            {
              "Name": "NextEraStartingBlock",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Stores the block number of when the next era starts"
              ]
            },
            {
              "Name": "RegisteredDevelopers",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 48
                }
              },
              "Default": "AA==",
              "Docs": [
                " Simple map where developer account points to their smart contract"
              ]
            },
            {
              "Name": "RegisteredDapps",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 48,
                  "Value": 397
                }
              },
              "Default": "AA==",
              "Docs": [
                " Simple map where smart contract points to basic info about it (e.g. developer address, state)"
              ]
            },
            {
              "Name": "GeneralEraInfo",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 399
                }
              },
              "Default": "AA==",
              "Docs": [
                " General information about an era like TVL, total staked value, rewards."
              ]
            },
            {
              "Name": "ContractEraStake",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 400,
                  "Value": 246
                }
              },
              "Default": "AA==",
              "Docs": [
                " Staking information about contract in a particular era."
              ]
            },
            {
              "Name": "GeneralStakerInfo",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 401,
                  "Value": 402
                }
              },
              "Default": "AA==",
              "Docs": [
                " Info about stakers stakes on particular contracts."
              ]
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 405,
                "Item2": null
              },
              "Default": "Aw==",
              "Docs": [
                " Stores the current pallet storage version."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 245
        },
        "Events": {
          "TypeId": 47
        },
        "Constants": [
          {
            "Name": "BlockPerEra",
            "TypeId": 4,
            "Value": "sAQAAA==",
            "Docs": [
              " Number of blocks per era."
            ]
          },
          {
            "Name": "RegisterDeposit",
            "TypeId": 6,
            "Value": "AAAQYy1ex2sFAAAAAAAAAA==",
            "Docs": [
              " Deposit that will be reserved as part of new contract registration."
            ]
          },
          {
            "Name": "MaxNumberOfStakersPerContract",
            "TypeId": 4,
            "Value": "AAgAAA==",
            "Docs": [
              " Maximum number of unique stakers per contract."
            ]
          },
          {
            "Name": "MinimumStakingAmount",
            "TypeId": 6,
            "Value": "AAD0RIKRY0UAAAAAAAAAAA==",
            "Docs": [
              " Minimum amount user must have staked on contract.",
              " User can stake less if they already have the minimum staking amount staked on that particular contract."
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 406,
            "Value": "cHkvZHBzc3Q=",
            "Docs": [
              " Dapps staking pallet Id"
            ]
          },
          {
            "Name": "MinimumRemainingAmount",
            "TypeId": 6,
            "Value": "AABkp7O24A0AAAAAAAAAAA==",
            "Docs": [
              " Minimum amount that should be left on staker account after staking.",
              " Serves as a safeguard to prevent users from locking their entire free balance."
            ]
          },
          {
            "Name": "MaxUnlockingChunks",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " Max number of unlocking chunks per account Id <-> contract Id pairing.",
              " If value is zero, unlocking becomes impossible."
            ]
          },
          {
            "Name": "UnbondingPeriod",
            "TypeId": 4,
            "Value": "AgAAAA==",
            "Docs": [
              " Number of eras that need to pass until unstaked value can be withdrawn.",
              " Current era is always counted as full era (regardless how much blocks are remaining).",
              " When set to `0`, it's equal to having no unbonding period."
            ]
          },
          {
            "Name": "MaxEraStakeValues",
            "TypeId": 4,
            "Value": "BQAAAA==",
            "Docs": [
              " Max number of unique `EraStake` values that can exist for a `(staker, contract)` pairing.",
              " When stakers claims rewards, they will either keep the number of `EraStake` values the same or they will reduce them by one.",
              " Stakers cannot add an additional `EraStake` value by calling `bond&stake` or `unbond&unstake` if they've reached the max number of values.",
              "",
              " This ensures that history doesn't grow indefinitely - if there are too many chunks, stakers should first claim their former rewards",
              " before adding additional `EraStake` values."
            ]
          },
          {
            "Name": "UnregisteredDappRewardRetention",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " Number of eras that need to pass until dApp rewards for the unregistered contracts can be burned.",
              " Developer can still claim rewards after this period has passed, iff it hasn't been burned yet.",
              "",
              " For example, if retention is set to `2` and current era is `10`, it means that all unclaimed rewards bellow era `8` can be burned."
            ]
          }
        ],
        "Errors": {
          "TypeId": 407
        },
        "Index": 34
      },
      "35": {
        "Name": "BlockReward",
        "Storage": {
          "Prefix": "BlockReward",
          "Entries": [
            {
              "Name": "RewardDistributionConfigStorage",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 54,
                "Item2": null
              },
              "Default": "AhBeXwLKmjsCypo7AoTXFwAA",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 247
        },
        "Events": {
          "TypeId": 53
        },
        "Constants": [
          {
            "Name": "RewardAmount",
            "TypeId": 6,
            "Value": "AAC9cZhdHCMAAAAAAAAAAA==",
            "Docs": [
              " The amount of issuance for each block."
            ]
          }
        ],
        "Errors": {
          "TypeId": 408
        },
        "Index": 35
      },
      "36": {
        "Name": "Assets",
        "Storage": {
          "Prefix": "Assets",
          "Entries": [
            {
              "Name": "Asset",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 409
                }
              },
              "Default": "AA==",
              "Docs": [
                " Details of an asset."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 411,
                  "Value": 412
                }
              },
              "Default": "AA==",
              "Docs": [
                " The holdings of a specific account for a specific asset."
              ]
            },
            {
              "Name": "Approvals",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 414,
                  "Value": 415
                }
              },
              "Default": "AA==",
              "Docs": [
                " Approved balance transfers. First balance is the amount approved for transfer. Second",
                " is the amount of `T::Currency` reserved for storing this.",
                " First key is the asset ID, second key is the owner and third key is the delegate."
              ]
            },
            {
              "Name": "Metadata",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 416
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Metadata of an asset."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 248
        },
        "Events": {
          "TypeId": 57
        },
        "Constants": [
          {
            "Name": "RemoveItemsLimit",
            "TypeId": 4,
            "Value": "6AMAAA==",
            "Docs": [
              " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
              "",
              " Must be configured to result in a weight that makes each call fit in a block."
            ]
          },
          {
            "Name": "AssetDeposit",
            "TypeId": 6,
            "Value": "AADoiQQjx4oAAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved for an asset."
            ]
          },
          {
            "Name": "AssetAccountDeposit",
            "TypeId": 6,
            "Value": "AID8z8ob5w0AAAAAAAAAAA==",
            "Docs": [
              " The amount of funds that must be reserved for a non-provider asset account to be",
              " maintained."
            ]
          },
          {
            "Name": "MetadataDepositBase",
            "TypeId": 6,
            "Value": "AADdB0Tf+A0AAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved when adding metadata to your asset."
            ]
          },
          {
            "Name": "MetadataDepositPerByte",
            "TypeId": 6,
            "Value": "AEB6EPNaAAAAAAAAAAAAAA==",
            "Docs": [
              " The additional funds that must be reserved for the number of bytes you store in your",
              " metadata."
            ]
          },
          {
            "Name": "ApprovalDeposit",
            "TypeId": 6,
            "Value": "QEIPAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of funds that must be reserved when creating a new approval."
            ]
          },
          {
            "Name": "StringLimit",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum length of a name or symbol stored on-chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 418
        },
        "Index": 36
      },
      "40": {
        "Name": "Authorship",
        "Storage": {
          "Prefix": "Authorship",
          "Entries": [
            {
              "Name": "Author",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Author of current block."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 40
      },
      "41": {
        "Name": "CollatorSelection",
        "Storage": {
          "Prefix": "CollatorSelection",
          "Entries": [
            {
              "Name": "Invulnerables",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 59,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The invulnerable, fixed collators."
              ]
            },
            {
              "Name": "Candidates",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 419,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The (community, limited) collation candidates."
              ]
            },
            {
              "Name": "LastAuthoredBlock",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Last block authored by collator."
              ]
            },
            {
              "Name": "DesiredCandidates",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Desired number of candidates.",
                "",
                " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."
              ]
            },
            {
              "Name": "CandidacyBond",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Fixed amount to deposit to become a collator.",
                "",
                " When a collator calls `leave_intent` they immediately receive the deposit back."
              ]
            },
            {
              "Name": "SlashDestination",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Destination account for slashed amount."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 249
        },
        "Events": {
          "TypeId": 58
        },
        "Constants": [],
        "Errors": {
          "TypeId": 421
        },
        "Index": 41
      },
      "42": {
        "Name": "Session",
        "Storage": {
          "Prefix": "Session",
          "Entries": [
            {
              "Name": "Validators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 59,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current set of validators."
              ]
            },
            {
              "Name": "CurrentIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Current index of the session."
              ]
            },
            {
              "Name": "QueuedChanged",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 51,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if the underlying economic identities or weighting behind the validators",
                " has changed in the queued validator set."
              ]
            },
            {
              "Name": "QueuedKeys",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 422,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The queued keys for the next session. When the next session begins, these keys",
                " will be used to determine the validator's session keys."
              ]
            },
            {
              "Name": "DisabledValidators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 424,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Indices of disabled validators.",
                "",
                " The vec is always kept sorted so that we can find whether a given validator is",
                " disabled using binary search. It gets cleared when `on_session_ending` returns",
                " a new set of identities."
              ]
            },
            {
              "Name": "NextKeys",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 251
                }
              },
              "Default": "AA==",
              "Docs": [
                " The next session keys for a validator."
              ]
            },
            {
              "Name": "KeyOwner",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 425,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " The owner of a key. The key is the `KeyTypeId` + the encoded key."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 250
        },
        "Events": {
          "TypeId": 60
        },
        "Constants": [],
        "Errors": {
          "TypeId": 427
        },
        "Index": 42
      },
      "43": {
        "Name": "Aura",
        "Storage": {
          "Prefix": "Aura",
          "Entries": [
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 428,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current authority set."
              ]
            },
            {
              "Name": "CurrentSlot",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 430,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The current slot of this block.",
                "",
                " This will be set in `on_initialize`."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 43
      },
      "44": {
        "Name": "AuraExt",
        "Storage": {
          "Prefix": "AuraExt",
          "Entries": [
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 428,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Serves as cache for the authorities.",
                "",
                " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
                " but we require the old authorities to verify the seal when validating a PoV. This will always",
                " be updated to the latest AuRa authorities in `on_finalize`."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 44
      },
      "50": {
        "Name": "XcmpQueue",
        "Storage": {
          "Prefix": "XcmpQueue",
          "Entries": [
            {
              "Name": "InboundXcmpStatus",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 431,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Status of the inbound XCMP channels."
              ]
            },
            {
              "Name": "InboundXcmpMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 437,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Inbound aggregate XCMP messages. It can only be one per ParaId/block."
              ]
            },
            {
              "Name": "OutboundXcmpStatus",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 438,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                " and last outbound message. If the two indices are equal, then it indicates an empty",
                " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                " case of the need to send a high-priority signal message this block.",
                " The bool is true if there is a signal message waiting to be sent."
              ]
            },
            {
              "Name": "OutboundXcmpMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 441,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " The messages outbound in a given XCMP channel."
              ]
            },
            {
              "Name": "SignalMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 63,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any signal messages waiting to be sent."
              ]
            },
            {
              "Name": "QueueConfig",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 442,
                "Item2": null
              },
              "Default": "AgAAAAUAAAABAAAAghoGAAAIAAcAyBeoBAIABAA=",
              "Docs": [
                " The configuration which controls the dynamics of the outbound queue."
              ]
            },
            {
              "Name": "Overweight",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 10,
                  "Value": 443
                }
              },
              "Default": "AA==",
              "Docs": [
                " The messages that exceeded max individual message weight budget.",
                "",
                " These message stay in this storage map until they are manually dispatched via",
                " `service_overweight`."
              ]
            },
            {
              "Name": "CounterForOverweight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "OverweightCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next",
                " available free overweight index."
              ]
            },
            {
              "Name": "QueueSuspended",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 51,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 254
        },
        "Events": {
          "TypeId": 61
        },
        "Constants": [],
        "Errors": {
          "TypeId": 444
        },
        "Index": 50
      },
      "51": {
        "Name": "PolkadotXcm",
        "Storage": {
          "Prefix": "PolkadotXcm",
          "Entries": [
            {
              "Name": "QueryCounter",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The latest available query index."
              ]
            },
            {
              "Name": "Queries",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 10,
                  "Value": 445
                }
              },
              "Default": "AA==",
              "Docs": [
                " The ongoing queries."
              ]
            },
            {
              "Name": "AssetTraps",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The existing asset traps.",
                "",
                " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
                " times this pair has been trapped (usually just 1 if it exists at all)."
              ]
            },
            {
              "Name": "SafeXcmVersion",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                " then the destinations whose XCM version is unknown are considered unreachable."
              ]
            },
            {
              "Name": "SupportedVersion",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 450,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " The Latest versions that we know various locations support."
              ]
            },
            {
              "Name": "VersionNotifiers",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 450,
                  "Value": 10
                }
              },
              "Default": "AA==",
              "Docs": [
                " All locations that we have requested version notifications from."
              ]
            },
            {
              "Name": "VersionNotifyTargets",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 450,
                  "Value": 451
                }
              },
              "Default": "AA==",
              "Docs": [
                " The target locations that are subscribed to our version changes, as well as the most recent",
                " of our versions we informed them of."
              ]
            },
            {
              "Name": "VersionDiscoveryQueue",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 452,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                " the `u32` counter is the number of times that a send to the destination has been attempted,",
                " which is used as a prioritization."
              ]
            },
            {
              "Name": "CurrentMigration",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 455,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current migration's stage, if any."
              ]
            },
            {
              "Name": "RemoteLockedFungibles",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 456,
                  "Value": 458
                }
              },
              "Default": "AA==",
              "Docs": [
                " Fungible assets which we know are locked on a remote chain."
              ]
            },
            {
              "Name": "LockedFungibles",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 459
                }
              },
              "Default": "AA==",
              "Docs": [
                " Fungible assets which we know are locked on this chain."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 255
        },
        "Events": {
          "TypeId": 64
        },
        "Constants": [],
        "Errors": {
          "TypeId": 462
        },
        "Index": 51
      },
      "52": {
        "Name": "CumulusXcm",
        "Storage": null,
        "Calls": {
          "TypeId": 277
        },
        "Events": {
          "TypeId": 118
        },
        "Constants": [],
        "Errors": {
          "TypeId": 463
        },
        "Index": 52
      },
      "53": {
        "Name": "DmpQueue",
        "Storage": {
          "Prefix": "DmpQueue",
          "Entries": [
            {
              "Name": "Configuration",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 464,
                "Item2": null
              },
              "Default": "BwDkC1QCAgAEAA==",
              "Docs": [
                " The configuration."
              ]
            },
            {
              "Name": "PageIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 465,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The page index."
              ]
            },
            {
              "Name": "Pages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 466
                }
              },
              "Default": "AA==",
              "Docs": [
                " The queue pages."
              ]
            },
            {
              "Name": "Overweight",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 10,
                  "Value": 467
                }
              },
              "Default": "AA==",
              "Docs": [
                " The overweight messages."
              ]
            },
            {
              "Name": "CounterForOverweight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 278
        },
        "Events": {
          "TypeId": 119
        },
        "Constants": [],
        "Errors": {
          "TypeId": 468
        },
        "Index": 53
      },
      "54": {
        "Name": "XcAssetConfig",
        "Storage": {
          "Prefix": "XcAssetConfig",
          "Entries": [
            {
              "Name": "AssetIdToLocation",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 6,
                  "Value": 117
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping from an asset id to asset type.",
                " Can be used when receiving transaction specifying an asset directly,",
                " like transferring an asset from this chain to another."
              ]
            },
            {
              "Name": "AssetLocationToId",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 117,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping from an asset type to an asset id.",
                " Can be used when receiving a multilocation XCM message to retrieve",
                " the corresponding asset in which tokens should me minted."
              ]
            },
            {
              "Name": "AssetLocationUnitsPerSecond",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 117,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " Stores the units per second for local execution for a AssetLocation.",
                " This is used to know how to charge for XCM execution in a particular asset.",
                "",
                " Not all asset types are supported for payment. If value exists here, it means it is supported."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 279
        },
        "Events": {
          "TypeId": 120
        },
        "Constants": [],
        "Errors": {
          "TypeId": 469
        },
        "Index": 54
      },
      "55": {
        "Name": "Xtokens",
        "Storage": null,
        "Calls": {
          "TypeId": 280
        },
        "Events": {
          "TypeId": 121
        },
        "Constants": [
          {
            "Name": "SelfLocation",
            "TypeId": 66,
            "Value": "AAA=",
            "Docs": [
              " Self chain location."
            ]
          },
          {
            "Name": "BaseXcmWeight",
            "TypeId": 8,
            "Value": "Aihr7gEQ",
            "Docs": [
              " Base XCM weight.",
              "",
              " The actually weight for an XCM message is `T::BaseXcmWeight +",
              " T::Weigher::weight(&msg)`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 470
        },
        "Index": 55
      },
      "60": {
        "Name": "EVM",
        "Storage": {
          "Prefix": "EVM",
          "Entries": [
            {
              "Name": "AccountCodes",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 49,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "AccountStorages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 471,
                  "Value": 11
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 284
        },
        "Events": {
          "TypeId": 122
        },
        "Constants": [],
        "Errors": {
          "TypeId": 472
        },
        "Index": 60
      },
      "61": {
        "Name": "Ethereum",
        "Storage": {
          "Prefix": "Ethereum",
          "Entries": [
            {
              "Name": "Pending",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 473,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Current building block's transactions and receipts."
              ]
            },
            {
              "Name": "CurrentBlock",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 482,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current Ethereum block."
              ]
            },
            {
              "Name": "CurrentReceipts",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 487,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current Ethereum receipts."
              ]
            },
            {
              "Name": "CurrentTransactionStatuses",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 488,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current transaction statuses."
              ]
            },
            {
              "Name": "BlockHash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 135,
                  "Value": 11
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 288
        },
        "Events": {
          "TypeId": 125
        },
        "Constants": [],
        "Errors": {
          "TypeId": 489
        },
        "Index": 61
      },
      "62": {
        "Name": "BaseFee",
        "Storage": {
          "Prefix": "BaseFee",
          "Entries": [
            {
              "Name": "BaseFeePerGas",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 135,
                "Item2": null
              },
              "Default": "AMqaOwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": []
            },
            {
              "Name": "Elasticity",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 137,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 298
        },
        "Events": {
          "TypeId": 134
        },
        "Constants": [],
        "Errors": null,
        "Index": 62
      },
      "63": {
        "Name": "EVMChainId",
        "Storage": {
          "Prefix": "EVMChainId",
          "Entries": [
            {
              "Name": "ChainId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The EVM chain ID."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 63
      },
      "70": {
        "Name": "Contracts",
        "Storage": {
          "Prefix": "Contracts",
          "Entries": [
            {
              "Name": "PristineCode",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 490
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping from an original code hash to the original code, untouched by instrumentation."
              ]
            },
            {
              "Name": "CodeStorage",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 491
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping between an original code hash and instrumented wasm code, ready for execution."
              ]
            },
            {
              "Name": "OwnerInfoOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 493
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping between an original code hash and its owner information."
              ]
            },
            {
              "Name": "Nonce",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " This is a **monotonic** counter incremented on contract instantiation.",
                "",
                " This is used in order to generate unique trie ids for contracts.",
                " The trie id of a new contract is calculated from hash(account_id, nonce).",
                " The nonce is required because otherwise the following sequence would lead to",
                " a possible collision of storage:",
                "",
                " 1. Create a new contract.",
                " 2. Terminate the contract.",
                " 3. Immediately recreate the contract with the same account_id.",
                "",
                " This is bad because the contents of a trie are deleted lazily and there might be",
                " storage of the old instantiation still in it when the new contract is created. Please",
                " note that we can't replace the counter by the block number because the sequence above",
                " can happen in the same block. We also can't keep the account counter in memory only",
                " because storage is the only way to communicate across different extrinsics in the",
                " same block.",
                "",
                " # Note",
                "",
                " Do not use it to determine the number of contracts. It won't be decremented if",
                " a contract is destroyed."
              ]
            },
            {
              "Name": "ContractInfoOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 494
                }
              },
              "Default": "AA==",
              "Docs": [
                " The code associated with a given account.",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "DeletionQueue",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 495,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Evicted contracts that await child trie deletion.",
                "",
                " Child trie deletion is a heavy operation depending on the amount of storage items",
                " stored in said trie. Therefore this operation is performed lazily in `on_initialize`."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 299
        },
        "Events": {
          "TypeId": 138
        },
        "Constants": [
          {
            "Name": "Schedule",
            "TypeId": 498,
            "Value": "BAAAAAABAAAABAAAgAAAABAAAAAAEAAAAAEAACAAAAAAQAAABAAAAAAAAAABCAAAWxoAAFEXAADlDAAAKBsAAA4JAABXDQAAjhUAACwAAAD5TAAAx1oAAIAIAACUAwAA9wkAAPkKAADICQAA8BoAANcbAADyFwAAgWfkAMAIAAC0CAAAzAgAAM0KAAAjCAAAGwgAACcIAABpCwAA8Q0AAEULAAB2CwAAbAsAANcLAACQCwAA4wsAAJQLAACLCwAADQsAAKsKAACUCgAAZiMAAPQgAABxJAAAmyAAADMLAAAMCwAACgsAAEoLAABHCwAARQsAAEYLAABCCwAAbmQNAHjS5bUGcTkOXdoGwTnurxAAeP6ZCAA8ilcNAHiWJA0AeAqnSAB4KjYNAHgGDg0AeH4EDQB4QuENAHgGN0MA8KI2BgAAnrcLAHjVAQAAhQOFAwC6pXO6JbMWMVYA8B78rgDIpktVHjUpoQ0Aig8LAIxtDABSFDofkQSpuQBtswhKYhhCKbjCcDAfgQTZswjGJxAHgQR5LQhKHxkHoQQlQAiOXTofoQSZxgiWsQAiNSqGhKeRZWGqRKt25YAClFMiKTbdAQAaeuPiVeT6R4kBiA0YAB0YALqJIACg5T0AevMrAKDlMQC6DhkAoLETAEqlHQCorRMAgnMBCfEFAnQ/AkkD5toIADxaAw4AGQMyIwcASA==",
            "Docs": [
              " Cost schedule and limits."
            ]
          },
          {
            "Name": "DeletionQueueDepth",
            "TypeId": 4,
            "Value": "gAAAAA==",
            "Docs": [
              " The maximum number of contracts that can be pending for deletion.",
              "",
              " When a contract is deleted by calling `seal_terminate` it becomes inaccessible",
              " immediately, but the deletion of the storage items it has accumulated is performed",
              " later. The contract is put into the deletion queue. This defines how many",
              " contracts can be queued up at the same time. If that limit is reached `seal_terminate`",
              " will fail. The action must be retried in a later block in that case.",
              "",
              " The reasons for limiting the queue depth are:",
              "",
              " 1. The queue is in storage in order to be persistent between blocks. We want to limit",
              " \tthe amount of storage that can be consumed.",
              " 2. The queue is stored in a vector and needs to be decoded as a whole when reading",
              "\t\tit at the end of each block. Longer queues take more weight to decode and hence",
              "\t\tlimit the amount of items that can be deleted per block."
            ]
          },
          {
            "Name": "DeletionWeightLimit",
            "TypeId": 8,
            "Value": "BwB0O6QLAgAgAA==",
            "Docs": [
              " The maximum amount of weight that can be consumed per block for lazy trie removal.",
              "",
              " The amount of weight that is dedicated per block to work on the deletion queue. Larger",
              " values allow more trie keys to be deleted in each block but reduce the amount of",
              " weight that is left for transactions. See [`Self::DeletionQueueDepth`] for more",
              " information about the deletion queue."
            ]
          },
          {
            "Name": "DepositPerByte",
            "TypeId": 6,
            "Value": "AMqaOwAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of balance a caller has to pay for each byte of storage.",
              "",
              " # Note",
              "",
              " Changing this value for an existing chain might need a storage migration."
            ]
          },
          {
            "Name": "DepositPerItem",
            "TypeId": 6,
            "Value": "AMqaOwAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of balance a caller has to pay for each storage item.",
              "",
              " # Note",
              "",
              " Changing this value for an existing chain might need a storage migration."
            ]
          },
          {
            "Name": "MaxCodeLen",
            "TypeId": 4,
            "Value": "AOwBAA==",
            "Docs": [
              " The maximum length of a contract code in bytes. This limit applies to the instrumented",
              " version of the code. Therefore `instantiate_with_code` can fail even when supplying",
              " a wasm binary below this maximum size.",
              "",
              " The value should be chosen carefully taking into the account the overall memory limit",
              " your runtime has, as well as the [maximum allowed callstack",
              " depth](#associatedtype.CallStack). Look into the `integrity_test()` for some insights."
            ]
          },
          {
            "Name": "MaxStorageKeyLen",
            "TypeId": 4,
            "Value": "gAAAAA==",
            "Docs": [
              " The maximum allowable length in bytes for storage keys."
            ]
          },
          {
            "Name": "UnsafeUnstableInterface",
            "TypeId": 51,
            "Value": "AQ==",
            "Docs": [
              " Make contract callable functions marked as `#[unstable]` available.",
              "",
              " Contracts that use `#[unstable]` functions won't be able to be uploaded unless",
              " this is set to `true`. This is only meant for testnets and dev nodes in order to",
              " experiment with new features.",
              "",
              " # Warning",
              "",
              " Do **not** set to `true` on productions chains."
            ]
          },
          {
            "Name": "MaxDebugBufferLen",
            "TypeId": 4,
            "Value": "AAAgAA==",
            "Docs": [
              " The maximum length of the debug buffer in bytes."
            ]
          }
        ],
        "Errors": {
          "TypeId": 502
        },
        "Index": 70
      },
      "80": {
        "Name": "Democracy",
        "Storage": {
          "Prefix": "Democracy",
          "Entries": [
            {
              "Name": "PublicPropCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of (public) proposals that have been made so far."
              ]
            },
            {
              "Name": "PublicProps",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 503,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The public proposals. Unsorted. The second item is the proposal."
              ]
            },
            {
              "Name": "DepositOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 506
                }
              },
              "Default": "AA==",
              "Docs": [
                " Those who have locked a deposit.",
                "",
                " TWOX-NOTE: Safe, as increasing integer keys are safe."
              ]
            },
            {
              "Name": "ReferendumCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The next free referendum index, aka the number of referenda started so far."
              ]
            },
            {
              "Name": "LowestUnbaked",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The lowest referendum index representing an unbaked referendum. Equal to",
                " `ReferendumCount` if there isn't a unbaked referendum."
              ]
            },
            {
              "Name": "ReferendumInfoOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 507
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information concerning any given referendum.",
                "",
                " TWOX-NOTE: SAFE as indexes are not under an attacker���s control."
              ]
            },
            {
              "Name": "VotingOf",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 510
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " All votes for a particular voter. We store the balance for the number of votes that we",
                " have recorded. The second item is the total amount of delegations, that will be added.",
                "",
                " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
              ]
            },
            {
              "Name": "LastTabledWasExternal",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 51,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if the last referendum tabled was submitted externally. False if it was a public",
                " proposal."
              ]
            },
            {
              "Name": "NextExternal",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 516,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The referendum to be tabled whenever it would be valid to table an external proposal.",
                " This happens when a referendum needs to be tabled and one of two conditions are met:",
                " - `LastTabledWasExternal` is `false`; or",
                " - `PublicProps` is empty."
              ]
            },
            {
              "Name": "Blacklist",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 517
                }
              },
              "Default": "AA==",
              "Docs": [
                " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                " (until when it may not be resubmitted) and who vetoed it."
              ]
            },
            {
              "Name": "Cancellations",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 51
                }
              },
              "Default": "AA==",
              "Docs": [
                " Record of all proposals that have been subject to emergency cancellation."
              ]
            },
            {
              "Name": "MetadataOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 143,
                  "Value": 11
                }
              },
              "Default": "AA==",
              "Docs": [
                " General information concerning any proposal or referendum.",
                " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
                " dump or IPFS hash of a JSON file.",
                "",
                " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                " large preimages."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 304
        },
        "Events": {
          "TypeId": 139
        },
        "Constants": [
          {
            "Name": "EnactmentPeriod",
            "TypeId": 4,
            "Value": "QDgAAA==",
            "Docs": [
              " The period between a proposal being approved and enacted.",
              "",
              " It should generally be a little more than the unstake period to ensure that",
              " voting stakers have an opportunity to remove themselves from the system in the case",
              " where they are on the losing side of a vote."
            ]
          },
          {
            "Name": "LaunchPeriod",
            "TypeId": 4,
            "Value": "4MQAAA==",
            "Docs": [
              " How often (in blocks) new public referenda are launched."
            ]
          },
          {
            "Name": "VotingPeriod",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": [
              " How often (in blocks) to check for new votes."
            ]
          },
          {
            "Name": "VoteLockingPeriod",
            "TypeId": 4,
            "Value": "4MQAAA==",
            "Docs": [
              " The minimum period of vote locking.",
              "",
              " It should be no shorter than enactment period to ensure that in the case of an approval,",
              " those successful voters are locked into the consequences that their votes entail."
            ]
          },
          {
            "Name": "MinimumDeposit",
            "TypeId": 6,
            "Value": "AACg3sWtyTU2AAAAAAAAAA==",
            "Docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "Name": "InstantAllowed",
            "TypeId": 51,
            "Value": "AQ==",
            "Docs": [
              " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
              " want to set this permanently to `false`, others may want to condition it on things such",
              " as an upgrade having happened recently."
            ]
          },
          {
            "Name": "FastTrackVotingPeriod",
            "TypeId": 4,
            "Value": "IBwAAA==",
            "Docs": [
              " Minimum voting period allowed for a fast-track referendum."
            ]
          },
          {
            "Name": "CooloffPeriod",
            "TypeId": 4,
            "Value": "4MQAAA==",
            "Docs": [
              " Period in blocks where an external proposal may not be re-submitted after being vetoed."
            ]
          },
          {
            "Name": "MaxVotes",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of votes for an account.",
              "",
              " Also used to compute weight, an overly big value can",
              " lead to extrinsic with very big weight: see `delegate` for instance."
            ]
          },
          {
            "Name": "MaxProposals",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of public proposals that can exist at any time."
            ]
          },
          {
            "Name": "MaxDeposits",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of deposits a public proposal may have at any time."
            ]
          },
          {
            "Name": "MaxBlacklisted",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of items which can be blacklisted."
            ]
          }
        ],
        "Errors": {
          "TypeId": 518
        },
        "Index": 80
      },
      "81": {
        "Name": "Council",
        "Storage": {
          "Prefix": "Council",
          "Entries": [
            {
              "Name": "Proposals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 519,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The hashes of the active proposals."
              ]
            },
            {
              "Name": "ProposalOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 177
                }
              },
              "Default": "AA==",
              "Docs": [
                " Actual proposal for a given hash, if it's current."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 520
                }
              },
              "Default": "AA==",
              "Docs": [
                " Votes on a given proposal, if it is ongoing."
              ]
            },
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Proposals so far."
              ]
            },
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 59,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current members of the collective. This is stored sorted (just by value)."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The prime member that helps determine the default vote behavior in case of absentations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 309
        },
        "Events": {
          "TypeId": 144
        },
        "Constants": [],
        "Errors": {
          "TypeId": 521
        },
        "Index": 81
      },
      "82": {
        "Name": "TechnicalCommittee",
        "Storage": {
          "Prefix": "TechnicalCommittee",
          "Entries": [
            {
              "Name": "Proposals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 519,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The hashes of the active proposals."
              ]
            },
            {
              "Name": "ProposalOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 177
                }
              },
              "Default": "AA==",
              "Docs": [
                " Actual proposal for a given hash, if it's current."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 520
                }
              },
              "Default": "AA==",
              "Docs": [
                " Votes on a given proposal, if it is ongoing."
              ]
            },
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Proposals so far."
              ]
            },
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 59,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current members of the collective. This is stored sorted (just by value)."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The prime member that helps determine the default vote behavior in case of absentations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 310
        },
        "Events": {
          "TypeId": 145
        },
        "Constants": [],
        "Errors": {
          "TypeId": 522
        },
        "Index": 82
      },
      "83": {
        "Name": "Treasury",
        "Storage": {
          "Prefix": "Treasury",
          "Entries": [
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of proposals that have been made."
              ]
            },
            {
              "Name": "Proposals",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 523
                }
              },
              "Default": "AA==",
              "Docs": [
                " Proposals that have been made."
              ]
            },
            {
              "Name": "Deactivated",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The amount which has been reported as inactive to Currency."
              ]
            },
            {
              "Name": "Approvals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 524,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Proposal indices that have been approved but not yet awarded."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 311
        },
        "Events": {
          "TypeId": 146
        },
        "Constants": [
          {
            "Name": "ProposalBond",
            "TypeId": 137,
            "Value": "UMMAAA==",
            "Docs": [
              " Fraction of a proposal's value that should be bonded in order to place the proposal.",
              " An accepted proposal gets these back. A rejected proposal does not."
            ]
          },
          {
            "Name": "ProposalBondMinimum",
            "TypeId": 6,
            "Value": "AAAQYy1ex2sFAAAAAAAAAA==",
            "Docs": [
              " Minimum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "ProposalBondMaximum",
            "TypeId": 525,
            "Value": "AA==",
            "Docs": [
              " Maximum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "SpendPeriod",
            "TypeId": 4,
            "Value": "IBwAAA==",
            "Docs": [
              " Period between successive spends."
            ]
          },
          {
            "Name": "Burn",
            "TypeId": 137,
            "Value": "AAAAAA==",
            "Docs": [
              " Percentage of spare funds (if any) that are burnt per spend period."
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 406,
            "Value": "cHkvdHJzcnk=",
            "Docs": [
              " The treasury's pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "Name": "MaxApprovals",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of approvals that can wait in the spending queue.",
              "",
              " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
            ]
          }
        ],
        "Errors": {
          "TypeId": 526
        },
        "Index": 83
      },
      "84": {
        "Name": "Preimage",
        "Storage": {
          "Prefix": "Preimage",
          "Entries": [
            {
              "Name": "StatusFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 527
                }
              },
              "Default": "AA==",
              "Docs": [
                " The request status of a given hash."
              ]
            },
            {
              "Name": "PreimageFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 530,
                  "Value": 531
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 312
        },
        "Events": {
          "TypeId": 147
        },
        "Constants": [],
        "Errors": {
          "TypeId": 532
        },
        "Index": 84
      },
      "90": {
        "Name": "Xvm",
        "Storage": null,
        "Calls": {
          "TypeId": 313
        },
        "Events": {
          "TypeId": 148
        },
        "Constants": [],
        "Errors": {
          "TypeId": 533
        },
        "Index": 90
      },
      "99": {
        "Name": "Sudo",
        "Storage": {
          "Prefix": "Sudo",
          "Entries": [
            {
              "Name": "Key",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The `AccountId` of the sudo key."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 316
        },
        "Events": {
          "TypeId": 151
        },
        "Constants": [],
        "Errors": {
          "TypeId": 534
        },
        "Index": 99
      },
      "200": {
        "Name": "StateTrieMigration",
        "Storage": {
          "Prefix": "StateTrieMigration",
          "Entries": [
            {
              "Name": "MigrationProcess",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 320,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Migration progress.",
                "",
                " This stores the snapshot of the last migrated keys. It can be set into motion and move",
                " forward by any of the means provided by this pallet."
              ]
            },
            {
              "Name": "AutoLimits",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 318,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The limits that are imposed on automatic migrations.",
                "",
                " If set to None, then no automatic migration happens."
              ]
            },
            {
              "Name": "SignedMigrationMaxLimits",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 319,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The maximum limits that the signed migration could use.",
                "",
                " If not set, no signed submission is allowed."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 317
        },
        "Events": {
          "TypeId": 153
        },
        "Constants": [
          {
            "Name": "MaxKeyLen",
            "TypeId": 4,
            "Value": "AAIAAA==",
            "Docs": [
              " Maximal number of bytes that a key can have.",
              "",
              " FRAME itself does not limit the key length.",
              " The concrete value must therefore depend on your storage usage.",
              " A [`frame_support::storage::StorageNMap`] for example can have an arbitrary number of",
              " keys which are then hashed and concatenated, resulting in arbitrarily long keys.",
              "",
              " Use the *state migration RPC* to retrieve the length of the longest key in your",
              " storage: <https://github.com/paritytech/substrate/issues/11642>",
              "",
              " The migration will halt with a `Halted` event if this value is too small.",
              " Since there is no real penalty from over-estimating, it is advised to use a large",
              " value. The default is 512 byte.",
              "",
              " Some key lengths for reference:",
              " - [`frame_support::storage::StorageValue`]: 32 byte",
              " - [`frame_support::storage::StorageMap`]: 64 byte",
              " - [`frame_support::storage::StorageDoubleMap`]: 96 byte",
              "",
              " For more info see",
              " <https://www.shawntabrizi.com/substrate/querying-substrate-storage-via-rpc/>"
            ]
          }
        ],
        "Errors": {
          "TypeId": 155
        },
        "Index": 200
      }
    },
    "Extrinsic": {
      "TypeId": 535,
      "Version": 4,
      "SignedExtensions": [
        {
          "SignedIdentifier": "CheckSpecVersion",
          "SignedExtType": 543,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckTxVersion",
          "SignedExtType": 544,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckGenesis",
          "SignedExtType": 545,
          "AddSignedExtType": 11
        },
        {
          "SignedIdentifier": "CheckMortality",
          "SignedExtType": 546,
          "AddSignedExtType": 11
        },
        {
          "SignedIdentifier": "CheckNonce",
          "SignedExtType": 548,
          "AddSignedExtType": 31
        },
        {
          "SignedIdentifier": "CheckWeight",
          "SignedExtType": 549,
          "AddSignedExtType": 31
        },
        {
          "SignedIdentifier": "ChargeTransactionPayment",
          "SignedExtType": 550,
          "AddSignedExtType": 31
        }
      ]
    },
    "TypeId": 552
  }
}