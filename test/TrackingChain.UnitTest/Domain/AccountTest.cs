using System;
using TrackingChain.TrackingChainCore.Domain.Entities;
using Xunit;

namespace TrackingChain.UnitTest.Domain
{
    public class AccountTest
    {
        [Fact]
        public void AccountShouldBePopulateCorrectly()
        {
            //Arrange
            var guidAccount = Guid.NewGuid();
            var chainWsAddress = "ws://adddr1/test;ws://addrs";
            var chainWatcherAddress = "https://adddr1/test;https://addrs";
            var privateKey = "0x1234567890";


            //Act
            var account = new Account(
                guidAccount,
                chainWsAddress,
                chainWatcherAddress,
                privateKey);


            //Assert
            Assert.Equal(chainWatcherAddress, account.ChainWatcherAddress);
            Assert.Equal(chainWsAddress, account.ChainWriterAddress);
            Assert.Equal(privateKey, account.PrivateKey);
            Assert.Equal(Guid.Empty, account.Id); // Autogenerated after insert on database.
        }

        [Fact]
        public void GetFirstRandomWriterAddress()
        {
            //Arrange
            var guidAccount = Guid.NewGuid();
            var chainWriterAddress = "ws://adddr1/test;ws://addrs";
            var chainWatcherAddress = "https://watcheradddr1/test|apikey1;https://watcheradddr2/test|apikey2"; 
            var privateKey = "0x1234567890";
            var account = new Account(
                guidAccount, 
                chainWriterAddress, 
                chainWatcherAddress,
                privateKey);


            //Act
            var firstRandomWriter = account.GetFirstRandomWriterAddress;


            //Assert
            Assert.NotNull(firstRandomWriter);
            Assert.Contains(account.GetWriterAddress, cwa => cwa == firstRandomWriter);
        }

        [Fact]
        public void GetFirstRandomWatcherAddress()
        {
            //Arrange
            var guidAccount = Guid.NewGuid();
            var chainWriterAddress = "ws://adddr1/test;ws://addrs";
            var chainWatcherAddress = "https://watcheradddr1/test|apikey1;https://watcheradddr2/test|apikey2";
            var privateKey = "0x1234567890";
            var account = new Account(
                guidAccount,
                chainWriterAddress,
                chainWatcherAddress,
                privateKey);


            //Act
            var firstRandomWatcher = account.GetFirstRandomWatcherAddress;


            //Assert
            Assert.NotNull(firstRandomWatcher.apiKey);
            Assert.NotNull(firstRandomWatcher.apiUrl);
            Assert.Contains(account.GetWatcherAddress, cwa => cwa.Key == firstRandomWatcher.apiUrl && cwa.Value == firstRandomWatcher.apiKey);
        }
    }
}
