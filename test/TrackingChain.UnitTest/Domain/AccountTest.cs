using System;
using TrackingChain.TrackingChainCore.Domain.Entities;
using Xunit;

namespace TrackingChain.UnitTest.Domain
{
    public class AccountTest
    {
        [Fact]
        public void AccountShouldBePopulateCorrectly()
        {
            //Arrange
            var guidAccount = Guid.NewGuid();
            var chainWsAddress = "ws://adddr1/test;ws://addrs";
            var chainRPCAddress = "https://adddr1/test;https://addrs";
            var privateKey = "0x1234567890";


            //Act
            var account = new Account(
                guidAccount,
                chainWsAddress,
                chainRPCAddress,
                privateKey);


            //Assert
            Assert.Equal(account.ChainRpcAddress, chainRPCAddress);
            Assert.Equal(account.ChainWsAddress, chainWsAddress);
            Assert.Equal(account.PrivateKey, privateKey);
            Assert.Equal(account.Id, Guid.Empty); // Autogenerated after insert on database.
        }

        [Fact]
        public void GetFirstRandomWsAddress()
        {
            //Arrange
            var guidAccount = Guid.NewGuid();
            var chainWsAddress = "ws://adddr1/test;ws://addrs";
            var chainRPCAddress = "https://adddr1/test;https://addrs";
            var privateKey = "0x1234567890";
            var account = new Account(
                guidAccount, 
                chainWsAddress, 
                chainRPCAddress,
                privateKey);


            //Act
            var firstRandomWs = account.GetFirstRandomWsAddress;


            //Assert
            Assert.NotNull(firstRandomWs);
            Assert.Contains(account.GetWsAddress, cwa => cwa == firstRandomWs);
        }

        [Fact]
        public void GetFirstRandomRpcAddress()
        {
            //Arrange
            var guidAccount = Guid.NewGuid();
            var chainWsAddress = "ws://adddr1/test;ws://addrs";
            var chainRPCAddress = "https://adddr1/test;https://addrs";
            var privateKey = "0x1234567890";
            var account = new Account(
                guidAccount,
                chainWsAddress,
                chainRPCAddress,
                privateKey);


            //Act
            var firstRandomRpc = account.GetFirstRandomRpcAddress;


            //Assert
            Assert.NotNull(firstRandomRpc);
            Assert.Contains(account.GetRpcAddress, cwa => cwa == firstRandomRpc);
        }
    }
}
