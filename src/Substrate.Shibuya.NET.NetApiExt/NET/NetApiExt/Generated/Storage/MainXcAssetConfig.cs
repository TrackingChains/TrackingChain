//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Shibuya.NET.NetApiExt.Generated.Storage
{
    
    
    public sealed class XcAssetConfigStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public XcAssetConfigStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XcAssetConfig", "AssetIdToLocation"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XcAssetConfig", "AssetLocationToId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XcAssetConfig", "AssetLocationUnitsPerSecond"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
        }
        
        /// <summary>
        /// >> AssetIdToLocationParams
        ///  Mapping from an asset id to asset type.
        ///  Can be used when receiving transaction specifying an asset directly,
        ///  like transferring an asset from this chain to another.
        /// </summary>
        public static string AssetIdToLocationParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("XcAssetConfig", "AssetIdToLocation", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AssetIdToLocationDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetIdToLocationDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AssetIdToLocation
        ///  Mapping from an asset id to asset type.
        ///  Can be used when receiving transaction specifying an asset directly,
        ///  like transferring an asset from this chain to another.
        /// </summary>
        public async Task<Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation> AssetIdToLocation(Substrate.NetApi.Model.Types.Primitive.U128 key, CancellationToken token)
        {
            string parameters = XcAssetConfigStorage.AssetIdToLocationParams(key);
            var result = await _client.GetStorageAsync<Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> AssetLocationToIdParams
        ///  Mapping from an asset type to an asset id.
        ///  Can be used when receiving a multilocation XCM message to retrieve
        ///  the corresponding asset in which tokens should me minted.
        /// </summary>
        public static string AssetLocationToIdParams(Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation key)
        {
            return RequestGenerator.GetStorage("XcAssetConfig", "AssetLocationToId", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AssetLocationToIdDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetLocationToIdDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AssetLocationToId
        ///  Mapping from an asset type to an asset id.
        ///  Can be used when receiving a multilocation XCM message to retrieve
        ///  the corresponding asset in which tokens should me minted.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> AssetLocationToId(Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation key, CancellationToken token)
        {
            string parameters = XcAssetConfigStorage.AssetLocationToIdParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> AssetLocationUnitsPerSecondParams
        ///  Stores the units per second for local execution for a AssetLocation.
        ///  This is used to know how to charge for XCM execution in a particular asset.
        /// 
        ///  Not all asset types are supported for payment. If value exists here, it means it is supported.
        /// </summary>
        public static string AssetLocationUnitsPerSecondParams(Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation key)
        {
            return RequestGenerator.GetStorage("XcAssetConfig", "AssetLocationUnitsPerSecond", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AssetLocationUnitsPerSecondDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetLocationUnitsPerSecondDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AssetLocationUnitsPerSecond
        ///  Stores the units per second for local execution for a AssetLocation.
        ///  This is used to know how to charge for XCM execution in a particular asset.
        /// 
        ///  Not all asset types are supported for payment. If value exists here, it means it is supported.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> AssetLocationUnitsPerSecond(Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation key, CancellationToken token)
        {
            string parameters = XcAssetConfigStorage.AssetLocationUnitsPerSecondParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, token);
            return result;
        }
    }
    
    public sealed class XcAssetConfigCalls
    {
        
        /// <summary>
        /// >> register_asset_location
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RegisterAssetLocation(Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation asset_location, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_location.Encode());
            byteArray.AddRange(asset_id.Encode());
            return new Method(54, "XcAssetConfig", 0, "register_asset_location", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_asset_units_per_second
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetAssetUnitsPerSecond(Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation asset_location, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> units_per_second)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_location.Encode());
            byteArray.AddRange(units_per_second.Encode());
            return new Method(54, "XcAssetConfig", 1, "set_asset_units_per_second", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> change_existing_asset_location
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ChangeExistingAssetLocation(Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation new_asset_location, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(new_asset_location.Encode());
            byteArray.AddRange(asset_id.Encode());
            return new Method(54, "XcAssetConfig", 2, "change_existing_asset_location", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_payment_asset
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RemovePaymentAsset(Substrate.Shibuya.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation asset_location)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_location.Encode());
            return new Method(54, "XcAssetConfig", 3, "remove_payment_asset", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_asset
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RemoveAsset(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(54, "XcAssetConfig", 4, "remove_asset", byteArray.ToArray());
        }
    }
    
    public sealed class XcAssetConfigConstants
    {
    }
    
    public enum XcAssetConfigErrors
    {
        
        /// <summary>
        /// >> AssetAlreadyRegistered
        /// Asset is already registered.
        /// </summary>
        AssetAlreadyRegistered,
        
        /// <summary>
        /// >> AssetDoesNotExist
        /// Asset does not exist (hasn't been registered).
        /// </summary>
        AssetDoesNotExist,
        
        /// <summary>
        /// >> MultiLocationNotSupported
        /// Failed to convert to latest versioned MultiLocation
        /// </summary>
        MultiLocationNotSupported,
    }
}
