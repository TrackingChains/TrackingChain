//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Shibuya.NET.NetApiExt.Generated.Storage
{
    
    
    public sealed class BaseFeeStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public BaseFeeStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BaseFee", "BaseFeePerGas"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.primitive_types.U256)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BaseFee", "Elasticity"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Permill)));
        }
        
        /// <summary>
        /// >> BaseFeePerGasParams
        /// </summary>
        public static string BaseFeePerGasParams()
        {
            return RequestGenerator.GetStorage("BaseFee", "BaseFeePerGas", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BaseFeePerGasDefault
        /// Default value as hex string
        /// </summary>
        public static string BaseFeePerGasDefault()
        {
            return "0x00CA9A3B00000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> BaseFeePerGas
        /// </summary>
        public async Task<Substrate.Shibuya.NET.NetApiExt.Generated.Model.primitive_types.U256> BaseFeePerGas(CancellationToken token)
        {
            string parameters = BaseFeeStorage.BaseFeePerGasParams();
            var result = await _client.GetStorageAsync<Substrate.Shibuya.NET.NetApiExt.Generated.Model.primitive_types.U256>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ElasticityParams
        /// </summary>
        public static string ElasticityParams()
        {
            return RequestGenerator.GetStorage("BaseFee", "Elasticity", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ElasticityDefault
        /// Default value as hex string
        /// </summary>
        public static string ElasticityDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> Elasticity
        /// </summary>
        public async Task<Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Permill> Elasticity(CancellationToken token)
        {
            string parameters = BaseFeeStorage.ElasticityParams();
            var result = await _client.GetStorageAsync<Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Permill>(parameters, token);
            return result;
        }
    }
    
    public sealed class BaseFeeCalls
    {
        
        /// <summary>
        /// >> set_base_fee_per_gas
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetBaseFeePerGas(Substrate.Shibuya.NET.NetApiExt.Generated.Model.primitive_types.U256 fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(fee.Encode());
            return new Method(62, "BaseFee", 0, "set_base_fee_per_gas", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_elasticity
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetElasticity(Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Permill elasticity)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(elasticity.Encode());
            return new Method(62, "BaseFee", 1, "set_elasticity", byteArray.ToArray());
        }
    }
    
    public sealed class BaseFeeConstants
    {
    }
}
