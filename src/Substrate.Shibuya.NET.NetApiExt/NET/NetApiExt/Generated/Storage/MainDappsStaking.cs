//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Shibuya.NET.NetApiExt.Generated.Storage
{
    
    
    public sealed class DappsStakingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public DappsStakingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DappsStaking", "PalletDisabled"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DappsStaking", "Ledger"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.AccountLedger)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DappsStaking", "CurrentEra"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DappsStaking", "BlockRewardAccumulator"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.RewardInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DappsStaking", "ForceEra"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumForcing)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DappsStaking", "NextEraStartingBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DappsStaking", "RegisteredDevelopers"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DappsStaking", "RegisteredDapps"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract), typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.DAppInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DappsStaking", "GeneralEraInfo"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DappsStaking", "ContractEraStake"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.ContractStakeInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DappsStaking", "GeneralStakerInfo"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract>), typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.StakerInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DappsStaking", "StorageVersion"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumVersion)));
        }
        
        /// <summary>
        /// >> PalletDisabledParams
        ///  Denotes whether pallet is disabled (in maintenance mode) or not
        /// </summary>
        public static string PalletDisabledParams()
        {
            return RequestGenerator.GetStorage("DappsStaking", "PalletDisabled", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> PalletDisabledDefault
        /// Default value as hex string
        /// </summary>
        public static string PalletDisabledDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PalletDisabled
        ///  Denotes whether pallet is disabled (in maintenance mode) or not
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> PalletDisabled(CancellationToken token)
        {
            string parameters = DappsStakingStorage.PalletDisabledParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> LedgerParams
        ///  General information about the staker (non-smart-contract specific).
        /// </summary>
        public static string LedgerParams(Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("DappsStaking", "Ledger", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LedgerDefault
        /// Default value as hex string
        /// </summary>
        public static string LedgerDefault()
        {
            return "0x000000";
        }
        
        /// <summary>
        /// >> Ledger
        ///  General information about the staker (non-smart-contract specific).
        /// </summary>
        public async Task<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.AccountLedger> Ledger(Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = DappsStakingStorage.LedgerParams(key);
            var result = await _client.GetStorageAsync<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.AccountLedger>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrentEraParams
        ///  The current era index.
        /// </summary>
        public static string CurrentEraParams()
        {
            return RequestGenerator.GetStorage("DappsStaking", "CurrentEra", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentEraDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentEraDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CurrentEra
        ///  The current era index.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CurrentEra(CancellationToken token)
        {
            string parameters = DappsStakingStorage.CurrentEraParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> BlockRewardAccumulatorParams
        ///  Accumulator for block rewards during an era. It is reset at every new era
        /// </summary>
        public static string BlockRewardAccumulatorParams()
        {
            return RequestGenerator.GetStorage("DappsStaking", "BlockRewardAccumulator", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BlockRewardAccumulatorDefault
        /// Default value as hex string
        /// </summary>
        public static string BlockRewardAccumulatorDefault()
        {
            return "0x0000";
        }
        
        /// <summary>
        /// >> BlockRewardAccumulator
        ///  Accumulator for block rewards during an era. It is reset at every new era
        /// </summary>
        public async Task<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.RewardInfo> BlockRewardAccumulator(CancellationToken token)
        {
            string parameters = DappsStakingStorage.BlockRewardAccumulatorParams();
            var result = await _client.GetStorageAsync<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.RewardInfo>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ForceEraParams
        ///  Mode of era forcing.
        /// </summary>
        public static string ForceEraParams()
        {
            return RequestGenerator.GetStorage("DappsStaking", "ForceEra", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ForceEraDefault
        /// Default value as hex string
        /// </summary>
        public static string ForceEraDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ForceEra
        ///  Mode of era forcing.
        /// </summary>
        public async Task<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumForcing> ForceEra(CancellationToken token)
        {
            string parameters = DappsStakingStorage.ForceEraParams();
            var result = await _client.GetStorageAsync<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumForcing>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> NextEraStartingBlockParams
        ///  Stores the block number of when the next era starts
        /// </summary>
        public static string NextEraStartingBlockParams()
        {
            return RequestGenerator.GetStorage("DappsStaking", "NextEraStartingBlock", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextEraStartingBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string NextEraStartingBlockDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextEraStartingBlock
        ///  Stores the block number of when the next era starts
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextEraStartingBlock(CancellationToken token)
        {
            string parameters = DappsStakingStorage.NextEraStartingBlockParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> RegisteredDevelopersParams
        ///  Simple map where developer account points to their smart contract
        /// </summary>
        public static string RegisteredDevelopersParams(Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("DappsStaking", "RegisteredDevelopers", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RegisteredDevelopersDefault
        /// Default value as hex string
        /// </summary>
        public static string RegisteredDevelopersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RegisteredDevelopers
        ///  Simple map where developer account points to their smart contract
        /// </summary>
        public async Task<Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract> RegisteredDevelopers(Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = DappsStakingStorage.RegisteredDevelopersParams(key);
            var result = await _client.GetStorageAsync<Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> RegisteredDappsParams
        ///  Simple map where smart contract points to basic info about it (e.g. developer address, state)
        /// </summary>
        public static string RegisteredDappsParams(Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract key)
        {
            return RequestGenerator.GetStorage("DappsStaking", "RegisteredDapps", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RegisteredDappsDefault
        /// Default value as hex string
        /// </summary>
        public static string RegisteredDappsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RegisteredDapps
        ///  Simple map where smart contract points to basic info about it (e.g. developer address, state)
        /// </summary>
        public async Task<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.DAppInfo> RegisteredDapps(Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract key, CancellationToken token)
        {
            string parameters = DappsStakingStorage.RegisteredDappsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.DAppInfo>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> GeneralEraInfoParams
        ///  General information about an era like TVL, total staked value, rewards.
        /// </summary>
        public static string GeneralEraInfoParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("DappsStaking", "GeneralEraInfo", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> GeneralEraInfoDefault
        /// Default value as hex string
        /// </summary>
        public static string GeneralEraInfoDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> GeneralEraInfo
        ///  General information about an era like TVL, total staked value, rewards.
        /// </summary>
        public async Task<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraInfo> GeneralEraInfo(Substrate.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = DappsStakingStorage.GeneralEraInfoParams(key);
            var result = await _client.GetStorageAsync<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraInfo>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ContractEraStakeParams
        ///  Staking information about contract in a particular era.
        /// </summary>
        public static string ContractEraStakeParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("DappsStaking", "ContractEraStake", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ContractEraStakeDefault
        /// Default value as hex string
        /// </summary>
        public static string ContractEraStakeDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ContractEraStake
        ///  Staking information about contract in a particular era.
        /// </summary>
        public async Task<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.ContractStakeInfo> ContractEraStake(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract, Substrate.NetApi.Model.Types.Primitive.U32> key, CancellationToken token)
        {
            string parameters = DappsStakingStorage.ContractEraStakeParams(key);
            var result = await _client.GetStorageAsync<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.ContractStakeInfo>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> GeneralStakerInfoParams
        ///  Info about stakers stakes on particular contracts.
        /// </summary>
        public static string GeneralStakerInfoParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract> key)
        {
            return RequestGenerator.GetStorage("DappsStaking", "GeneralStakerInfo", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> GeneralStakerInfoDefault
        /// Default value as hex string
        /// </summary>
        public static string GeneralStakerInfoDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> GeneralStakerInfo
        ///  Info about stakers stakes on particular contracts.
        /// </summary>
        public async Task<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.StakerInfo> GeneralStakerInfo(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract> key, CancellationToken token)
        {
            string parameters = DappsStakingStorage.GeneralStakerInfoParams(key);
            var result = await _client.GetStorageAsync<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.StakerInfo>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> StorageVersionParams
        ///  Stores the current pallet storage version.
        /// </summary>
        public static string StorageVersionParams()
        {
            return RequestGenerator.GetStorage("DappsStaking", "StorageVersion", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> StorageVersionDefault
        /// Default value as hex string
        /// </summary>
        public static string StorageVersionDefault()
        {
            return "0x03";
        }
        
        /// <summary>
        /// >> StorageVersion
        ///  Stores the current pallet storage version.
        /// </summary>
        public async Task<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumVersion> StorageVersion(CancellationToken token)
        {
            string parameters = DappsStakingStorage.StorageVersionParams();
            var result = await _client.GetStorageAsync<Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumVersion>(parameters, token);
            return result;
        }
    }
    
    public sealed class DappsStakingCalls
    {
        
        /// <summary>
        /// >> register
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Register(Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 developer, Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract contract_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(developer.Encode());
            byteArray.AddRange(contract_id.Encode());
            return new Method(34, "DappsStaking", 0, "register", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unregister
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Unregister(Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract contract_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(contract_id.Encode());
            return new Method(34, "DappsStaking", 1, "unregister", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw_from_unregistered
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method WithdrawFromUnregistered(Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract contract_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(contract_id.Encode());
            return new Method(34, "DappsStaking", 2, "withdraw_from_unregistered", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> bond_and_stake
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method BondAndStake(Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract contract_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(contract_id.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(34, "DappsStaking", 3, "bond_and_stake", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unbond_and_unstake
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method UnbondAndUnstake(Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract contract_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(contract_id.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(34, "DappsStaking", 4, "unbond_and_unstake", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw_unbonded
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method WithdrawUnbonded()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(34, "DappsStaking", 5, "withdraw_unbonded", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> nomination_transfer
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method NominationTransfer(Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract origin_contract_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> value, Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract target_contract_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(origin_contract_id.Encode());
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(target_contract_id.Encode());
            return new Method(34, "DappsStaking", 6, "nomination_transfer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_staker
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ClaimStaker(Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract contract_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(contract_id.Encode());
            return new Method(34, "DappsStaking", 7, "claim_staker", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_dapp
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ClaimDapp(Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract contract_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> era)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(contract_id.Encode());
            byteArray.AddRange(era.Encode());
            return new Method(34, "DappsStaking", 8, "claim_dapp", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_new_era
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ForceNewEra()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(34, "DappsStaking", 9, "force_new_era", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> maintenance_mode
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method MaintenanceMode(Substrate.NetApi.Model.Types.Primitive.Bool enable_maintenance)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(enable_maintenance.Encode());
            return new Method(34, "DappsStaking", 10, "maintenance_mode", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_reward_destination
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetRewardDestination(Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumRewardDestination reward_destination)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(reward_destination.Encode());
            return new Method(34, "DappsStaking", 11, "set_reward_destination", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_contract_stake_info
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetContractStakeInfo(Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract contract, Substrate.NetApi.Model.Types.Primitive.U32 era, Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking.ContractStakeInfo contract_stake_info)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(contract.Encode());
            byteArray.AddRange(era.Encode());
            byteArray.AddRange(contract_stake_info.Encode());
            return new Method(34, "DappsStaking", 12, "set_contract_stake_info", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> burn_stale_reward
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method BurnStaleReward(Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime.EnumSmartContract contract_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> era)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(contract_id.Encode());
            byteArray.AddRange(era.Encode());
            return new Method(34, "DappsStaking", 13, "burn_stale_reward", byteArray.ToArray());
        }
    }
    
    public sealed class DappsStakingConstants
    {
        
        /// <summary>
        /// >> BlockPerEra
        ///  Number of blocks per era.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 BlockPerEra()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xB0040000");
            return result;
        }
        
        /// <summary>
        /// >> RegisterDeposit
        ///  Deposit that will be reserved as part of new contract registration.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 RegisterDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x000010632D5EC76B0500000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxNumberOfStakersPerContract
        ///  Maximum number of unique stakers per contract.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxNumberOfStakersPerContract()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00080000");
            return result;
        }
        
        /// <summary>
        /// >> MinimumStakingAmount
        ///  Minimum amount user must have staked on contract.
        ///  User can stake less if they already have the minimum staking amount staked on that particular contract.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinimumStakingAmount()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0000F444829163450000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> PalletId
        ///  Dapps staking pallet Id
        /// </summary>
        public Substrate.Shibuya.NET.NetApiExt.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Substrate.Shibuya.NET.NetApiExt.Generated.Model.frame_support.PalletId();
            result.Create("0x70792F6470737374");
            return result;
        }
        
        /// <summary>
        /// >> MinimumRemainingAmount
        ///  Minimum amount that should be left on staker account after staking.
        ///  Serves as a safeguard to prevent users from locking their entire free balance.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinimumRemainingAmount()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x000064A7B3B6E00D0000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxUnlockingChunks
        ///  Max number of unlocking chunks per account Id <-> contract Id pairing.
        ///  If value is zero, unlocking becomes impossible.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxUnlockingChunks()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x20000000");
            return result;
        }
        
        /// <summary>
        /// >> UnbondingPeriod
        ///  Number of eras that need to pass until unstaked value can be withdrawn.
        ///  Current era is always counted as full era (regardless how much blocks are remaining).
        ///  When set to `0`, it's equal to having no unbonding period.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 UnbondingPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x02000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxEraStakeValues
        ///  Max number of unique `EraStake` values that can exist for a `(staker, contract)` pairing.
        ///  When stakers claims rewards, they will either keep the number of `EraStake` values the same or they will reduce them by one.
        ///  Stakers cannot add an additional `EraStake` value by calling `bond&stake` or `unbond&unstake` if they've reached the max number of values.
        /// 
        ///  This ensures that history doesn't grow indefinitely - if there are too many chunks, stakers should first claim their former rewards
        ///  before adding additional `EraStake` values.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxEraStakeValues()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x05000000");
            return result;
        }
        
        /// <summary>
        /// >> UnregisteredDappRewardRetention
        ///  Number of eras that need to pass until dApp rewards for the unregistered contracts can be burned.
        ///  Developer can still claim rewards after this period has passed, iff it hasn't been burned yet.
        /// 
        ///  For example, if retention is set to `2` and current era is `10`, it means that all unclaimed rewards bellow era `8` can be burned.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 UnregisteredDappRewardRetention()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
    }
    
    public enum DappsStakingErrors
    {
        
        /// <summary>
        /// >> Disabled
        /// Disabled
        /// </summary>
        Disabled,
        
        /// <summary>
        /// >> NoMaintenanceModeChange
        /// No change in maintenance mode
        /// </summary>
        NoMaintenanceModeChange,
        
        /// <summary>
        /// >> UpgradeTooHeavy
        /// Upgrade is too heavy, reduce the weight parameter.
        /// </summary>
        UpgradeTooHeavy,
        
        /// <summary>
        /// >> StakingWithNoValue
        /// Can not stake with zero value.
        /// </summary>
        StakingWithNoValue,
        
        /// <summary>
        /// >> InsufficientValue
        /// Can not stake with value less than minimum staking value
        /// </summary>
        InsufficientValue,
        
        /// <summary>
        /// >> MaxNumberOfStakersExceeded
        /// Number of stakers per contract exceeded.
        /// </summary>
        MaxNumberOfStakersExceeded,
        
        /// <summary>
        /// >> NotOperatedContract
        /// Targets must be operated contracts
        /// </summary>
        NotOperatedContract,
        
        /// <summary>
        /// >> NotStakedContract
        /// Contract isn't staked.
        /// </summary>
        NotStakedContract,
        
        /// <summary>
        /// >> NotUnregisteredContract
        /// Contract isn't unregistered.
        /// </summary>
        NotUnregisteredContract,
        
        /// <summary>
        /// >> UnclaimedRewardsRemaining
        /// Unclaimed rewards should be claimed before withdrawing stake.
        /// </summary>
        UnclaimedRewardsRemaining,
        
        /// <summary>
        /// >> UnstakingWithNoValue
        /// Unstaking a contract with zero value
        /// </summary>
        UnstakingWithNoValue,
        
        /// <summary>
        /// >> NothingToWithdraw
        /// There are no previously unbonded funds that can be unstaked and withdrawn.
        /// </summary>
        NothingToWithdraw,
        
        /// <summary>
        /// >> AlreadyRegisteredContract
        /// The contract is already registered by other account
        /// </summary>
        AlreadyRegisteredContract,
        
        /// <summary>
        /// >> AlreadyUsedDeveloperAccount
        /// This account was already used to register contract
        /// </summary>
        AlreadyUsedDeveloperAccount,
        
        /// <summary>
        /// >> NotOwnedContract
        /// Smart contract not owned by the account id.
        /// </summary>
        NotOwnedContract,
        
        /// <summary>
        /// >> UnknownEraReward
        /// Report issue on github if this is ever emitted
        /// </summary>
        UnknownEraReward,
        
        /// <summary>
        /// >> UnexpectedStakeInfoEra
        /// Report issue on github if this is ever emitted
        /// </summary>
        UnexpectedStakeInfoEra,
        
        /// <summary>
        /// >> TooManyUnlockingChunks
        /// Contract has too many unlocking chunks. Withdraw the existing chunks if possible
        /// or wait for current chunks to complete unlocking process to withdraw them.
        /// </summary>
        TooManyUnlockingChunks,
        
        /// <summary>
        /// >> AlreadyClaimedInThisEra
        /// Contract already claimed in this era and reward is distributed
        /// </summary>
        AlreadyClaimedInThisEra,
        
        /// <summary>
        /// >> EraOutOfBounds
        /// Era parameter is out of bounds
        /// </summary>
        EraOutOfBounds,
        
        /// <summary>
        /// >> TooManyEraStakeValues
        /// Too many active `EraStake` values for (staker, contract) pairing.
        /// Claim existing rewards to fix this problem.
        /// </summary>
        TooManyEraStakeValues,
        
        /// <summary>
        /// >> NotActiveStaker
        /// Account is not actively staking
        /// </summary>
        NotActiveStaker,
        
        /// <summary>
        /// >> NominationTransferToSameContract
        /// Transfering nomination to the same contract
        /// </summary>
        NominationTransferToSameContract,
    }
}
