@page
@model TrackingChain.TriageWebApplication.Pages.Admin.TrackingErrors.IndexModel

<div class="container mt-4">
    <form asp-page="./Index" method="get">
        <div class="form-actions no-color">
            <p>
                Find by Code or TrackingId:
                <input type="text" name="SearchString" value="@Model.CurrentFilter" />
                <input type="submit" value="Search" class="btn btn-primary" /> |
                <a asp-page="./Index">Back to full List</a>
            </p>
        </div>
    </form>
    <div class="table-responsive mt-4">
        <table class="table custom-table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.TransactionRegistries[0].TrackingId)
                    </th>
                    <th>
                        <a asp-page="./Index"
                           asp-route-sortOrder="@Model.CodeSort"
                           asp-route-currentFilter="@Model.CurrentFilter">
                            @Html.DisplayNameFor(model => model.TransactionRegistries[0].Code)
                        </a>
                    </th>
                    <th>
                        <a asp-page="./Index"
                           asp-route-sortOrder="@Model.ReceivedDateSort"
                           asp-route-currentFilter="@Model.CurrentFilter">
                            @Html.DisplayNameFor(model => model.TransactionRegistries[0].ReceivedDate)
                        </a>
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.TransactionRegistries[0].TransactionStep)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.TransactionRegistries[0].TransactionErrorReason)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.TransactionRegistries)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.TrackingId)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Code)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.TriageDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.TransactionStep)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.TransactionErrorReason)
                        </td>
                        <td>
                            <a class="btn btn-info btn-sm" asp-page="./Manage" asp-route-id="@item.TrackingId">Manage</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="total-items">
        @{
            var itemShowEnd = Model.PageSize * (Model.TransactionRegistries.PageIndex - 1) + Model.TransactionRegistries.Count;
            var itemShowStart = itemShowEnd - Model.TransactionRegistries.Count + 1;
        }
        Showing @itemShowStart of @itemShowEnd items out of @Model.TotalItems.
    </div>
    <div class="pagination">
        @if (Model.TransactionRegistries.HasPreviousPage &&
        Model.TransactionRegistries.TotalPages > 5)
        {
            <a class="page-link" asp-page="./Index" asp-route-pageIndex="1" asp-route-currentFilter="@Model.CurrentFilter" asp-route-sortOrder="@Model.CurrentSort">First</a>
            <a class="page-link" asp-page="./Index" asp-route-pageIndex="@(Model.TransactionRegistries.PageIndex - 1)" asp-route-currentFilter="@Model.CurrentFilter" asp-route-sortOrder="@Model.CurrentSort">Previous</a>
        }

        @for (int i = Math.Max(1, Model.TransactionRegistries.PageIndex - 2); i <= Math.Min(Model.TransactionRegistries.TotalPages, Model.TransactionRegistries.PageIndex + 2); i++)
        {
            <a class="page-link @(i == Model.TransactionRegistries.PageIndex ? "active" : "")" asp-page="./Index" asp-route-pageIndex="@i" asp-route-currentFilter="@Model.CurrentFilter" asp-route-sortOrder="@Model.CurrentSort">@i</a>
        }

        @if (Model.TransactionRegistries.HasNextPage &&
        Model.TransactionRegistries.TotalPages > 5)
        {
            <a class="page-link" asp-page="./Index" asp-route-pageIndex="@(Model.TransactionRegistries.PageIndex + 1)" asp-route-currentFilter="@Model.CurrentFilter" asp-route-sortOrder="@Model.CurrentSort">Next</a>
            <a class="page-link" asp-page="./Index" asp-route-pageIndex="@Model.TransactionRegistries.TotalPages" asp-route-currentFilter="@Model.CurrentFilter" asp-route-sortOrder="@Model.CurrentSort">Last</a>
        }
    </div>
</div>
