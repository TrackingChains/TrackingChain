@page
@model TrackingChain.TriageWebApplication.Pages.Admin.AccountProfileGroups.IndexModel

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <div class="search-form">
                <form asp-page="./Index" method="get">
                    <label for="searchInput">Search by Name, Profile, SmartContract:</label>
                    <div class="input-group" style="flex-grow: 1; margin-right: 10px;">
                        <input type="text" id="searchInput" name="SearchString" value="@Model.CurrentFilter" class="form-control" />
                        <div class="input-group-append" style="margin-left: 10px;">
                            <button type="submit" class="btn btn-primary">Search</button>
                        </div>
                    </div>
                    <a asp-page="./Index" class="btn btn-link">Clear Filters</a>
                </form>
            </div>
        </div>
    </div>
    <div class="table-responsive mt-4">
        <table class="tracking-table">
            <thead>
                <tr>
                    <th>
                        <a asp-page="./Index"
                           asp-route-sortOrder="@Model.NameSort"
                           asp-route-currentFilter="@Model.CurrentFilter">
                            @Html.DisplayNameFor(model => model.AccountProfileGroups[0].Name)
                        </a>
                    </th>
                    <th>
                        <a asp-page="./Index"
                           asp-route-sortOrder="@Model.AccountNameSort"
                           asp-route-currentFilter="@Model.CurrentFilter">
                            @Html.DisplayNameFor(model => model.AccountProfileGroups[0].Account)
                        </a>
                    </th>
                    <th>
                        <a asp-page="./Index"
                           asp-route-sortOrder="@Model.ProfileGroupNameSort"
                           asp-route-currentFilter="@Model.CurrentFilter">
                            @Html.DisplayNameFor(model => model.AccountProfileGroups[0].ProfileGroup)
                        </a>
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.AccountProfileGroups[0].Priority)
                    </th>
                    <th class="text-center"><a class="btn btn-primary" asp-page="Create">Create New</a></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.AccountProfileGroups)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Account.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ProfileGroup.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Priority)
                        </td>
                        <td class="text-center">
                            <a class="btn btn-info btn-sm" asp-page="./Edit" asp-route-accountId="@item.AccountId" asp-route-profileGroupId="@item.ProfileGroupId">Edit</a>
                            <a class="btn btn-danger btn-sm" asp-page="./Delete" asp-route-accountId="@item.AccountId" asp-route-profileGroupId="@item.ProfileGroupId">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="total-items">
        @{
            var itemShowEnd = Model.PageSize * (Model.AccountProfileGroups.PageIndex - 1) + Model.AccountProfileGroups.Count;
            var itemShowStart = itemShowEnd - Model.AccountProfileGroups.Count + 1;
        }
        Showing @itemShowStart of @itemShowEnd items out of @Model.TotalItems.
    </div>
    <div class="pagination">
        @if (Model.AccountProfileGroups.HasPreviousPage &&
        Model.AccountProfileGroups.TotalPages > 5)
        {
            <a class="page-link" asp-page="./Index" asp-route-pageIndex="1" asp-route-currentFilter="@Model.CurrentFilter" asp-route-sortOrder="@Model.CurrentSort">First</a>
            <a class="page-link" asp-page="./Index" asp-route-pageIndex="@(Model.AccountProfileGroups.PageIndex - 1)" asp-route-currentFilter="@Model.CurrentFilter" asp-route-sortOrder="@Model.CurrentSort">Previous</a>
        }

        @for (int i = Math.Max(1, Model.AccountProfileGroups.PageIndex - 2); i <= Math.Min(Model.AccountProfileGroups.TotalPages, Model.AccountProfileGroups.PageIndex + 2); i++)
        {
            <a class="page-link @(i == Model.AccountProfileGroups.PageIndex ? "active" : "")" asp-page="./Index" asp-route-pageIndex="@i" asp-route-currentFilter="@Model.CurrentFilter" asp-route-sortOrder="@Model.CurrentSort">@i</a>
        }

        @if (Model.AccountProfileGroups.HasNextPage &&
        Model.AccountProfileGroups.TotalPages > 5)
        {
            <a class="page-link" asp-page="./Index" asp-route-pageIndex="@(Model.AccountProfileGroups.PageIndex + 1)" asp-route-currentFilter="@Model.CurrentFilter" asp-route-sortOrder="@Model.CurrentSort">Next</a>
            <a class="page-link" asp-page="./Index" asp-route-pageIndex="@Model.AccountProfileGroups.TotalPages" asp-route-currentFilter="@Model.CurrentFilter" asp-route-sortOrder="@Model.CurrentSort">Last</a>
        }
    </div>
</div>
